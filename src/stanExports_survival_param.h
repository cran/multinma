// Generated by rstantools.  Do not edit by hand.

/*
    multinma is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    multinma is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with multinma.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_survival_param_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 1105> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 719, column 0 to column 22)",
  " (in 'string', line 722, column 0 to column 24)",
  " (in 'string', line 723, column 0 to column 34)",
  " (in 'string', line 726, column 2 to column 29)",
  " (in 'string', line 728, column 2 to column 39)",
  " (in 'string', line 730, column 2 to column 58)",
  " (in 'string', line 734, column 2 to column 27)",
  " (in 'string', line 735, column 2 to column 35)",
  " (in 'string', line 740, column 0 to column 23)",
  " (in 'string', line 745, column 0 to line 750, column 14)",
  " (in 'string', line 753, column 0 to column 58)",
  " (in 'string', line 755, column 0 to column 17)",
  " (in 'string', line 757, column 0 to column 56)",
  " (in 'string', line 759, column 0 to column 24)",
  " (in 'string', line 761, column 0 to column 47)",
  " (in 'string', line 766, column 0 to column 70)",
  " (in 'string', line 767, column 0 to column 45)",
  " (in 'string', line 1078, column 2 to column 79)",
  " (in 'string', line 1079, column 2 to column 38)",
  " (in 'string', line 1080, column 2 to column 38)",
  " (in 'string', line 1081, column 2 to column 34)",
  " (in 'string', line 1083, column 2 to column 59)",
  " (in 'string', line 1088, column 0 to column 54)",
  " (in 'string', line 1089, column 0 to column 53)",
  " (in 'string', line 1090, column 0 to column 44)",
  " (in 'string', line 1093, column 2 to column 66)",
  " (in 'string', line 1097, column 0 to column 22)",
  " (in 'string', line 772, column 2 to column 24)",
  " (in 'string', line 771, column 11 to line 773, column 1)",
  " (in 'string', line 771, column 0 to line 773, column 1)",
  " (in 'string', line 778, column 2 to column 44)",
  " (in 'string', line 777, column 39 to line 779, column 1)",
  " (in 'string', line 777, column 0 to line 779, column 1)",
  " (in 'string', line 784, column 2 to column 33)",
  " (in 'string', line 783, column 15 to line 785, column 1)",
  " (in 'string', line 783, column 0 to line 785, column 1)",
  " (in 'string', line 807, column 2 to line 809, column 23)",
  " (in 'string', line 806, column 7 to line 810, column 1)",
  " (in 'string', line 795, column 11 to column 17)",
  " (in 'string', line 795, column 4 to line 797, column 25)",
  " (in 'string', line 803, column 8 to column 37)",
  " (in 'string', line 801, column 8 to column 69)",
  " (in 'string', line 800, column 6 to line 803, column 37)",
  " (in 'string', line 799, column 24 to line 804, column 5)",
  " (in 'string', line 799, column 4 to line 804, column 5)",
  " (in 'string', line 794, column 2 to line 805, column 3)",
  " (in 'string', line 793, column 8 to line 806, column 1)",
  " (in 'string', line 793, column 0 to line 810, column 1)",
  " (in 'string', line 792, column 12 to line 811, column 1)",
  " (in 'string', line 792, column 0 to line 811, column 1)",
  " (in 'string', line 854, column 4 to line 856, column 34)",
  " (in 'string', line 853, column 9 to line 857, column 3)",
  " (in 'string', line 843, column 11 to column 33)",
  " (in 'string', line 843, column 4 to line 845, column 34)",
  " (in 'string', line 851, column 6 to column 57)",
  " (in 'string', line 849, column 8 to column 108)",
  " (in 'string', line 848, column 6 to line 851, column 57)",
  " (in 'string', line 847, column 33 to line 852, column 5)",
  " (in 'string', line 847, column 4 to line 852, column 5)",
  " (in 'string', line 842, column 10 to line 853, column 3)",
  " (in 'string', line 842, column 2 to line 857, column 3)",
  " (in 'string', line 841, column 7 to line 858, column 1)",
  " (in 'string', line 816, column 9 to column 35)",
  " (in 'string', line 816, column 2 to line 818, column 32)",
  " (in 'string', line 834, column 6 to column 123)",
  " (in 'string', line 833, column 38 to line 835, column 5)",
  " (in 'string', line 833, column 9 to line 835, column 5)",
  " (in 'string', line 832, column 26 to column 70)",
  " (in 'string', line 832, column 4 to line 835, column 5)",
  " (in 'string', line 838, column 6 to column 85)",
  " (in 'string', line 837, column 33 to line 839, column 5)",
  " (in 'string', line 837, column 4 to line 839, column 5)",
  " (in 'string', line 831, column 9 to line 840, column 3)",
  " (in 'string', line 826, column 8 to line 827, column 78)",
  " (in 'string', line 823, column 8 to line 824, column 127)",
  " (in 'string', line 822, column 6 to line 827, column 78)",
  " (in 'string', line 829, column 6 to column 85)",
  " (in 'string', line 821, column 33 to line 830, column 5)",
  " (in 'string', line 821, column 4 to line 830, column 5)",
  " (in 'string', line 820, column 10 to line 831, column 3)",
  " (in 'string', line 820, column 2 to line 840, column 3)",
  " (in 'string', line 815, column 18 to line 841, column 1)",
  " (in 'string', line 815, column 0 to line 858, column 1)",
  " (in 'string', line 814, column 21 to line 859, column 1)",
  " (in 'string', line 814, column 0 to line 859, column 1)",
  " (in 'string', line 879, column 8 to column 37)",
  " (in 'string', line 881, column 16 to column 18)",
  " (in 'string', line 881, column 10 to column 55)",
  " (in 'string', line 882, column 10 to column 20)",
  " (in 'string', line 883, column 10 to column 21)",
  " (in 'string', line 884, column 21 to column 38)",
  " (in 'string', line 884, column 10 to column 47)",
  " (in 'string', line 885, column 22 to column 65)",
  " (in 'string', line 885, column 10 to column 65)",
  " (in 'string', line 891, column 24 to column 38)",
  " (in 'string', line 891, column 12 to column 38)",
  " (in 'string', line 892, column 26 to column 42)",
  " (in 'string', line 892, column 12 to column 42)",
  " (in 'string', line 889, column 17 to line 893, column 11)",
  " (in 'string', line 887, column 24 to column 66)",
  " (in 'string', line 887, column 12 to column 66)",
  " (in 'string', line 888, column 26 to column 70)",
  " (in 'string', line 888, column 12 to column 70)",
  " (in 'string', line 886, column 22 to line 889, column 11)",
  " (in 'string', line 886, column 10 to line 893, column 11)",
  " (in 'string', line 894, column 10 to line 901, column 41)",
  " (in 'string', line 880, column 16 to line 902, column 9)",
  " (in 'string', line 880, column 8 to line 902, column 9)",
  " (in 'string', line 878, column 31 to line 903, column 7)",
  " (in 'string', line 878, column 6 to line 903, column 7)",
  " (in 'string', line 877, column 11 to line 904, column 5)",
  " (in 'string', line 863, column 13 to column 19)",
  " (in 'string', line 863, column 6 to column 26)",
  " (in 'string', line 864, column 13 to column 19)",
  " (in 'string', line 864, column 6 to column 27)",
  " (in 'string', line 865, column 13 to column 32)",
  " (in 'string', line 865, column 34 to column 51)",
  " (in 'string', line 865, column 6 to column 60)",
  " (in 'string', line 866, column 18 to column 53)",
  " (in 'string', line 866, column 6 to column 53)",
  " (in 'string', line 867, column 18 to column 55)",
  " (in 'string', line 867, column 6 to column 55)",
  " (in 'string', line 868, column 20 to column 59)",
  " (in 'string', line 868, column 6 to column 59)",
  " (in 'string', line 869, column 6 to line 876, column 32)",
  " (in 'string', line 862, column 32 to line 877, column 5)",
  " (in 'string', line 862, column 4 to line 904, column 5)",
  " (in 'string', line 861, column 14 to line 905, column 3)",
  " (in 'string', line 861, column 2 to line 905, column 3)",
  " (in 'string', line 908, column 11 to column 32)",
  " (in 'string', line 908, column 4 to line 910, column 37)",
  " (in 'string', line 972, column 13 to column 23)",
  " (in 'string', line 972, column 6 to column 56)",
  " (in 'string', line 974, column 69 to column 122)",
  " (in 'string', line 974, column 38 to column 122)",
  " (in 'string', line 974, column 14 to column 122)",
  " (in 'string', line 974, column 6 to column 122)",
  " (in 'string', line 992, column 10 to column 43)",
  " (in 'string', line 994, column 18 to column 20)",
  " (in 'string', line 994, column 12 to column 61)",
  " (in 'string', line 995, column 12 to column 22)",
  " (in 'string', line 996, column 12 to column 23)",
  " (in 'string', line 997, column 23 to column 40)",
  " (in 'string', line 997, column 12 to column 49)",
  " (in 'string', line 998, column 24 to column 71)",
  " (in 'string', line 998, column 12 to column 71)",
  " (in 'string', line 1004, column 26 to column 40)",
  " (in 'string', line 1004, column 14 to column 40)",
  " (in 'string', line 1005, column 28 to column 44)",
  " (in 'string', line 1005, column 14 to column 44)",
  " (in 'string', line 1002, column 19 to line 1006, column 13)",
  " (in 'string', line 1000, column 26 to column 72)",
  " (in 'string', line 1000, column 14 to column 72)",
  " (in 'string', line 1001, column 28 to column 76)",
  " (in 'string', line 1001, column 14 to column 76)",
  " (in 'string', line 999, column 24 to line 1002, column 13)",
  " (in 'string', line 999, column 12 to line 1006, column 13)",
  " (in 'string', line 1007, column 12 to line 1014, column 47)",
  " (in 'string', line 993, column 18 to line 1015, column 11)",
  " (in 'string', line 993, column 10 to line 1015, column 11)",
  " (in 'string', line 991, column 33 to line 1016, column 9)",
  " (in 'string', line 991, column 8 to line 1016, column 9)",
  " (in 'string', line 990, column 13 to line 1017, column 7)",
  " (in 'string', line 976, column 15 to column 25)",
  " (in 'string', line 976, column 8 to column 32)",
  " (in 'string', line 977, column 15 to column 25)",
  " (in 'string', line 977, column 8 to column 33)",
  " (in 'string', line 978, column 15 to column 25)",
  " (in 'string', line 978, column 27 to column 44)",
  " (in 'string', line 978, column 8 to column 53)",
  " (in 'string', line 979, column 20 to column 59)",
  " (in 'string', line 979, column 8 to column 59)",
  " (in 'string', line 980, column 20 to column 61)",
  " (in 'string', line 980, column 8 to column 61)",
  " (in 'string', line 981, column 22 to column 65)",
  " (in 'string', line 981, column 8 to column 65)",
  " (in 'string', line 982, column 8 to line 989, column 38)",
  " (in 'string', line 975, column 34 to line 990, column 7)",
  " (in 'string', line 975, column 6 to line 1017, column 7)",
  " (in 'string', line 971, column 11 to line 1018, column 5)",
  " (in 'string', line 938, column 10 to column 43)",
  " (in 'string', line 940, column 18 to column 20)",
  " (in 'string', line 940, column 12 to column 61)",
  " (in 'string', line 941, column 12 to column 22)",
  " (in 'string', line 942, column 12 to column 23)",
  " (in 'string', line 943, column 23 to column 40)",
  " (in 'string', line 943, column 12 to column 49)",
  " (in 'string', line 944, column 24 to column 71)",
  " (in 'string', line 944, column 12 to column 71)",
  " (in 'string', line 950, column 14 to column 41)",
  " (in 'string', line 951, column 14 to column 45)",
  " (in 'string', line 948, column 19 to line 952, column 13)",
  " (in 'string', line 946, column 14 to column 73)",
  " (in 'string', line 947, column 14 to column 77)",
  " (in 'string', line 945, column 24 to line 948, column 13)",
  " (in 'string', line 945, column 12 to line 952, column 13)",
  " (in 'string', line 954, column 21 to column 25)",
  " (in 'string', line 954, column 14 to column 42)",
  " (in 'string', line 955, column 21 to column 25)",
  " (in 'string', line 955, column 14 to column 36)",
  " (in 'string', line 956, column 14 to column 102)",
  " (in 'string', line 957, column 55 to column 112)",
  " (in 'string', line 957, column 14 to column 112)",
  " (in 'string', line 958, column 14 to line 965, column 41)",
  " (in 'string', line 966, column 14 to column 71)",
  " (in 'string', line 953, column 28 to line 967, column 13)",
  " (in 'string', line 953, column 12 to line 967, column 13)",
  " (in 'string', line 939, column 18 to line 968, column 11)",
  " (in 'string', line 939, column 10 to line 968, column 11)",
  " (in 'string', line 937, column 33 to line 969, column 9)",
  " (in 'string', line 937, column 8 to line 969, column 9)",
  " (in 'string', line 936, column 13 to line 970, column 7)",
  " (in 'string', line 914, column 17 to column 21)",
  " (in 'string', line 914, column 10 to column 38)",
  " (in 'string', line 915, column 17 to column 21)",
  " (in 'string', line 915, column 10 to column 32)",
  " (in 'string', line 916, column 17 to column 21)",
  " (in 'string', line 916, column 10 to column 28)",
  " (in 'string', line 917, column 17 to column 21)",
  " (in 'string', line 917, column 10 to column 29)",
  " (in 'string', line 918, column 17 to column 34)",
  " (in 'string', line 918, column 36 to column 53)",
  " (in 'string', line 918, column 10 to column 62)",
  " (in 'string', line 919, column 22 to column 109)",
  " (in 'string', line 919, column 10 to column 109)",
  " (in 'string', line 920, column 22 to column 109)",
  " (in 'string', line 920, column 10 to column 109)",
  " (in 'string', line 921, column 24 to column 113)",
  " (in 'string', line 921, column 10 to column 113)",
  " (in 'string', line 922, column 10 to column 90)",
  " (in 'string', line 924, column 47 to column 100)",
  " (in 'string', line 924, column 10 to column 100)",
  " (in 'string', line 926, column 10 to line 933, column 38)",
  " (in 'string', line 934, column 10 to column 63)",
  " (in 'string', line 913, column 32 to line 935, column 9)",
  " (in 'string', line 913, column 8 to line 935, column 9)",
  " (in 'string', line 912, column 34 to line 936, column 7)",
  " (in 'string', line 912, column 6 to line 970, column 7)",
  " (in 'string', line 911, column 22 to line 971, column 5)",
  " (in 'string', line 911, column 4 to line 1018, column 5)",
  " (in 'string', line 907, column 18 to line 1019, column 3)",
  " (in 'string', line 907, column 2 to line 1019, column 3)",
  " (in 'string', line 1100, column 2 to column 12)",
  " (in 'string', line 1103, column 6 to column 93)",
  " (in 'string', line 1104, column 6 to column 13)",
  " (in 'string', line 1102, column 21 to line 1105, column 5)",
  " (in 'string', line 1102, column 4 to line 1105, column 5)",
  " (in 'string', line 1101, column 41 to line 1106, column 3)",
  " (in 'string', line 1101, column 2 to line 1106, column 3)",
  " (in 'string', line 1109, column 6 to line 1110, column 101)",
  " (in 'string', line 1113, column 8 to column 49)",
  " (in 'string', line 1112, column 6 to line 1113, column 49)",
  " (in 'string', line 1115, column 6 to column 13)",
  " (in 'string', line 1108, column 47 to line 1116, column 5)",
  " (in 'string', line 1108, column 4 to line 1116, column 5)",
  " (in 'string', line 1107, column 31 to line 1117, column 3)",
  " (in 'string', line 1107, column 2 to line 1117, column 3)",
  " (in 'string', line 1099, column 8 to line 1118, column 1)",
  " (in 'string', line 1099, column 0 to line 1118, column 1)",
  " (in 'string', line 1123, column 4 to column 125)",
  " (in 'string', line 1122, column 26 to line 1124, column 3)",
  " (in 'string', line 1122, column 2 to line 1124, column 3)",
  " (in 'string', line 1121, column 29 to line 1125, column 1)",
  " (in 'string', line 1121, column 0 to line 1125, column 1)",
  " (in 'string', line 1127, column 0 to column 43)",
  " (in 'string', line 1131, column 2 to column 12)",
  " (in 'string', line 1132, column 2 to column 9)",
  " (in 'string', line 1134, column 4 to column 28)",
  " (in 'string', line 1135, column 4 to line 1136, column 102)",
  " (in 'string', line 1137, column 4 to line 1138, column 123)",
  " (in 'string', line 1139, column 4 to column 12)",
  " (in 'string', line 1133, column 31 to line 1140, column 3)",
  " (in 'string', line 1133, column 2 to line 1140, column 3)",
  " (in 'string', line 1130, column 0 to line 1141, column 1)",
  " (in 'string', line 1144, column 14 to column 44)",
  " (in 'string', line 1144, column 2 to column 44)",
  " (in 'string', line 1145, column 18 to column 78)",
  " (in 'string', line 1145, column 2 to column 78)",
  " (in 'string', line 1148, column 27 to column 99)",
  " (in 'string', line 1148, column 2 to column 99)",
  " (in 'string', line 1151, column 56 to column 68)",
  " (in 'string', line 1151, column 2 to column 68)",
  " (in 'string', line 1152, column 17 to column 29)",
  " (in 'string', line 1152, column 2 to column 29)",
  " (in 'string', line 1154, column 4 to column 16)",
  " (in 'string', line 1155, column 4 to column 13)",
  " (in 'string', line 1153, column 17 to line 1156, column 3)",
  " (in 'string', line 1153, column 2 to line 1156, column 3)",
  " (in 'string', line 1158, column 19 to column 48)",
  " (in 'string', line 1158, column 2 to column 48)",
  " (in 'string', line 1027, column 0 to column 111)",
  " (in 'string', line 1029, column 0 to column 86)",
  " (in 'string', line 1031, column 0 to column 89)",
  " (in 'string', line 1034, column 0 to column 90)",
  " (in 'string', line 1043, column 11 to column 21)",
  " (in 'string', line 1043, column 4 to column 29)",
  " (in 'string', line 1050, column 6 to column 27)",
  " (in 'string', line 1051, column 6 to column 28)",
  " (in 'string', line 1049, column 34 to line 1052, column 5)",
  " (in 'string', line 1049, column 9 to line 1052, column 5)",
  " (in 'string', line 1046, column 6 to column 26)",
  " (in 'string', line 1047, column 6 to column 25)",
  " (in 'string', line 1045, column 29 to line 1048, column 5)",
  " (in 'string', line 1045, column 4 to line 1052, column 5)",
  " (in 'string', line 1053, column 4 to column 94)",
  " (in 'string', line 1041, column 10 to line 1054, column 3)",
  " (in 'string', line 1041, column 9 to line 1054, column 4)",
  " (in 'string', line 1039, column 4 to column 92)",
  " (in 'string', line 1038, column 27 to line 1041, column 3)",
  " (in 'string', line 1038, column 2 to line 1054, column 4)",
  " (in 'string', line 1037, column 8 to line 1055, column 1)",
  " (in 'string', line 1037, column 0 to line 1055, column 1)",
  " (in 'string', line 1058, column 0 to column 23)",
  " (in 'string', line 1062, column 2 to column 74)",
  " (in 'string', line 1061, column 21 to line 1063, column 1)",
  " (in 'string', line 1061, column 0 to line 1063, column 1)",
  " (in 'string', line 1065, column 14 to column 102)",
  " (in 'string', line 1065, column 2 to column 102)",
  " (in 'string', line 1066, column 16 to column 109)",
  " (in 'string', line 1066, column 2 to column 109)",
  " (in 'string', line 1068, column 24 to column 137)",
  " (in 'string', line 1068, column 2 to column 137)",
  " (in 'string', line 1069, column 26 to column 139)",
  " (in 'string', line 1069, column 2 to column 139)",
  " (in 'string', line 1071, column 2 to column 22)",
  " (in 'string', line 1073, column 2 to column 26)",
  " (in 'string', line 489, column 0 to column 20)",
  " (in 'string', line 490, column 0 to column 24)",
  " (in 'string', line 491, column 0 to column 29)",
  " (in 'string', line 493, column 0 to column 20)",
  " (in 'string', line 494, column 0 to column 24)",
  " (in 'string', line 495, column 0 to column 29)",
  " (in 'string', line 498, column 0 to column 22)",
  " (in 'string', line 499, column 6 to column 12)",
  " (in 'string', line 499, column 0 to column 35)",
  " (in 'string', line 500, column 6 to column 14)",
  " (in 'string', line 500, column 0 to column 37)",
  " (in 'string', line 501, column 0 to column 26)",
  " (in 'string', line 502, column 6 to column 18)",
  " (in 'string', line 502, column 0 to column 45)",
  " (in 'string', line 503, column 6 to column 21)",
  " (in 'string', line 503, column 0 to column 53)",
  " (in 'string', line 504, column 6 to column 21)",
  " (in 'string', line 504, column 0 to column 55)",
  " (in 'string', line 511, column 0 to column 16)",
  " (in 'string', line 512, column 0 to column 16)",
  " (in 'string', line 515, column 0 to column 21)",
  " (in 'string', line 516, column 0 to column 36)",
  " (in 'string', line 517, column 6 to column 13)",
  " (in 'string', line 517, column 0 to column 37)",
  " (in 'string', line 518, column 0 to column 22)",
  " (in 'string', line 519, column 0 to column 22)",
  " (in 'string', line 521, column 0 to column 18)",
  " (in 'string', line 524, column 7 to column 22)",
  " (in 'string', line 524, column 0 to column 39)",
  " (in 'string', line 525, column 11 to column 48)",
  " (in 'string', line 525, column 0 to column 69)",
  " (in 'string', line 528, column 0 to column 25)",
  " (in 'string', line 529, column 7 to column 57)",
  " (in 'string', line 529, column 59 to column 61)",
  " (in 'string', line 529, column 0 to column 65)",
  " (in 'string', line 530, column 7 to column 18)",
  " (in 'string', line 530, column 20 to column 31)",
  " (in 'string', line 530, column 0 to column 39)",
  " (in 'string', line 533, column 0 to column 33)",
  " (in 'string', line 534, column 7 to column 74)",
  " (in 'string', line 534, column 0 to column 84)",
  " (in 'string', line 537, column 0 to column 25)",
  " (in 'string', line 538, column 6 to column 56)",
  " (in 'string', line 538, column 0 to column 80)",
  " (in 'string', line 539, column 12 to column 34)",
  " (in 'string', line 539, column 0 to column 43)",
  " (in 'string', line 542, column 0 to column 32)",
  " (in 'string', line 545, column 0 to column 42)",
  " (in 'string', line 546, column 0 to column 30)",
  " (in 'string', line 547, column 0 to column 36)",
  " (in 'string', line 548, column 0 to column 33)",
  " (in 'string', line 550, column 0 to column 36)",
  " (in 'string', line 551, column 0 to column 24)",
  " (in 'string', line 552, column 0 to column 30)",
  " (in 'string', line 553, column 0 to column 27)",
  " (in 'string', line 555, column 0 to column 36)",
  " (in 'string', line 556, column 0 to column 36)",
  " (in 'string', line 557, column 0 to column 24)",
  " (in 'string', line 558, column 0 to column 30)",
  " (in 'string', line 559, column 0 to column 27)",
  " (in 'string', line 561, column 0 to column 36)",
  " (in 'string', line 562, column 0 to column 24)",
  " (in 'string', line 563, column 0 to column 30)",
  " (in 'string', line 564, column 0 to column 27)",
  " (in 'string', line 566, column 2 to column 38)",
  " (in 'string', line 567, column 2 to column 26)",
  " (in 'string', line 568, column 2 to column 32)",
  " (in 'string', line 569, column 2 to column 29)",
  " (in 'string', line 571, column 2 to column 39)",
  " (in 'string', line 572, column 2 to column 27)",
  " (in 'string', line 573, column 2 to column 33)",
  " (in 'string', line 574, column 2 to column 30)",
  " (in 'string', line 576, column 2 to column 20)",
  " (in 'string', line 588, column 8 to column 18)",
  " (in 'string', line 588, column 2 to column 45)",
  " (in 'string', line 590, column 9 to column 15)",
  " (in 'string', line 590, column 2 to column 26)",
  " (in 'string', line 591, column 9 to column 15)",
  " (in 'string', line 591, column 2 to column 32)",
  " (in 'string', line 592, column 9 to column 15)",
  " (in 'string', line 592, column 2 to column 32)",
  " (in 'string', line 593, column 8 to column 14)",
  " (in 'string', line 593, column 2 to column 49)",
  " (in 'string', line 594, column 9 to column 19)",
  " (in 'string', line 594, column 2 to column 34)",
  " (in 'string', line 595, column 9 to column 19)",
  " (in 'string', line 595, column 2 to column 40)",
  " (in 'string', line 596, column 9 to column 19)",
  " (in 'string', line 596, column 2 to column 40)",
  " (in 'string', line 597, column 8 to column 18)",
  " (in 'string', line 597, column 2 to column 57)",
  " (in 'string', line 599, column 2 to column 32)",
  " (in 'string', line 601, column 8 to column 54)",
  " (in 'string', line 601, column 2 to column 76)",
  " (in 'string', line 602, column 8 to column 54)",
  " (in 'string', line 602, column 2 to column 79)",
  " (in 'string', line 604, column 2 to column 22)",
  " (in 'string', line 605, column 9 to column 55)",
  " (in 'string', line 605, column 57 to column 63)",
  " (in 'string', line 605, column 2 to column 71)",
  " (in 'string', line 606, column 2 to column 36)",
  " (in 'string', line 608, column 2 to column 42)",
  " (in 'string', line 609, column 2 to column 39)",
  " (in 'string', line 610, column 2 to column 36)",
  " (in 'string', line 611, column 2 to column 33)",
  " (in 'string', line 615, column 2 to column 66)",
  " (in 'string', line 617, column 2 to column 53)",
  " (in 'string', line 619, column 2 to column 39)",
  " (in 'string', line 620, column 2 to column 48)",
  " (in 'string', line 622, column 8 to column 18)",
  " (in 'string', line 622, column 2 to column 37)",
  " (in 'string', line 624, column 8 to column 14)",
  " (in 'string', line 624, column 2 to column 59)",
  " (in 'string', line 625, column 8 to column 43)",
  " (in 'string', line 625, column 2 to column 143)",
  " (in 'string', line 626, column 8 to column 14)",
  " (in 'string', line 626, column 2 to column 65)",
  " (in 'string', line 627, column 8 to column 43)",
  " (in 'string', line 627, column 2 to column 149)",
  " (in 'string', line 629, column 8 to column 50)",
  " (in 'string', line 629, column 2 to column 147)",
  " (in 'string', line 630, column 8 to column 50)",
  " (in 'string', line 630, column 52 to column 104)",
  " (in 'string', line 630, column 2 to column 127)",
  " (in 'string', line 631, column 8 to column 50)",
  " (in 'string', line 631, column 2 to column 155)",
  " (in 'string', line 632, column 8 to column 50)",
  " (in 'string', line 632, column 52 to column 108)",
  " (in 'string', line 632, column 2 to column 135)",
  " (in 'string', line 634, column 12 to column 18)",
  " (in 'string', line 634, column 2 to column 30)",
  " (in 'string', line 635, column 9 to column 15)",
  " (in 'string', line 635, column 17 to column 23)",
  " (in 'string', line 635, column 2 to column 74)",
  " (in 'string', line 636, column 9 to column 46)",
  " (in 'string', line 636, column 48 to column 54)",
  " (in 'string', line 636, column 2 to column 166)",
  " (in 'string', line 642, column 0 to column 54)",
  " (in 'string', line 646, column 0 to column 46)",
  " (in 'string', line 648, column 7 to column 14)",
  " (in 'string', line 648, column 0 to column 47)",
  " (in 'string', line 650, column 0 to column 21)",
  " (in 'string', line 651, column 21 to column 28)",
  " (in 'string', line 651, column 0 to column 84)",
  " (in 'string', line 653, column 0 to column 17)",
  " (in 'string', line 654, column 0 to column 21)",
  " (in 'string', line 655, column 0 to column 34)",
  " (in 'string', line 656, column 0 to column 58)",
  " (in 'string', line 657, column 7 to column 30)",
  " (in 'string', line 657, column 0 to column 81)",
  " (in 'string', line 658, column 6 to column 29)",
  " (in 'string', line 658, column 0 to column 85)",
  " (in 'string', line 659, column 6 to column 33)",
  " (in 'string', line 659, column 0 to column 90)",
  " (in 'string', line 665, column 0 to column 32)",
  " (in 'string', line 671, column 6 to column 47)",
  " (in 'string', line 671, column 0 to column 135)",
  " (in 'string', line 674, column 10 to column 12)",
  " (in 'string', line 674, column 0 to column 21)",
  " (in 'string', line 675, column 7 to column 13)",
  " (in 'string', line 675, column 15 to column 17)",
  " (in 'string', line 675, column 0 to column 57)",
  " (in 'string', line 676, column 7 to column 28)",
  " (in 'string', line 676, column 30 to column 32)",
  " (in 'string', line 676, column 0 to column 117)",
  " (in 'string', line 677, column 7 to column 33)",
  " (in 'string', line 677, column 35 to column 37)",
  " (in 'string', line 677, column 0 to column 176)",
  " (in 'string', line 680, column 0 to column 17)",
  " (in 'string', line 681, column 7 to column 40)",
  " (in 'string', line 681, column 0 to column 105)",
  " (in 'string', line 682, column 7 to column 59)",
  " (in 'string', line 682, column 0 to column 169)",
  " (in 'string', line 683, column 7 to column 69)",
  " (in 'string', line 683, column 0 to column 233)",
  " (in 'string', line 686, column 0 to column 72)",
  " (in 'string', line 689, column 7 to column 44)",
  " (in 'string', line 689, column 46 to column 83)",
  " (in 'string', line 689, column 0 to column 129)",
  " (in 'string', line 693, column 6 to column 21)",
  " (in 'string', line 693, column 0 to column 43)",
  " (in 'string', line 695, column 2 to column 12)",
  " (in 'string', line 696, column 2 to column 12)",
  " (in 'string', line 703, column 6 to column 13)",
  " (in 'string', line 702, column 11 to line 704, column 5)",
  " (in 'string', line 699, column 6 to column 29)",
  " (in 'string', line 700, column 6 to column 13)",
  " (in 'string', line 701, column 6 to column 12)",
  " (in 'string', line 698, column 41 to line 702, column 5)",
  " (in 'string', line 698, column 4 to line 704, column 5)",
  " (in 'string', line 697, column 37 to line 705, column 3)",
  " (in 'string', line 697, column 2 to line 705, column 3)",
  " (in 'string', line 707, column 2 to column 25)",
  " (in 'string', line 694, column 21 to line 708, column 1)",
  " (in 'string', line 694, column 0 to line 708, column 1)",
  " (in 'string', line 709, column 26 to column 70)",
  " (in 'string', line 709, column 2 to column 70)",
  " (in 'string', line 711, column 29 to column 98)",
  " (in 'string', line 711, column 4 to column 98)",
  " (in 'string', line 712, column 33 to column 114)",
  " (in 'string', line 712, column 4 to column 114)",
  " (in 'string', line 710, column 55 to line 713, column 3)",
  " (in 'string', line 710, column 30 to line 713, column 3)",
  " (in 'string', line 710, column 2 to line 713, column 3)",
  " (in 'string', line 719, column 7 to column 9)",
  " (in 'string', line 722, column 7 to column 14)",
  " (in 'string', line 723, column 18 to column 28)",
  " (in 'string', line 726, column 18 to column 23)",
  " (in 'string', line 728, column 18 to column 32)",
  " (in 'string', line 730, column 9 to column 28)",
  " (in 'string', line 730, column 30 to column 47)",
  " (in 'string', line 734, column 9 to column 15)",
  " (in 'string', line 735, column 9 to column 19)",
  " (in 'string', line 740, column 7 to column 13)",
  " (in 'string', line 745, column 7 to column 14)",
  " (in 'string', line 753, column 7 to column 9)",
  " (in 'string', line 755, column 7 to column 12)",
  " (in 'string', line 757, column 7 to column 13)",
  " (in 'string', line 759, column 7 to column 16)",
  " (in 'string', line 761, column 7 to column 40)",
  " (in 'string', line 766, column 7 to column 48)",
  " (in 'string', line 767, column 7 to column 22)",
  " (in 'string', line 1078, column 9 to column 71)",
  " (in 'string', line 1079, column 9 to column 30)",
  " (in 'string', line 1080, column 9 to column 30)",
  " (in 'string', line 1081, column 9 to column 30)",
  " (in 'string', line 1083, column 9 to column 31)",
  " (in 'string', line 1083, column 34 to column 51)",
  " (in 'string', line 1088, column 7 to column 44)",
  " (in 'string', line 1089, column 7 to column 44)",
  " (in 'string', line 1090, column 7 to column 22)",
  " (in 'string', line 1093, column 9 to column 37)",
  " (in 'string', line 1097, column 7 to column 14)",
  " (in 'string', line 21, column 4 to column 42)",
  " (in 'string', line 20, column 9 to line 22, column 3)",
  " (in 'string', line 18, column 4 to column 44)",
  " (in 'string', line 19, column 4 to column 22)",
  " (in 'string', line 17, column 24 to line 20, column 3)",
  " (in 'string', line 17, column 9 to line 22, column 3)",
  " (in 'string', line 16, column 4 to column 35)",
  " (in 'string', line 15, column 24 to line 17, column 3)",
  " (in 'string', line 15, column 9 to line 22, column 3)",
  " (in 'string', line 14, column 4 to column 29)",
  " (in 'string', line 13, column 24 to line 15, column 3)",
  " (in 'string', line 13, column 9 to line 22, column 3)",
  " (in 'string', line 12, column 4 to column 39)",
  " (in 'string', line 11, column 24 to line 13, column 3)",
  " (in 'string', line 11, column 9 to line 22, column 3)",
  " (in 'string', line 10, column 4 to column 32)",
  " (in 'string', line 9, column 24 to line 11, column 3)",
  " (in 'string', line 9, column 9 to line 22, column 3)",
  " (in 'string', line 8, column 4 to column 32)",
  " (in 'string', line 7, column 24 to line 9, column 3)",
  " (in 'string', line 7, column 9 to line 22, column 3)",
  " (in 'string', line 5, column 17 to line 7, column 3)",
  " (in 'string', line 5, column 2 to line 22, column 3)",
  " (in 'string', line 23, column 2 to column 9)",
  " (in 'string', line 4, column 77 to line 24, column 1)",
  " (in 'string', line 28, column 2 to column 18)",
  " (in 'string', line 29, column 2 to column 18)",
  " (in 'string', line 30, column 2 to column 12)",
  " (in 'string', line 33, column 23 to column 30)",
  " (in 'string', line 33, column 6 to column 30)",
  " (in 'string', line 32, column 19 to line 34, column 5)",
  " (in 'string', line 32, column 4 to line 34, column 5)",
  " (in 'string', line 31, column 17 to line 35, column 3)",
  " (in 'string', line 31, column 2 to line 35, column 3)",
  " (in 'string', line 36, column 2 to column 11)",
  " (in 'string', line 27, column 28 to line 37, column 1)",
  " (in 'string', line 43, column 2 to column 26)",
  " (in 'string', line 44, column 8 to column 9)",
  " (in 'string', line 44, column 2 to column 17)",
  " (in 'string', line 45, column 2 to column 12)",
  " (in 'string', line 48, column 6 to column 15)",
  " (in 'string', line 49, column 6 to column 13)",
  " (in 'string', line 47, column 19 to line 50, column 5)",
  " (in 'string', line 47, column 4 to line 50, column 5)",
  " (in 'string', line 46, column 17 to line 51, column 3)",
  " (in 'string', line 46, column 2 to line 51, column 3)",
  " (in 'string', line 52, column 2 to column 20)",
  " (in 'string', line 42, column 40 to line 53, column 1)",
  " (in 'string', line 57, column 2 to column 12)",
  " (in 'string', line 59, column 19 to column 26)",
  " (in 'string', line 59, column 4 to column 26)",
  " (in 'string', line 58, column 31 to line 60, column 3)",
  " (in 'string', line 58, column 2 to line 60, column 3)",
  " (in 'string', line 61, column 2 to column 11)",
  " (in 'string', line 56, column 33 to line 62, column 1)",
  " (in 'string', line 65, column 8 to column 14)",
  " (in 'string', line 65, column 2 to column 45)",
  " (in 'string', line 67, column 14 to column 27)",
  " (in 'string', line 67, column 4 to column 27)",
  " (in 'string', line 66, column 31 to line 68, column 3)",
  " (in 'string', line 66, column 2 to line 68, column 3)",
  " (in 'string', line 69, column 2 to column 11)",
  " (in 'string', line 64, column 50 to line 70, column 1)",
  " (in 'string', line 74, column 2 to column 26)",
  " (in 'string', line 75, column 8 to column 9)",
  " (in 'string', line 75, column 2 to column 17)",
  " (in 'string', line 76, column 2 to column 12)",
  " (in 'string', line 79, column 6 to column 15)",
  " (in 'string', line 80, column 6 to column 13)",
  " (in 'string', line 78, column 18 to line 81, column 5)",
  " (in 'string', line 78, column 4 to line 81, column 5)",
  " (in 'string', line 77, column 17 to line 82, column 3)",
  " (in 'string', line 77, column 2 to line 82, column 3)",
  " (in 'string', line 83, column 2 to column 20)",
  " (in 'string', line 73, column 32 to line 84, column 1)",
  " (in 'string', line 88, column 3 to column 25)",
  " (in 'string', line 89, column 3 to column 38)",
  " (in 'string', line 90, column 3 to column 91)",
  " (in 'string', line 86, column 58 to line 91, column 3)",
  " (in 'string', line 96, column 4 to column 28)",
  " (in 'string', line 97, column 11 to column 12)",
  " (in 'string', line 97, column 4 to column 18)",
  " (in 'string', line 118, column 13 to column 14)",
  " (in 'string', line 118, column 6 to column 36)",
  " (in 'string', line 119, column 13 to column 14)",
  " (in 'string', line 119, column 6 to column 60)",
  " (in 'string', line 120, column 6 to column 36)",
  " (in 'string', line 117, column 26 to line 121, column 5)",
  " (in 'string', line 117, column 11 to line 121, column 5)",
  " (in 'string', line 115, column 13 to column 14)",
  " (in 'string', line 115, column 6 to column 33)",
  " (in 'string', line 116, column 21 to column 66)",
  " (in 'string', line 116, column 6 to column 66)",
  " (in 'string', line 114, column 26 to line 117, column 5)",
  " (in 'string', line 114, column 11 to line 121, column 5)",
  " (in 'string', line 113, column 6 to column 44)",
  " (in 'string', line 112, column 26 to line 114, column 5)",
  " (in 'string', line 112, column 11 to line 121, column 5)",
  " (in 'string', line 111, column 21 to column 69)",
  " (in 'string', line 111, column 6 to column 69)",
  " (in 'string', line 108, column 26 to line 112, column 5)",
  " (in 'string', line 108, column 11 to line 121, column 5)",
  " (in 'string', line 107, column 6 to column 45)",
  " (in 'string', line 106, column 26 to line 108, column 5)",
  " (in 'string', line 106, column 11 to line 121, column 5)",
  " (in 'string', line 105, column 6 to column 28)",
  " (in 'string', line 104, column 26 to line 106, column 5)",
  " (in 'string', line 104, column 11 to line 121, column 5)",
  " (in 'string', line 103, column 6 to column 46)",
  " (in 'string', line 102, column 26 to line 104, column 5)",
  " (in 'string', line 102, column 11 to line 121, column 5)",
  " (in 'string', line 101, column 6 to column 37)",
  " (in 'string', line 100, column 26 to line 102, column 5)",
  " (in 'string', line 100, column 11 to line 121, column 5)",
  " (in 'string', line 99, column 6 to column 27)",
  " (in 'string', line 98, column 19 to line 100, column 5)",
  " (in 'string', line 98, column 4 to line 121, column 5)",
  " (in 'string', line 122, column 4 to column 15)",
  " (in 'string', line 93, column 69 to line 123, column 3)",
  " (in 'string', line 128, column 4 to column 28)",
  " (in 'string', line 129, column 11 to column 12)",
  " (in 'string', line 129, column 4 to column 18)",
  " (in 'string', line 150, column 6 to column 31)",
  " (in 'string', line 151, column 13 to column 14)",
  " (in 'string', line 151, column 6 to column 57)",
  " (in 'string', line 152, column 6 to column 36)",
  " (in 'string', line 149, column 26 to line 153, column 5)",
  " (in 'string', line 149, column 11 to line 153, column 5)",
  " (in 'string', line 147, column 13 to column 14)",
  " (in 'string', line 147, column 6 to column 33)",
  " (in 'string', line 148, column 21 to column 63)",
  " (in 'string', line 148, column 6 to column 63)",
  " (in 'string', line 146, column 26 to line 149, column 5)",
  " (in 'string', line 146, column 11 to line 153, column 5)",
  " (in 'string', line 145, column 6 to column 44)",
  " (in 'string', line 144, column 26 to line 146, column 5)",
  " (in 'string', line 144, column 11 to line 153, column 5)",
  " (in 'string', line 143, column 21 to column 66)",
  " (in 'string', line 143, column 6 to column 66)",
  " (in 'string', line 140, column 26 to line 144, column 5)",
  " (in 'string', line 140, column 11 to line 153, column 5)",
  " (in 'string', line 139, column 6 to column 44)",
  " (in 'string', line 138, column 26 to line 140, column 5)",
  " (in 'string', line 138, column 11 to line 153, column 5)",
  " (in 'string', line 137, column 6 to column 28)",
  " (in 'string', line 136, column 26 to line 138, column 5)",
  " (in 'string', line 136, column 11 to line 153, column 5)",
  " (in 'string', line 135, column 6 to column 44)",
  " (in 'string', line 134, column 26 to line 136, column 5)",
  " (in 'string', line 134, column 11 to line 153, column 5)",
  " (in 'string', line 133, column 6 to column 37)",
  " (in 'string', line 132, column 26 to line 134, column 5)",
  " (in 'string', line 132, column 11 to line 153, column 5)",
  " (in 'string', line 131, column 6 to column 27)",
  " (in 'string', line 130, column 19 to line 132, column 5)",
  " (in 'string', line 130, column 4 to line 153, column 5)",
  " (in 'string', line 154, column 4 to column 15)",
  " (in 'string', line 125, column 66 to line 155, column 3)",
  " (in 'string', line 160, column 4 to column 30)",
  " (in 'string', line 161, column 11 to column 12)",
  " (in 'string', line 161, column 4 to column 18)",
  " (in 'string', line 182, column 6 to column 31)",
  " (in 'string', line 183, column 13 to column 14)",
  " (in 'string', line 183, column 6 to column 57)",
  " (in 'string', line 184, column 6 to column 36)",
  " (in 'string', line 181, column 26 to line 185, column 5)",
  " (in 'string', line 181, column 11 to line 185, column 5)",
  " (in 'string', line 179, column 13 to column 14)",
  " (in 'string', line 179, column 6 to column 33)",
  " (in 'string', line 180, column 21 to column 60)",
  " (in 'string', line 180, column 6 to column 60)",
  " (in 'string', line 178, column 26 to line 181, column 5)",
  " (in 'string', line 178, column 11 to line 185, column 5)",
  " (in 'string', line 177, column 6 to column 44)",
  " (in 'string', line 176, column 26 to line 178, column 5)",
  " (in 'string', line 176, column 11 to line 185, column 5)",
  " (in 'string', line 175, column 21 to column 63)",
  " (in 'string', line 175, column 6 to column 63)",
  " (in 'string', line 172, column 26 to line 176, column 5)",
  " (in 'string', line 172, column 11 to line 185, column 5)",
  " (in 'string', line 171, column 6 to column 43)",
  " (in 'string', line 170, column 26 to line 172, column 5)",
  " (in 'string', line 170, column 11 to line 185, column 5)",
  " (in 'string', line 169, column 6 to column 27)",
  " (in 'string', line 168, column 26 to line 170, column 5)",
  " (in 'string', line 168, column 11 to line 185, column 5)",
  " (in 'string', line 167, column 6 to column 43)",
  " (in 'string', line 166, column 26 to line 168, column 5)",
  " (in 'string', line 166, column 11 to line 185, column 5)",
  " (in 'string', line 165, column 6 to column 36)",
  " (in 'string', line 164, column 26 to line 166, column 5)",
  " (in 'string', line 164, column 11 to line 185, column 5)",
  " (in 'string', line 163, column 6 to column 26)",
  " (in 'string', line 162, column 19 to line 164, column 5)",
  " (in 'string', line 162, column 4 to line 185, column 5)",
  " (in 'string', line 186, column 4 to column 15)",
  " (in 'string', line 157, column 65 to line 187, column 3)",
  " (in 'string', line 192, column 4 to column 30)",
  " (in 'string', line 193, column 11 to column 12)",
  " (in 'string', line 193, column 4 to column 18)",
  " (in 'string', line 214, column 13 to column 14)",
  " (in 'string', line 214, column 6 to column 36)",
  " (in 'string', line 215, column 13 to column 14)",
  " (in 'string', line 215, column 6 to column 60)",
  " (in 'string', line 216, column 6 to column 36)",
  " (in 'string', line 213, column 26 to line 217, column 5)",
  " (in 'string', line 213, column 11 to line 217, column 5)",
  " (in 'string', line 211, column 13 to column 14)",
  " (in 'string', line 211, column 6 to column 33)",
  " (in 'string', line 212, column 21 to column 63)",
  " (in 'string', line 212, column 6 to column 63)",
  " (in 'string', line 210, column 26 to line 213, column 5)",
  " (in 'string', line 210, column 11 to line 217, column 5)",
  " (in 'string', line 209, column 6 to column 44)",
  " (in 'string', line 208, column 26 to line 210, column 5)",
  " (in 'string', line 208, column 11 to line 217, column 5)",
  " (in 'string', line 207, column 21 to column 66)",
  " (in 'string', line 207, column 6 to column 66)",
  " (in 'string', line 204, column 26 to line 208, column 5)",
  " (in 'string', line 204, column 11 to line 217, column 5)",
  " (in 'string', line 203, column 6 to column 45)",
  " (in 'string', line 202, column 26 to line 204, column 5)",
  " (in 'string', line 202, column 11 to line 217, column 5)",
  " (in 'string', line 201, column 6 to column 27)",
  " (in 'string', line 200, column 26 to line 202, column 5)",
  " (in 'string', line 200, column 11 to line 217, column 5)",
  " (in 'string', line 199, column 6 to column 45)",
  " (in 'string', line 198, column 26 to line 200, column 5)",
  " (in 'string', line 198, column 11 to line 217, column 5)",
  " (in 'string', line 197, column 6 to column 37)",
  " (in 'string', line 196, column 26 to line 198, column 5)",
  " (in 'string', line 196, column 11 to line 217, column 5)",
  " (in 'string', line 195, column 6 to column 26)",
  " (in 'string', line 194, column 19 to line 196, column 5)",
  " (in 'string', line 194, column 4 to line 217, column 5)",
  " (in 'string', line 218, column 4 to column 15)",
  " (in 'string', line 189, column 70 to line 219, column 3)",
  " (in 'string', line 224, column 4 to column 28)",
  " (in 'string', line 225, column 11 to column 12)",
  " (in 'string', line 225, column 4 to column 18)",
  " (in 'string', line 245, column 26 to line 247, column 5)",
  " (in 'string', line 245, column 11 to line 247, column 5)",
  " (in 'string', line 243, column 13 to column 14)",
  " (in 'string', line 243, column 6 to column 33)",
  " (in 'string', line 244, column 21 to column 103)",
  " (in 'string', line 244, column 6 to column 103)",
  " (in 'string', line 242, column 26 to line 245, column 5)",
  " (in 'string', line 242, column 11 to line 247, column 5)",
  " (in 'string', line 241, column 6 to column 88)",
  " (in 'string', line 240, column 26 to line 242, column 5)",
  " (in 'string', line 240, column 11 to line 247, column 5)",
  " (in 'string', line 239, column 21 to column 109)",
  " (in 'string', line 239, column 6 to column 109)",
  " (in 'string', line 236, column 26 to line 240, column 5)",
  " (in 'string', line 236, column 11 to line 247, column 5)",
  " (in 'string', line 235, column 6 to column 60)",
  " (in 'string', line 234, column 26 to line 236, column 5)",
  " (in 'string', line 234, column 11 to line 247, column 5)",
  " (in 'string', line 233, column 6 to column 17)",
  " (in 'string', line 232, column 26 to line 234, column 5)",
  " (in 'string', line 232, column 11 to line 247, column 5)",
  " (in 'string', line 231, column 6 to column 29)",
  " (in 'string', line 230, column 26 to line 232, column 5)",
  " (in 'string', line 230, column 11 to line 247, column 5)",
  " (in 'string', line 229, column 6 to column 51)",
  " (in 'string', line 228, column 26 to line 230, column 5)",
  " (in 'string', line 228, column 11 to line 247, column 5)",
  " (in 'string', line 227, column 6 to column 16)",
  " (in 'string', line 226, column 19 to line 228, column 5)",
  " (in 'string', line 226, column 4 to line 247, column 5)",
  " (in 'string', line 248, column 4 to column 15)",
  " (in 'string', line 221, column 69 to line 249, column 3)",
  " (in 'string', line 254, column 4 to column 28)",
  " (in 'string', line 255, column 11 to column 12)",
  " (in 'string', line 255, column 4 to column 18)",
  " (in 'string', line 275, column 26 to line 277, column 5)",
  " (in 'string', line 275, column 11 to line 277, column 5)",
  " (in 'string', line 273, column 13 to column 14)",
  " (in 'string', line 273, column 6 to column 33)",
  " (in 'string', line 274, column 21 to column 97)",
  " (in 'string', line 274, column 6 to column 97)",
  " (in 'string', line 272, column 26 to line 275, column 5)",
  " (in 'string', line 272, column 11 to line 277, column 5)",
  " (in 'string', line 271, column 6 to column 87)",
  " (in 'string', line 270, column 26 to line 272, column 5)",
  " (in 'string', line 270, column 11 to line 277, column 5)",
  " (in 'string', line 269, column 21 to column 103)",
  " (in 'string', line 269, column 6 to column 103)",
  " (in 'string', line 266, column 26 to line 270, column 5)",
  " (in 'string', line 266, column 11 to line 277, column 5)",
  " (in 'string', line 265, column 6 to column 59)",
  " (in 'string', line 264, column 26 to line 266, column 5)",
  " (in 'string', line 264, column 11 to line 277, column 5)",
  " (in 'string', line 263, column 6 to column 17)",
  " (in 'string', line 262, column 26 to line 264, column 5)",
  " (in 'string', line 262, column 11 to line 277, column 5)",
  " (in 'string', line 261, column 6 to column 28)",
  " (in 'string', line 260, column 26 to line 262, column 5)",
  " (in 'string', line 260, column 11 to line 277, column 5)",
  " (in 'string', line 259, column 6 to column 51)",
  " (in 'string', line 258, column 26 to line 260, column 5)",
  " (in 'string', line 258, column 11 to line 277, column 5)",
  " (in 'string', line 257, column 6 to column 16)",
  " (in 'string', line 256, column 19 to line 258, column 5)",
  " (in 'string', line 256, column 4 to line 277, column 5)",
  " (in 'string', line 278, column 4 to column 15)",
  " (in 'string', line 251, column 66 to line 279, column 3)",
  " (in 'string', line 284, column 4 to column 30)",
  " (in 'string', line 285, column 11 to column 12)",
  " (in 'string', line 285, column 4 to column 18)",
  " (in 'string', line 305, column 26 to line 307, column 5)",
  " (in 'string', line 305, column 11 to line 307, column 5)",
  " (in 'string', line 303, column 13 to column 14)",
  " (in 'string', line 303, column 6 to column 33)",
  " (in 'string', line 304, column 21 to column 91)",
  " (in 'string', line 304, column 6 to column 91)",
  " (in 'string', line 302, column 26 to line 305, column 5)",
  " (in 'string', line 302, column 11 to line 307, column 5)",
  " (in 'string', line 301, column 6 to column 87)",
  " (in 'string', line 300, column 26 to line 302, column 5)",
  " (in 'string', line 300, column 11 to line 307, column 5)",
  " (in 'string', line 299, column 21 to column 96)",
  " (in 'string', line 299, column 6 to column 96)",
  " (in 'string', line 296, column 26 to line 300, column 5)",
  " (in 'string', line 296, column 11 to line 307, column 5)",
  " (in 'string', line 295, column 6 to column 59)",
  " (in 'string', line 294, column 26 to line 296, column 5)",
  " (in 'string', line 294, column 11 to line 307, column 5)",
  " (in 'string', line 293, column 6 to column 17)",
  " (in 'string', line 292, column 26 to line 294, column 5)",
  " (in 'string', line 292, column 11 to line 307, column 5)",
  " (in 'string', line 291, column 6 to column 28)",
  " (in 'string', line 290, column 26 to line 292, column 5)",
  " (in 'string', line 290, column 11 to line 307, column 5)",
  " (in 'string', line 289, column 6 to column 51)",
  " (in 'string', line 288, column 26 to line 290, column 5)",
  " (in 'string', line 288, column 11 to line 307, column 5)",
  " (in 'string', line 287, column 6 to column 16)",
  " (in 'string', line 286, column 19 to line 288, column 5)",
  " (in 'string', line 286, column 4 to line 307, column 5)",
  " (in 'string', line 308, column 4 to column 15)",
  " (in 'string', line 281, column 65 to line 309, column 3)",
  " (in 'string', line 314, column 4 to column 30)",
  " (in 'string', line 315, column 11 to column 12)",
  " (in 'string', line 315, column 4 to column 18)",
  " (in 'string', line 335, column 26 to line 337, column 5)",
  " (in 'string', line 335, column 11 to line 337, column 5)",
  " (in 'string', line 333, column 13 to column 14)",
  " (in 'string', line 333, column 6 to column 33)",
  " (in 'string', line 334, column 21 to column 97)",
  " (in 'string', line 334, column 6 to column 97)",
  " (in 'string', line 332, column 26 to line 335, column 5)",
  " (in 'string', line 332, column 11 to line 337, column 5)",
  " (in 'string', line 331, column 6 to column 88)",
  " (in 'string', line 330, column 26 to line 332, column 5)",
  " (in 'string', line 330, column 11 to line 337, column 5)",
  " (in 'string', line 329, column 21 to column 102)",
  " (in 'string', line 329, column 6 to column 102)",
  " (in 'string', line 326, column 26 to line 330, column 5)",
  " (in 'string', line 326, column 11 to line 337, column 5)",
  " (in 'string', line 325, column 6 to column 60)",
  " (in 'string', line 324, column 26 to line 326, column 5)",
  " (in 'string', line 324, column 11 to line 337, column 5)",
  " (in 'string', line 323, column 6 to column 17)",
  " (in 'string', line 322, column 26 to line 324, column 5)",
  " (in 'string', line 322, column 11 to line 337, column 5)",
  " (in 'string', line 321, column 6 to column 28)",
  " (in 'string', line 320, column 26 to line 322, column 5)",
  " (in 'string', line 320, column 11 to line 337, column 5)",
  " (in 'string', line 319, column 6 to column 51)",
  " (in 'string', line 318, column 26 to line 320, column 5)",
  " (in 'string', line 318, column 11 to line 337, column 5)",
  " (in 'string', line 317, column 6 to column 16)",
  " (in 'string', line 316, column 19 to line 318, column 5)",
  " (in 'string', line 316, column 4 to line 337, column 5)",
  " (in 'string', line 338, column 4 to column 15)",
  " (in 'string', line 311, column 70 to line 339, column 3)",
  " (in 'string', line 342, column 4 to column 30)",
  " (in 'string', line 343, column 11 to column 12)",
  " (in 'string', line 343, column 4 to column 16)",
  " (in 'string', line 345, column 4 to column 44)",
  " (in 'string', line 346, column 4 to column 70)",
  " (in 'string', line 347, column 10 to column 13)",
  " (in 'string', line 347, column 4 to column 22)",
  " (in 'string', line 348, column 10 to column 15)",
  " (in 'string', line 348, column 4 to column 24)",
  " (in 'string', line 349, column 10 to column 15)",
  " (in 'string', line 349, column 4 to column 24)",
  " (in 'string', line 350, column 10 to column 15)",
  " (in 'string', line 350, column 4 to column 24)",
  " (in 'string', line 351, column 4 to column 49)",
  " (in 'string', line 352, column 10 to column 12)",
  " (in 'string', line 352, column 4 to column 21)",
  " (in 'string', line 353, column 13 to column 35)",
  " (in 'string', line 353, column 4 to column 35)",
  " (in 'string', line 354, column 15 to column 37)",
  " (in 'string', line 354, column 4 to column 37)",
  " (in 'string', line 355, column 15 to column 37)",
  " (in 'string', line 355, column 4 to column 37)",
  " (in 'string', line 356, column 15 to column 37)",
  " (in 'string', line 356, column 4 to column 37)",
  " (in 'string', line 357, column 12 to column 39)",
  " (in 'string', line 357, column 4 to column 39)",
  " (in 'string', line 368, column 6 to column 41)",
  " (in 'string', line 370, column 6 to column 62)",
  " (in 'string', line 366, column 11 to line 371, column 5)",
  " (in 'string', line 361, column 6 to column 61)",
  " (in 'string', line 363, column 56 to column 104)",
  " (in 'string', line 363, column 36 to column 104)",
  " (in 'string', line 363, column 21 to column 104)",
  " (in 'string', line 363, column 6 to column 104)",
  " (in 'string', line 364, column 56 to column 106)",
  " (in 'string', line 364, column 36 to column 106)",
  " (in 'string', line 364, column 21 to column 106)",
  " (in 'string', line 364, column 6 to column 106)",
  " (in 'string', line 365, column 56 to column 112)",
  " (in 'string', line 365, column 36 to column 112)",
  " (in 'string', line 365, column 21 to column 112)",
  " (in 'string', line 365, column 6 to column 112)",
  " (in 'string', line 359, column 45 to line 366, column 5)",
  " (in 'string', line 359, column 4 to line 371, column 5)",
  " (in 'string', line 373, column 4 to column 29)",
  " (in 'string', line 377, column 4 to column 86)",
  " (in 'string', line 379, column 4 to column 66)",
  " (in 'string', line 380, column 4 to column 13)",
  " (in 'string', line 341, column 134 to line 381, column 3)",
  " (in 'string', line 384, column 4 to column 30)",
  " (in 'string', line 385, column 11 to column 12)",
  " (in 'string', line 385, column 4 to column 16)",
  " (in 'string', line 387, column 4 to column 44)",
  " (in 'string', line 388, column 4 to column 70)",
  " (in 'string', line 389, column 10 to column 13)",
  " (in 'string', line 389, column 4 to column 22)",
  " (in 'string', line 390, column 10 to column 15)",
  " (in 'string', line 390, column 4 to column 24)",
  " (in 'string', line 391, column 10 to column 15)",
  " (in 'string', line 391, column 4 to column 24)",
  " (in 'string', line 392, column 10 to column 15)",
  " (in 'string', line 392, column 4 to column 24)",
  " (in 'string', line 393, column 4 to column 49)",
  " (in 'string', line 394, column 10 to column 12)",
  " (in 'string', line 394, column 4 to column 21)",
  " (in 'string', line 395, column 13 to column 35)",
  " (in 'string', line 395, column 4 to column 35)",
  " (in 'string', line 396, column 15 to column 37)",
  " (in 'string', line 396, column 4 to column 37)",
  " (in 'string', line 397, column 15 to column 37)",
  " (in 'string', line 397, column 4 to column 37)",
  " (in 'string', line 398, column 15 to column 37)",
  " (in 'string', line 398, column 4 to column 37)",
  " (in 'string', line 399, column 12 to column 39)",
  " (in 'string', line 399, column 4 to column 39)",
  " (in 'string', line 410, column 6 to column 42)",
  " (in 'string', line 412, column 6 to column 55)",
  " (in 'string', line 408, column 11 to line 413, column 5)",
  " (in 'string', line 403, column 6 to column 54)",
  " (in 'string', line 405, column 56 to column 101)",
  " (in 'string', line 405, column 36 to column 101)",
  " (in 'string', line 405, column 21 to column 101)",
  " (in 'string', line 405, column 6 to column 101)",
  " (in 'string', line 406, column 56 to column 103)",
  " (in 'string', line 406, column 36 to column 103)",
  " (in 'string', line 406, column 21 to column 103)",
  " (in 'string', line 406, column 6 to column 103)",
  " (in 'string', line 407, column 56 to column 106)",
  " (in 'string', line 407, column 36 to column 106)",
  " (in 'string', line 407, column 21 to column 106)",
  " (in 'string', line 407, column 6 to column 106)",
  " (in 'string', line 401, column 45 to line 408, column 5)",
  " (in 'string', line 401, column 4 to line 413, column 5)",
  " (in 'string', line 415, column 4 to column 29)",
  " (in 'string', line 419, column 4 to column 79)",
  " (in 'string', line 421, column 4 to column 59)",
  " (in 'string', line 422, column 4 to column 13)",
  " (in 'string', line 383, column 131 to line 423, column 3)",
  " (in 'string', line 426, column 4 to column 30)",
  " (in 'string', line 427, column 11 to column 12)",
  " (in 'string', line 427, column 4 to column 16)",
  " (in 'string', line 445, column 6 to column 97)",
  " (in 'string', line 444, column 28 to line 447, column 5)",
  " (in 'string', line 444, column 11 to line 447, column 5)",
  " (in 'string', line 443, column 6 to column 54)",
  " (in 'string', line 442, column 28 to line 444, column 5)",
  " (in 'string', line 442, column 11 to line 447, column 5)",
  " (in 'string', line 440, column 8 to column 80)",
  " (in 'string', line 439, column 13 to line 441, column 7)",
  " (in 'string', line 438, column 23 to column 70)",
  " (in 'string', line 438, column 8 to column 70)",
  " (in 'string', line 437, column 28 to line 439, column 7)",
  " (in 'string', line 437, column 13 to line 441, column 7)",
  " (in 'string', line 435, column 15 to column 16)",
  " (in 'string', line 435, column 8 to column 35)",
  " (in 'string', line 436, column 23 to column 62)",
  " (in 'string', line 436, column 8 to column 62)",
  " (in 'string', line 434, column 28 to line 437, column 7)",
  " (in 'string', line 434, column 13 to line 441, column 7)",
  " (in 'string', line 433, column 23 to column 65)",
  " (in 'string', line 433, column 8 to column 65)",
  " (in 'string', line 432, column 21 to line 434, column 7)",
  " (in 'string', line 432, column 6 to line 441, column 7)",
  " (in 'string', line 430, column 28 to line 442, column 5)",
  " (in 'string', line 430, column 11 to line 447, column 5)",
  " (in 'string', line 429, column 6 to column 43)",
  " (in 'string', line 428, column 21 to line 430, column 5)",
  " (in 'string', line 428, column 4 to line 447, column 5)",
  " (in 'string', line 450, column 6 to column 50)",
  " (in 'string', line 449, column 24 to line 451, column 5)",
  " (in 'string', line 449, column 4 to line 451, column 5)",
  " (in 'string', line 452, column 4 to column 13)",
  " (in 'string', line 425, column 118 to line 453, column 3)",
  " (in 'string', line 456, column 4 to column 30)",
  " (in 'string', line 457, column 11 to column 12)",
  " (in 'string', line 457, column 4 to column 16)",
  " (in 'string', line 475, column 6 to column 99)",
  " (in 'string', line 474, column 28 to line 477, column 5)",
  " (in 'string', line 474, column 11 to line 477, column 5)",
  " (in 'string', line 473, column 6 to column 55)",
  " (in 'string', line 472, column 28 to line 474, column 5)",
  " (in 'string', line 472, column 11 to line 477, column 5)",
  " (in 'string', line 470, column 8 to column 82)",
  " (in 'string', line 469, column 13 to line 471, column 7)",
  " (in 'string', line 468, column 23 to column 76)",
  " (in 'string', line 468, column 8 to column 76)",
  " (in 'string', line 467, column 28 to line 469, column 7)",
  " (in 'string', line 467, column 13 to line 471, column 7)",
  " (in 'string', line 465, column 15 to column 16)",
  " (in 'string', line 465, column 8 to column 35)",
  " (in 'string', line 466, column 23 to column 65)",
  " (in 'string', line 466, column 8 to column 65)",
  " (in 'string', line 464, column 28 to line 467, column 7)",
  " (in 'string', line 464, column 13 to line 471, column 7)",
  " (in 'string', line 463, column 23 to column 68)",
  " (in 'string', line 463, column 8 to column 68)",
  " (in 'string', line 462, column 21 to line 464, column 7)",
  " (in 'string', line 462, column 6 to line 471, column 7)",
  " (in 'string', line 460, column 28 to line 472, column 5)",
  " (in 'string', line 460, column 11 to line 477, column 5)",
  " (in 'string', line 459, column 6 to column 44)",
  " (in 'string', line 458, column 21 to line 460, column 5)",
  " (in 'string', line 458, column 4 to line 477, column 5)",
  " (in 'string', line 480, column 6 to column 51)",
  " (in 'string', line 479, column 24 to line 481, column 5)",
  " (in 'string', line 479, column 4 to line 481, column 5)",
  " (in 'string', line 482, column 4 to column 13)",
  " (in 'string', line 455, column 123 to line 483, column 3)"};
template <bool propto__, typename T0__, typename T2__, typename T3__,
          typename T4__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
void
prior_select_lp(const T0__& y_arg__, const int& dist, const T2__& location,
                const T3__& scale, const T4__& df, T_lp__& lp__,
                T_lp_accum__& lp_accum__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
int count_nonzero(const T0__& m_arg__, std::ostream* pstream__);
std::vector<int>
which(const std::vector<int>& x, const int& y, std::ostream* pstream__);
int nwhich(const std::vector<int>& x, const int& y, std::ostream* pstream__);
std::vector<int>
nwhich_all(const std::vector<int>& x, const int& max_id, std::ostream*
           pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
std::vector<int> which_gt0(const T0__& x_arg__, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__>
gengamma_lpdf(const T0__& y, const T1__& mu, const T2__& sigma, const T3__&
              k, std::ostream* pstream__);
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>>,-1,1>
lS(const int& dist, const T1__& y_arg__, const T2__& eta_arg__, const T3__&
   aux_arg__, const T4__& aux2_arg__, std::ostream* pstream__);
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, T3__, T4__>,-1,1>
lS2(const int& dist, const T1__& y_arg__, const T2__& eta_arg__, const T3__&
    aux, const T4__& aux2, std::ostream* pstream__);
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T2__>, T3__, T4__>,-1,1>
lS_a(const int& dist, const T1__& y, const T2__& eta_arg__, const T3__& aux,
     const T4__& aux2, std::ostream* pstream__);
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>>,-1,1>
lS_a2(const int& dist, const T1__& y, const T2__& eta_arg__, const T3__&
      aux_arg__, const T4__& aux2_arg__, std::ostream* pstream__);
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>>,-1,1>
lh(const int& dist, const T1__& y_arg__, const T2__& eta_arg__, const T3__&
   aux_arg__, const T4__& aux2_arg__, std::ostream* pstream__);
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, T3__, T4__>,-1,1>
lh2(const int& dist, const T1__& y_arg__, const T2__& eta_arg__, const T3__&
    aux, const T4__& aux2, std::ostream* pstream__);
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T2__>, T3__, T4__>,-1,1>
lh_a(const int& dist, const T1__& y, const T2__& eta_arg__, const T3__& aux,
     const T4__& aux2, std::ostream* pstream__);
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>>,-1,1>
lh_a2(const int& dist, const T1__& y, const T2__& eta_arg__, const T3__&
      aux_arg__, const T4__& aux2_arg__, std::ostream* pstream__);
template <typename T1__, typename T2__, typename T3__, typename T5__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, stan::base_type_t<T3__>,
                stan::base_type_t<T5__>, stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>>>,-1,1>
loglik(const int& dist, const T1__& time_arg__, const T2__& start_time_arg__,
       const T3__& delay_time_arg__, const std::vector<int>& status,
       const T5__& eta_arg__, const T6__& aux_arg__, const T7__& aux2_arg__,
       std::ostream* pstream__);
template <typename T1__, typename T2__, typename T3__, typename T5__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, stan::base_type_t<T3__>,
                stan::base_type_t<T5__>, T6__, stan::promote_args_t<T7__>>,-1,1>
loglik2(const int& dist, const T1__& time_arg__, const T2__&
        start_time_arg__, const T3__& delay_time_arg__,
        const std::vector<int>& status, const T5__& eta_arg__, const T6__&
        aux, const T7__& aux2, std::ostream* pstream__);
template <typename T1__, typename T2__, typename T3__, typename T5__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__, T2__, T3__, stan::base_type_t<T5__>,
                T6__, stan::promote_args_t<T7__>>,-1,1>
loglik_a(const int& dist, const T1__& time, const T2__& start_time,
         const T3__& delay_time, const int& status, const T5__& eta_arg__,
         const T6__& aux, const T7__& aux2, std::ostream* pstream__);
template <typename T1__, typename T2__, typename T3__, typename T5__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__, T2__, T3__, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>>>,-1,1>
loglik_a2(const int& dist, const T1__& time, const T2__& start_time,
          const T3__& delay_time, const int& status, const T5__& eta_arg__,
          const T6__& aux_arg__, const T7__& aux2_arg__, std::ostream*
          pstream__);
template <bool propto__, typename T0__, typename T2__, typename T3__,
          typename T4__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
void
prior_select_lp(const T0__& y_arg__, const int& dist, const T2__& location,
                const T3__& scale, const T4__& df, T_lp__& lp__,
                T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T2__, T3__, T4__>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 582;
    if (stan::math::logical_eq(dist, 0)) {} else {
                                            current_statement__ = 580;
                                            if (stan::math::logical_eq(dist,
                                                  1)) {
                                              current_statement__ = 578;
                                              lp_accum__.add(stan::math::normal_lpdf<
                                                               propto__>(y,
                                                               location,
                                                               scale));
                                            } else {
                                              current_statement__ = 577;
                                              if (stan::math::logical_eq(
                                                    dist, 2)) {
                                                current_statement__ = 575;
                                                lp_accum__.add(stan::math::cauchy_lpdf<
                                                                 propto__>(y,
                                                                 location,
                                                                 scale));
                                              } else {
                                                current_statement__ = 574;
                                                if (stan::math::logical_eq(
                                                      dist, 3)) {
                                                  current_statement__ = 572;
                                                  lp_accum__.add(stan::math::student_t_lpdf<
                                                                   propto__>(
                                                                   y, df,
                                                                   location,
                                                                   scale));
                                                } else {
                                                  current_statement__ = 571;
                                                  if (stan::math::logical_eq(
                                                        dist, 4)) {
                                                    current_statement__ = 569;
                                                    lp_accum__.add(stan::math::exponential_lpdf<
                                                                    propto__>(
                                                                    y, (1 /
                                                                    scale)));
                                                  } else {
                                                    current_statement__ = 568;
                                                    if (stan::math::logical_eq(
                                                          dist, 5)) {
                                                      current_statement__ = 566;
                                                      lp_accum__.add(
                                                        stan::math::lognormal_lpdf<
                                                          propto__>(y,
                                                          location, scale));
                                                    } else {
                                                      current_statement__ = 565;
                                                      if (stan::math::logical_eq(
                                                            dist, 6)) {
                                                        current_statement__ = 562;
                                                        lp_accum__.add(
                                                          stan::math::student_t_lpdf<
                                                            propto__>(
                                                            stan::math::log(y),
                                                            df, location,
                                                            scale));
                                                        current_statement__ = 563;
                                                        lp_accum__.add(
                                                          stan::math::minus(
                                                            stan::math::log(y)));
                                                      } else {
                                                        current_statement__ = 560;
                                                        std::stringstream
                                                          errmsg_stream__;
                                                        stan::math::stan_print(
                                                          &errmsg_stream__,
                                                          "Not a supported prior dist.");
                                                        throw std::domain_error(
                                                                errmsg_stream__.str());
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
    }
    current_statement__ = 583;
    return ;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
int count_nonzero(const T0__& m_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& m = stan::math::to_ref(m_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int I = std::numeric_limits<int>::min();
    current_statement__ = 585;
    I = stan::math::rows(m);
    int J = std::numeric_limits<int>::min();
    current_statement__ = 586;
    J = stan::math::cols(m);
    int c = std::numeric_limits<int>::min();
    current_statement__ = 587;
    c = 0;
    current_statement__ = 593;
    for (int j = 1; j <= I; ++j) {
      current_statement__ = 591;
      for (int i = 1; i <= J; ++i) {
        current_statement__ = 589;
        if (stan::math::logical_neq(
              stan::model::rvalue(m, "m", stan::model::index_uni(i),
                stan::model::index_uni(j)), 0)) {
          current_statement__ = 588;
          c = (c + 1);
        }
      }
    }
    current_statement__ = 594;
    return c;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<int>
which(const std::vector<int>& x, const int& y, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 596;
    n = stan::math::num_elements(x);
    current_statement__ = 597;
    stan::math::validate_non_negative_index("w", "n", n);
    std::vector<int> w = std::vector<int>(n, std::numeric_limits<int>::min());
    int c = std::numeric_limits<int>::min();
    current_statement__ = 599;
    c = 1;
    current_statement__ = 605;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 603;
      if (stan::math::logical_eq(
            stan::model::rvalue(x, "x", stan::model::index_uni(i)), y)) {
        current_statement__ = 600;
        stan::model::assign(w, i, "assigning variable w",
          stan::model::index_uni(c));
        current_statement__ = 601;
        c = (c + 1);
      }
    }
    current_statement__ = 606;
    return stan::model::rvalue(w, "w", stan::model::index_min_max(1, (c - 1)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int nwhich(const std::vector<int>& x, const int& y, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int w = std::numeric_limits<int>::min();
    current_statement__ = 608;
    w = 0;
    current_statement__ = 612;
    for (int i = 1; i <= stan::math::num_elements(x); ++i) {
      current_statement__ = 610;
      if (stan::math::logical_eq(
            stan::model::rvalue(x, "x", stan::model::index_uni(i)), y)) {
        current_statement__ = 609;
        w = (w + 1);
      }
    }
    current_statement__ = 613;
    return w;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<int>
nwhich_all(const std::vector<int>& x, const int& max_id, std::ostream*
           pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 615;
    stan::math::validate_non_negative_index("w", "max_id", max_id);
    std::vector<int> w =
      std::vector<int>(max_id, std::numeric_limits<int>::min());
    current_statement__ = 616;
    stan::model::assign(w, stan::math::rep_array(0, max_id),
      "assigning variable w");
    current_statement__ = 620;
    for (int i = 1; i <= stan::math::num_elements(x); ++i) {
      current_statement__ = 618;
      if (stan::model::rvalue(x, "x", stan::model::index_uni(i))) {
        current_statement__ = 617;
        stan::model::assign(w,
          (stan::model::rvalue(w, "w",
             stan::model::index_uni(
               stan::model::rvalue(x, "x", stan::model::index_uni(i)))) + 1),
          "assigning variable w",
          stan::model::index_uni(
            stan::model::rvalue(x, "x", stan::model::index_uni(i))));
      }
    }
    current_statement__ = 621;
    return w;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
std::vector<int> which_gt0(const T0__& x_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& x = stan::math::to_ref(x_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 623;
    n = stan::math::num_elements(x);
    current_statement__ = 624;
    stan::math::validate_non_negative_index("w", "n", n);
    std::vector<int> w = std::vector<int>(n, std::numeric_limits<int>::min());
    int c = std::numeric_limits<int>::min();
    current_statement__ = 626;
    c = 1;
    current_statement__ = 632;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 630;
      if (stan::math::logical_gt(
            stan::model::rvalue(x, "x", stan::model::index_uni(i)), 0)) {
        current_statement__ = 627;
        stan::model::assign(w, i, "assigning variable w",
          stan::model::index_uni(c));
        current_statement__ = 628;
        c = (c + 1);
      }
    }
    current_statement__ = 633;
    return stan::model::rvalue(w, "w", stan::model::index_min_max(1, (c - 1)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
gengamma_lpdf(const T0__& y, const T1__& mu, const T2__& sigma, const T3__&
              k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ Q = DUMMY_VAR__;
    current_statement__ = 635;
    Q = stan::math::pow(k, -0.5);
    local_scalar_t__ w = DUMMY_VAR__;
    current_statement__ = 636;
    w = ((Q * (stan::math::log(y) - mu)) / sigma);
    current_statement__ = 637;
    return ((((-stan::math::log(sigma) - stan::math::log(y)) - ((0.5 *
           stan::math::log(k)) * (1 - (2 * k)))) + (k * (w -
           stan::math::exp(w)))) - stan::math::lgamma(k));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>>,-1,1>
lS(const int& dist, const T1__& y_arg__, const T2__& eta_arg__, const T3__&
   aux_arg__, const T4__& aux2_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& aux = stan::math::to_ref(aux_arg__);
  const auto& aux2 = stan::math::to_ref(aux2_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 639;
    n = stan::math::num_elements(y);
    current_statement__ = 640;
    stan::math::validate_non_negative_index("out", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> out =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 676;
    if (stan::math::logical_eq(dist, 1)) {
      current_statement__ = 674;
      stan::model::assign(out,
        stan::math::elt_multiply(stan::math::minus(y), stan::math::exp(eta)),
        "assigning variable out");
    } else {
      current_statement__ = 673;
      if (stan::math::logical_eq(dist, 2)) {
        current_statement__ = 671;
        stan::model::assign(out,
          stan::math::elt_multiply(
            stan::math::minus(stan::math::pow(y, aux)), stan::math::exp(eta)),
          "assigning variable out");
      } else {
        current_statement__ = 670;
        if (stan::math::logical_eq(dist, 3)) {
          current_statement__ = 668;
          stan::model::assign(out,
            stan::math::elt_multiply(
              stan::math::elt_divide(stan::math::minus(stan::math::exp(eta)),
                aux), stan::math::expm1(stan::math::elt_multiply(aux, y))),
            "assigning variable out");
        } else {
          current_statement__ = 667;
          if (stan::math::logical_eq(dist, 4)) {
            current_statement__ = 665;
            stan::model::assign(out,
              stan::math::elt_multiply(stan::math::minus(y),
                stan::math::exp(stan::math::minus(eta))),
              "assigning variable out");
          } else {
            current_statement__ = 664;
            if (stan::math::logical_eq(dist, 5)) {
              current_statement__ = 662;
              stan::model::assign(out,
                stan::math::elt_multiply(
                  stan::math::minus(stan::math::pow(y, aux)),
                  stan::math::exp(
                    stan::math::elt_multiply(stan::math::minus(aux), eta))),
                "assigning variable out");
            } else {
              current_statement__ = 661;
              if (stan::math::logical_eq(dist, 6)) {
                current_statement__ = 659;
                for (int i = 1; i <= n; ++i) {
                  current_statement__ = 658;
                  stan::model::assign(out,
                    stan::math::lognormal_lccdf(
                      stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                      stan::model::rvalue(eta, "eta",
                        stan::model::index_uni(i)),
                      stan::model::rvalue(aux, "aux",
                        stan::model::index_uni(i))),
                    "assigning variable out", stan::model::index_uni(i));
                }
              } else {
                current_statement__ = 657;
                if (stan::math::logical_eq(dist, 7)) {
                  current_statement__ = 655;
                  stan::model::assign(out,
                    stan::math::minus(
                      stan::math::log1p(
                        stan::math::pow(
                          stan::math::elt_divide(y, stan::math::exp(eta)),
                          aux))), "assigning variable out");
                } else {
                  current_statement__ = 654;
                  if (stan::math::logical_eq(dist, 8)) {
                    current_statement__ = 649;
                    stan::math::validate_non_negative_index("eeta", "n", n);
                    Eigen::Matrix<local_scalar_t__,-1,1> eeta =
                      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n,
                        DUMMY_VAR__);
                    current_statement__ = 650;
                    stan::model::assign(eeta,
                      stan::math::exp(stan::math::minus(eta)),
                      "assigning variable eeta");
                    current_statement__ = 652;
                    for (int i = 1; i <= n; ++i) {
                      current_statement__ = 651;
                      stan::model::assign(out,
                        stan::math::gamma_lccdf(
                          stan::model::rvalue(y, "y",
                            stan::model::index_uni(i)),
                          stan::model::rvalue(aux, "aux",
                            stan::model::index_uni(i)),
                          stan::model::rvalue(eeta, "eeta",
                            stan::model::index_uni(i))),
                        "assigning variable out", stan::model::index_uni(i));
                    }
                  } else {
                    current_statement__ = 648;
                    if (stan::math::logical_eq(dist, 9)) {
                      current_statement__ = 642;
                      stan::math::validate_non_negative_index("Q", "n", n);
                      Eigen::Matrix<local_scalar_t__,-1,1> Q =
                        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n,
                          DUMMY_VAR__);
                      current_statement__ = 643;
                      stan::model::assign(Q,
                        stan::math::inv(stan::math::sqrt(aux2)),
                        "assigning variable Q");
                      current_statement__ = 644;
                      stan::math::validate_non_negative_index("w", "n", n);
                      Eigen::Matrix<local_scalar_t__,-1,1> w =
                        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n,
                          DUMMY_VAR__);
                      current_statement__ = 645;
                      stan::model::assign(w,
                        stan::math::elt_multiply(
                          stan::math::exp(
                            stan::math::elt_divide(
                              stan::math::elt_multiply(Q,
                                stan::math::subtract(stan::math::log(y), eta)),
                              aux)), aux2), "assigning variable w");
                      current_statement__ = 646;
                      stan::model::assign(out,
                        stan::math::log1m(stan::math::gamma_p(aux2, w)),
                        "assigning variable out");
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    current_statement__ = 677;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, T3__, T4__>,-1,1>
lS2(const int& dist, const T1__& y_arg__, const T2__& eta_arg__, const T3__&
    aux, const T4__& aux2, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>, T3__, T4__>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 679;
    n = stan::math::num_elements(y);
    current_statement__ = 680;
    stan::math::validate_non_negative_index("out", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> out =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 715;
    if (stan::math::logical_eq(dist, 1)) {
      current_statement__ = 713;
      stan::model::assign(out,
        stan::math::elt_multiply(stan::math::minus(y), stan::math::exp(eta)),
        "assigning variable out");
    } else {
      current_statement__ = 712;
      if (stan::math::logical_eq(dist, 2)) {
        current_statement__ = 710;
        stan::model::assign(out,
          stan::math::elt_multiply(
            stan::math::minus(stan::math::pow(y, aux)), stan::math::exp(eta)),
          "assigning variable out");
      } else {
        current_statement__ = 709;
        if (stan::math::logical_eq(dist, 3)) {
          current_statement__ = 707;
          stan::model::assign(out,
            stan::math::elt_multiply(
              stan::math::divide(stan::math::minus(stan::math::exp(eta)), aux),
              stan::math::expm1(stan::math::multiply(aux, y))),
            "assigning variable out");
        } else {
          current_statement__ = 706;
          if (stan::math::logical_eq(dist, 4)) {
            current_statement__ = 704;
            stan::model::assign(out,
              stan::math::elt_multiply(stan::math::minus(y),
                stan::math::exp(stan::math::minus(eta))),
              "assigning variable out");
          } else {
            current_statement__ = 703;
            if (stan::math::logical_eq(dist, 5)) {
              current_statement__ = 701;
              stan::model::assign(out,
                stan::math::elt_multiply(
                  stan::math::minus(stan::math::pow(y, aux)),
                  stan::math::exp(stan::math::multiply(-aux, eta))),
                "assigning variable out");
            } else {
              current_statement__ = 700;
              if (stan::math::logical_eq(dist, 6)) {
                current_statement__ = 698;
                for (int i = 1; i <= n; ++i) {
                  current_statement__ = 697;
                  stan::model::assign(out,
                    stan::math::lognormal_lccdf(
                      stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                      stan::model::rvalue(eta, "eta",
                        stan::model::index_uni(i)), aux),
                    "assigning variable out", stan::model::index_uni(i));
                }
              } else {
                current_statement__ = 696;
                if (stan::math::logical_eq(dist, 7)) {
                  current_statement__ = 694;
                  stan::model::assign(out,
                    stan::math::minus(
                      stan::math::log1p(
                        stan::math::pow(
                          stan::math::elt_divide(y, stan::math::exp(eta)),
                          aux))), "assigning variable out");
                } else {
                  current_statement__ = 693;
                  if (stan::math::logical_eq(dist, 8)) {
                    current_statement__ = 688;
                    stan::math::validate_non_negative_index("eeta", "n", n);
                    Eigen::Matrix<local_scalar_t__,-1,1> eeta =
                      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n,
                        DUMMY_VAR__);
                    current_statement__ = 689;
                    stan::model::assign(eeta,
                      stan::math::exp(stan::math::minus(eta)),
                      "assigning variable eeta");
                    current_statement__ = 691;
                    for (int i = 1; i <= n; ++i) {
                      current_statement__ = 690;
                      stan::model::assign(out,
                        stan::math::gamma_lccdf(
                          stan::model::rvalue(y, "y",
                            stan::model::index_uni(i)), aux,
                          stan::model::rvalue(eeta, "eeta",
                            stan::model::index_uni(i))),
                        "assigning variable out", stan::model::index_uni(i));
                    }
                  } else {
                    current_statement__ = 687;
                    if (stan::math::logical_eq(dist, 9)) {
                      local_scalar_t__ Q = DUMMY_VAR__;
                      current_statement__ = 682;
                      Q = stan::math::inv(stan::math::sqrt(aux2));
                      current_statement__ = 683;
                      stan::math::validate_non_negative_index("w", "n", n);
                      Eigen::Matrix<local_scalar_t__,-1,1> w =
                        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n,
                          DUMMY_VAR__);
                      current_statement__ = 684;
                      stan::model::assign(w,
                        stan::math::multiply(
                          stan::math::exp(
                            stan::math::divide(
                              stan::math::multiply(Q,
                                stan::math::subtract(stan::math::log(y), eta)),
                              aux)), aux2), "assigning variable w");
                      current_statement__ = 685;
                      stan::model::assign(out,
                        stan::math::log1m(stan::math::gamma_p(aux2, w)),
                        "assigning variable out");
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    current_statement__ = 716;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T2__>, T3__, T4__>,-1,1>
lS_a(const int& dist, const T1__& y, const T2__& eta_arg__, const T3__& aux,
     const T4__& aux2, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
                             stan::base_type_t<T2__>, T3__, T4__>;
  int current_statement__ = 0;
  const auto& eta = stan::math::to_ref(eta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 718;
    n = stan::math::num_elements(eta);
    current_statement__ = 719;
    stan::math::validate_non_negative_index("out", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> out =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 754;
    if (stan::math::logical_eq(dist, 1)) {
      current_statement__ = 752;
      stan::model::assign(out,
        stan::math::multiply(-y, stan::math::exp(eta)),
        "assigning variable out");
    } else {
      current_statement__ = 751;
      if (stan::math::logical_eq(dist, 2)) {
        current_statement__ = 749;
        stan::model::assign(out,
          stan::math::multiply(-stan::math::pow(y, aux), stan::math::exp(eta)),
          "assigning variable out");
      } else {
        current_statement__ = 748;
        if (stan::math::logical_eq(dist, 3)) {
          current_statement__ = 746;
          stan::model::assign(out,
            stan::math::multiply(
              stan::math::divide(stan::math::minus(stan::math::exp(eta)), aux),
              stan::math::expm1((aux * y))), "assigning variable out");
        } else {
          current_statement__ = 745;
          if (stan::math::logical_eq(dist, 4)) {
            current_statement__ = 743;
            stan::model::assign(out,
              stan::math::multiply(-y,
                stan::math::exp(stan::math::minus(eta))),
              "assigning variable out");
          } else {
            current_statement__ = 742;
            if (stan::math::logical_eq(dist, 5)) {
              current_statement__ = 740;
              stan::model::assign(out,
                stan::math::multiply(-stan::math::pow(y, aux),
                  stan::math::exp(stan::math::multiply(-aux, eta))),
                "assigning variable out");
            } else {
              current_statement__ = 739;
              if (stan::math::logical_eq(dist, 6)) {
                current_statement__ = 737;
                for (int i = 1; i <= n; ++i) {
                  current_statement__ = 736;
                  stan::model::assign(out,
                    stan::math::lognormal_lccdf(y,
                      stan::model::rvalue(eta, "eta",
                        stan::model::index_uni(i)), aux),
                    "assigning variable out", stan::model::index_uni(i));
                }
              } else {
                current_statement__ = 735;
                if (stan::math::logical_eq(dist, 7)) {
                  current_statement__ = 733;
                  stan::model::assign(out,
                    stan::math::minus(
                      stan::math::log1p(
                        stan::math::pow(
                          stan::math::elt_divide(y, stan::math::exp(eta)),
                          aux))), "assigning variable out");
                } else {
                  current_statement__ = 732;
                  if (stan::math::logical_eq(dist, 8)) {
                    current_statement__ = 727;
                    stan::math::validate_non_negative_index("eeta", "n", n);
                    Eigen::Matrix<local_scalar_t__,-1,1> eeta =
                      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n,
                        DUMMY_VAR__);
                    current_statement__ = 728;
                    stan::model::assign(eeta,
                      stan::math::exp(stan::math::minus(eta)),
                      "assigning variable eeta");
                    current_statement__ = 730;
                    for (int i = 1; i <= n; ++i) {
                      current_statement__ = 729;
                      stan::model::assign(out,
                        stan::math::gamma_lccdf(y, aux,
                          stan::model::rvalue(eeta, "eeta",
                            stan::model::index_uni(i))),
                        "assigning variable out", stan::model::index_uni(i));
                    }
                  } else {
                    current_statement__ = 726;
                    if (stan::math::logical_eq(dist, 9)) {
                      local_scalar_t__ Q = DUMMY_VAR__;
                      current_statement__ = 721;
                      Q = stan::math::pow(aux2, -0.5);
                      current_statement__ = 722;
                      stan::math::validate_non_negative_index("w", "n", n);
                      Eigen::Matrix<local_scalar_t__,-1,1> w =
                        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n,
                          DUMMY_VAR__);
                      current_statement__ = 723;
                      stan::model::assign(w,
                        stan::math::multiply(
                          stan::math::exp(
                            stan::math::divide(
                              stan::math::multiply(Q,
                                stan::math::subtract(stan::math::log(y), eta)),
                              aux)), aux2), "assigning variable w");
                      current_statement__ = 724;
                      stan::model::assign(out,
                        stan::math::log1m(stan::math::gamma_p(aux2, w)),
                        "assigning variable out");
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    current_statement__ = 755;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>>,-1,1>
lS_a2(const int& dist, const T1__& y, const T2__& eta_arg__, const T3__&
      aux_arg__, const T4__& aux2_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& aux = stan::math::to_ref(aux_arg__);
  const auto& aux2 = stan::math::to_ref(aux2_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 757;
    n = stan::math::num_elements(eta);
    current_statement__ = 758;
    stan::math::validate_non_negative_index("out", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> out =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 794;
    if (stan::math::logical_eq(dist, 1)) {
      current_statement__ = 792;
      stan::model::assign(out,
        stan::math::multiply(-y, stan::math::exp(eta)),
        "assigning variable out");
    } else {
      current_statement__ = 791;
      if (stan::math::logical_eq(dist, 2)) {
        current_statement__ = 789;
        stan::model::assign(out,
          stan::math::elt_multiply(
            stan::math::minus(stan::math::pow(y, aux)), stan::math::exp(eta)),
          "assigning variable out");
      } else {
        current_statement__ = 788;
        if (stan::math::logical_eq(dist, 3)) {
          current_statement__ = 786;
          stan::model::assign(out,
            stan::math::elt_multiply(
              stan::math::elt_divide(stan::math::minus(stan::math::exp(eta)),
                aux), stan::math::expm1(stan::math::multiply(aux, y))),
            "assigning variable out");
        } else {
          current_statement__ = 785;
          if (stan::math::logical_eq(dist, 4)) {
            current_statement__ = 783;
            stan::model::assign(out,
              stan::math::multiply(-y,
                stan::math::exp(stan::math::minus(eta))),
              "assigning variable out");
          } else {
            current_statement__ = 782;
            if (stan::math::logical_eq(dist, 5)) {
              current_statement__ = 780;
              stan::model::assign(out,
                stan::math::elt_multiply(
                  stan::math::minus(stan::math::pow(y, aux)),
                  stan::math::exp(
                    stan::math::elt_multiply(stan::math::minus(aux), eta))),
                "assigning variable out");
            } else {
              current_statement__ = 779;
              if (stan::math::logical_eq(dist, 6)) {
                current_statement__ = 777;
                for (int i = 1; i <= n; ++i) {
                  current_statement__ = 776;
                  stan::model::assign(out,
                    stan::math::lognormal_lccdf(y,
                      stan::model::rvalue(eta, "eta",
                        stan::model::index_uni(i)),
                      stan::model::rvalue(aux, "aux",
                        stan::model::index_uni(i))),
                    "assigning variable out", stan::model::index_uni(i));
                }
              } else {
                current_statement__ = 775;
                if (stan::math::logical_eq(dist, 7)) {
                  current_statement__ = 773;
                  stan::model::assign(out,
                    stan::math::minus(
                      stan::math::log1p(
                        stan::math::pow(
                          stan::math::elt_divide(y, stan::math::exp(eta)),
                          aux))), "assigning variable out");
                } else {
                  current_statement__ = 772;
                  if (stan::math::logical_eq(dist, 8)) {
                    current_statement__ = 767;
                    stan::math::validate_non_negative_index("eeta", "n", n);
                    Eigen::Matrix<local_scalar_t__,-1,1> eeta =
                      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n,
                        DUMMY_VAR__);
                    current_statement__ = 768;
                    stan::model::assign(eeta,
                      stan::math::exp(stan::math::minus(eta)),
                      "assigning variable eeta");
                    current_statement__ = 770;
                    for (int i = 1; i <= n; ++i) {
                      current_statement__ = 769;
                      stan::model::assign(out,
                        stan::math::gamma_lccdf(y,
                          stan::model::rvalue(aux, "aux",
                            stan::model::index_uni(i)),
                          stan::model::rvalue(eeta, "eeta",
                            stan::model::index_uni(i))),
                        "assigning variable out", stan::model::index_uni(i));
                    }
                  } else {
                    current_statement__ = 766;
                    if (stan::math::logical_eq(dist, 9)) {
                      current_statement__ = 760;
                      stan::math::validate_non_negative_index("Q", "n", n);
                      Eigen::Matrix<local_scalar_t__,-1,1> Q =
                        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n,
                          DUMMY_VAR__);
                      current_statement__ = 761;
                      stan::model::assign(Q, stan::math::pow(aux2, -0.5),
                        "assigning variable Q");
                      current_statement__ = 762;
                      stan::math::validate_non_negative_index("w", "n", n);
                      Eigen::Matrix<local_scalar_t__,-1,1> w =
                        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n,
                          DUMMY_VAR__);
                      current_statement__ = 763;
                      stan::model::assign(w,
                        stan::math::elt_multiply(
                          stan::math::exp(
                            stan::math::elt_divide(
                              stan::math::elt_multiply(Q,
                                stan::math::subtract(stan::math::log(y), eta)),
                              aux)), aux2), "assigning variable w");
                      current_statement__ = 764;
                      stan::model::assign(out,
                        stan::math::log1m(stan::math::gamma_p(aux2, w)),
                        "assigning variable out");
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    current_statement__ = 795;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>>,-1,1>
lh(const int& dist, const T1__& y_arg__, const T2__& eta_arg__, const T3__&
   aux_arg__, const T4__& aux2_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& aux = stan::math::to_ref(aux_arg__);
  const auto& aux2 = stan::math::to_ref(aux2_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 797;
    n = stan::math::num_elements(y);
    current_statement__ = 798;
    stan::math::validate_non_negative_index("out", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> out =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 829;
    if (stan::math::logical_eq(dist, 1)) {
      current_statement__ = 827;
      stan::model::assign(out, eta, "assigning variable out");
    } else {
      current_statement__ = 826;
      if (stan::math::logical_eq(dist, 2)) {
        current_statement__ = 824;
        stan::model::assign(out,
          stan::math::add(stan::math::add(stan::math::log(aux), eta),
            stan::math::multiply_log(stan::math::subtract(aux, 1), y)),
          "assigning variable out");
      } else {
        current_statement__ = 823;
        if (stan::math::logical_eq(dist, 3)) {
          current_statement__ = 821;
          stan::model::assign(out,
            stan::math::add(eta, stan::math::elt_multiply(aux, y)),
            "assigning variable out");
        } else {
          current_statement__ = 820;
          if (stan::math::logical_eq(dist, 4)) {
            current_statement__ = 818;
            stan::model::assign(out, stan::math::minus(eta),
              "assigning variable out");
          } else {
            current_statement__ = 817;
            if (stan::math::logical_eq(dist, 5)) {
              current_statement__ = 815;
              stan::model::assign(out,
                stan::math::add(
                  stan::math::subtract(stan::math::log(aux),
                    stan::math::elt_multiply(aux, eta)),
                  stan::math::multiply_log(stan::math::subtract(aux, 1), y)),
                "assigning variable out");
            } else {
              current_statement__ = 814;
              if (stan::math::logical_eq(dist, 6)) {
                current_statement__ = 812;
                for (int i = 1; i <= n; ++i) {
                  current_statement__ = 811;
                  stan::model::assign(out,
                    (stan::math::lognormal_lpdf<false>(
                       stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                       stan::model::rvalue(eta, "eta",
                         stan::model::index_uni(i)),
                       stan::model::rvalue(aux, "aux",
                         stan::model::index_uni(i))) -
                    stan::math::lognormal_lccdf(
                      stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                      stan::model::rvalue(eta, "eta",
                        stan::model::index_uni(i)),
                      stan::model::rvalue(aux, "aux",
                        stan::model::index_uni(i)))),
                    "assigning variable out", stan::model::index_uni(i));
                }
              } else {
                current_statement__ = 810;
                if (stan::math::logical_eq(dist, 7)) {
                  current_statement__ = 808;
                  stan::model::assign(out,
                    stan::math::subtract(
                      stan::math::add(
                        stan::math::subtract(stan::math::log(aux), eta),
                        stan::math::elt_multiply(
                          stan::math::subtract(aux, 1),
                          stan::math::subtract(stan::math::log(y), eta))),
                      stan::math::log1p(
                        stan::math::pow(
                          stan::math::elt_divide(y, stan::math::exp(eta)),
                          aux))), "assigning variable out");
                } else {
                  current_statement__ = 807;
                  if (stan::math::logical_eq(dist, 8)) {
                    current_statement__ = 802;
                    stan::math::validate_non_negative_index("eeta", "n", n);
                    Eigen::Matrix<local_scalar_t__,-1,1> eeta =
                      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n,
                        DUMMY_VAR__);
                    current_statement__ = 803;
                    stan::model::assign(eeta,
                      stan::math::exp(stan::math::minus(eta)),
                      "assigning variable eeta");
                    current_statement__ = 805;
                    for (int i = 1; i <= n; ++i) {
                      current_statement__ = 804;
                      stan::model::assign(out,
                        (stan::math::gamma_lpdf<false>(
                           stan::model::rvalue(y, "y",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(aux, "aux",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(eeta, "eeta",
                             stan::model::index_uni(i))) -
                        stan::math::gamma_lccdf(
                          stan::model::rvalue(y, "y",
                            stan::model::index_uni(i)),
                          stan::model::rvalue(aux, "aux",
                            stan::model::index_uni(i)),
                          stan::model::rvalue(eeta, "eeta",
                            stan::model::index_uni(i)))),
                        "assigning variable out", stan::model::index_uni(i));
                    }
                  } else {
                    current_statement__ = 801;
                    if (stan::math::logical_eq(dist, 9)) {}
                  }
                }
              }
            }
          }
        }
      }
    }
    current_statement__ = 830;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, T3__, T4__>,-1,1>
lh2(const int& dist, const T1__& y_arg__, const T2__& eta_arg__, const T3__&
    aux, const T4__& aux2, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>, T3__, T4__>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 832;
    n = stan::math::num_elements(y);
    current_statement__ = 833;
    stan::math::validate_non_negative_index("out", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> out =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 864;
    if (stan::math::logical_eq(dist, 1)) {
      current_statement__ = 862;
      stan::model::assign(out, eta, "assigning variable out");
    } else {
      current_statement__ = 861;
      if (stan::math::logical_eq(dist, 2)) {
        current_statement__ = 859;
        stan::model::assign(out,
          stan::math::add(stan::math::add(stan::math::log(aux), eta),
            stan::math::multiply_log((aux - 1), y)), "assigning variable out");
      } else {
        current_statement__ = 858;
        if (stan::math::logical_eq(dist, 3)) {
          current_statement__ = 856;
          stan::model::assign(out,
            stan::math::add(eta, stan::math::multiply(aux, y)),
            "assigning variable out");
        } else {
          current_statement__ = 855;
          if (stan::math::logical_eq(dist, 4)) {
            current_statement__ = 853;
            stan::model::assign(out, stan::math::minus(eta),
              "assigning variable out");
          } else {
            current_statement__ = 852;
            if (stan::math::logical_eq(dist, 5)) {
              current_statement__ = 850;
              stan::model::assign(out,
                stan::math::add(
                  stan::math::subtract(stan::math::log(aux),
                    stan::math::multiply(aux, eta)),
                  stan::math::multiply_log((aux - 1), y)),
                "assigning variable out");
            } else {
              current_statement__ = 849;
              if (stan::math::logical_eq(dist, 6)) {
                current_statement__ = 847;
                for (int i = 1; i <= n; ++i) {
                  current_statement__ = 846;
                  stan::model::assign(out,
                    (stan::math::lognormal_lpdf<false>(
                       stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                       stan::model::rvalue(eta, "eta",
                         stan::model::index_uni(i)), aux) -
                    stan::math::lognormal_lccdf(
                      stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                      stan::model::rvalue(eta, "eta",
                        stan::model::index_uni(i)), aux)),
                    "assigning variable out", stan::model::index_uni(i));
                }
              } else {
                current_statement__ = 845;
                if (stan::math::logical_eq(dist, 7)) {
                  current_statement__ = 843;
                  stan::model::assign(out,
                    stan::math::subtract(
                      stan::math::add(
                        stan::math::subtract(stan::math::log(aux), eta),
                        stan::math::multiply((aux - 1),
                          stan::math::subtract(stan::math::log(y), eta))),
                      stan::math::log1p(
                        stan::math::pow(
                          stan::math::elt_divide(y, stan::math::exp(eta)),
                          aux))), "assigning variable out");
                } else {
                  current_statement__ = 842;
                  if (stan::math::logical_eq(dist, 8)) {
                    current_statement__ = 837;
                    stan::math::validate_non_negative_index("eeta", "n", n);
                    Eigen::Matrix<local_scalar_t__,-1,1> eeta =
                      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n,
                        DUMMY_VAR__);
                    current_statement__ = 838;
                    stan::model::assign(eeta,
                      stan::math::exp(stan::math::minus(eta)),
                      "assigning variable eeta");
                    current_statement__ = 840;
                    for (int i = 1; i <= n; ++i) {
                      current_statement__ = 839;
                      stan::model::assign(out,
                        (stan::math::gamma_lpdf<false>(
                           stan::model::rvalue(y, "y",
                             stan::model::index_uni(i)), aux,
                           stan::model::rvalue(eeta, "eeta",
                             stan::model::index_uni(i))) -
                        stan::math::gamma_lccdf(
                          stan::model::rvalue(y, "y",
                            stan::model::index_uni(i)), aux,
                          stan::model::rvalue(eeta, "eeta",
                            stan::model::index_uni(i)))),
                        "assigning variable out", stan::model::index_uni(i));
                    }
                  } else {
                    current_statement__ = 836;
                    if (stan::math::logical_eq(dist, 9)) {}
                  }
                }
              }
            }
          }
        }
      }
    }
    current_statement__ = 865;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T2__>, T3__, T4__>,-1,1>
lh_a(const int& dist, const T1__& y, const T2__& eta_arg__, const T3__& aux,
     const T4__& aux2, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
                             stan::base_type_t<T2__>, T3__, T4__>;
  int current_statement__ = 0;
  const auto& eta = stan::math::to_ref(eta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 867;
    n = stan::math::num_elements(eta);
    current_statement__ = 868;
    stan::math::validate_non_negative_index("out", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> out =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 899;
    if (stan::math::logical_eq(dist, 1)) {
      current_statement__ = 897;
      stan::model::assign(out, eta, "assigning variable out");
    } else {
      current_statement__ = 896;
      if (stan::math::logical_eq(dist, 2)) {
        current_statement__ = 894;
        stan::model::assign(out,
          stan::math::add(stan::math::add(stan::math::log(aux), eta),
            stan::math::multiply_log((aux - 1), y)), "assigning variable out");
      } else {
        current_statement__ = 893;
        if (stan::math::logical_eq(dist, 3)) {
          current_statement__ = 891;
          stan::model::assign(out, stan::math::add(eta, (aux * y)),
            "assigning variable out");
        } else {
          current_statement__ = 890;
          if (stan::math::logical_eq(dist, 4)) {
            current_statement__ = 888;
            stan::model::assign(out, stan::math::minus(eta),
              "assigning variable out");
          } else {
            current_statement__ = 887;
            if (stan::math::logical_eq(dist, 5)) {
              current_statement__ = 885;
              stan::model::assign(out,
                stan::math::add(
                  stan::math::subtract(stan::math::log(aux),
                    stan::math::multiply(aux, eta)),
                  stan::math::multiply_log((aux - 1), y)),
                "assigning variable out");
            } else {
              current_statement__ = 884;
              if (stan::math::logical_eq(dist, 6)) {
                current_statement__ = 882;
                for (int i = 1; i <= n; ++i) {
                  current_statement__ = 881;
                  stan::model::assign(out,
                    (stan::math::lognormal_lpdf<false>(y,
                       stan::model::rvalue(eta, "eta",
                         stan::model::index_uni(i)), aux) -
                    stan::math::lognormal_lccdf(y,
                      stan::model::rvalue(eta, "eta",
                        stan::model::index_uni(i)), aux)),
                    "assigning variable out", stan::model::index_uni(i));
                }
              } else {
                current_statement__ = 880;
                if (stan::math::logical_eq(dist, 7)) {
                  current_statement__ = 878;
                  stan::model::assign(out,
                    stan::math::subtract(
                      stan::math::add(
                        stan::math::subtract(stan::math::log(aux), eta),
                        stan::math::multiply((aux - 1),
                          stan::math::subtract(stan::math::log(y), eta))),
                      stan::math::log1p(
                        stan::math::pow(
                          stan::math::elt_divide(y, stan::math::exp(eta)),
                          aux))), "assigning variable out");
                } else {
                  current_statement__ = 877;
                  if (stan::math::logical_eq(dist, 8)) {
                    current_statement__ = 872;
                    stan::math::validate_non_negative_index("eeta", "n", n);
                    Eigen::Matrix<local_scalar_t__,-1,1> eeta =
                      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n,
                        DUMMY_VAR__);
                    current_statement__ = 873;
                    stan::model::assign(eeta,
                      stan::math::exp(stan::math::minus(eta)),
                      "assigning variable eeta");
                    current_statement__ = 875;
                    for (int i = 1; i <= n; ++i) {
                      current_statement__ = 874;
                      stan::model::assign(out,
                        (stan::math::gamma_lpdf<false>(y, aux,
                           stan::model::rvalue(eeta, "eeta",
                             stan::model::index_uni(i))) -
                        stan::math::gamma_lccdf(y, aux,
                          stan::model::rvalue(eeta, "eeta",
                            stan::model::index_uni(i)))),
                        "assigning variable out", stan::model::index_uni(i));
                    }
                  } else {
                    current_statement__ = 871;
                    if (stan::math::logical_eq(dist, 9)) {}
                  }
                }
              }
            }
          }
        }
      }
    }
    current_statement__ = 900;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>>,-1,1>
lh_a2(const int& dist, const T1__& y, const T2__& eta_arg__, const T3__&
      aux_arg__, const T4__& aux2_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& aux = stan::math::to_ref(aux_arg__);
  const auto& aux2 = stan::math::to_ref(aux2_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 902;
    n = stan::math::num_elements(eta);
    current_statement__ = 903;
    stan::math::validate_non_negative_index("out", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> out =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 934;
    if (stan::math::logical_eq(dist, 1)) {
      current_statement__ = 932;
      stan::model::assign(out, eta, "assigning variable out");
    } else {
      current_statement__ = 931;
      if (stan::math::logical_eq(dist, 2)) {
        current_statement__ = 929;
        stan::model::assign(out,
          stan::math::add(stan::math::add(stan::math::log(aux), eta),
            stan::math::multiply_log(stan::math::subtract(aux, 1), y)),
          "assigning variable out");
      } else {
        current_statement__ = 928;
        if (stan::math::logical_eq(dist, 3)) {
          current_statement__ = 926;
          stan::model::assign(out,
            stan::math::add(eta, stan::math::multiply(aux, y)),
            "assigning variable out");
        } else {
          current_statement__ = 925;
          if (stan::math::logical_eq(dist, 4)) {
            current_statement__ = 923;
            stan::model::assign(out, stan::math::minus(eta),
              "assigning variable out");
          } else {
            current_statement__ = 922;
            if (stan::math::logical_eq(dist, 5)) {
              current_statement__ = 920;
              stan::model::assign(out,
                stan::math::add(
                  stan::math::subtract(stan::math::log(aux),
                    stan::math::elt_multiply(aux, eta)),
                  stan::math::multiply_log(stan::math::subtract(aux, 1), y)),
                "assigning variable out");
            } else {
              current_statement__ = 919;
              if (stan::math::logical_eq(dist, 6)) {
                current_statement__ = 917;
                for (int i = 1; i <= n; ++i) {
                  current_statement__ = 916;
                  stan::model::assign(out,
                    (stan::math::lognormal_lpdf<false>(y,
                       stan::model::rvalue(eta, "eta",
                         stan::model::index_uni(i)),
                       stan::model::rvalue(aux, "aux",
                         stan::model::index_uni(i))) -
                    stan::math::lognormal_lccdf(y,
                      stan::model::rvalue(eta, "eta",
                        stan::model::index_uni(i)),
                      stan::model::rvalue(aux, "aux",
                        stan::model::index_uni(i)))),
                    "assigning variable out", stan::model::index_uni(i));
                }
              } else {
                current_statement__ = 915;
                if (stan::math::logical_eq(dist, 7)) {
                  current_statement__ = 913;
                  stan::model::assign(out,
                    stan::math::subtract(
                      stan::math::add(
                        stan::math::subtract(stan::math::log(aux), eta),
                        stan::math::elt_multiply(
                          stan::math::subtract(aux, 1),
                          stan::math::subtract(stan::math::log(y), eta))),
                      stan::math::log1p(
                        stan::math::pow(
                          stan::math::elt_divide(y, stan::math::exp(eta)),
                          aux))), "assigning variable out");
                } else {
                  current_statement__ = 912;
                  if (stan::math::logical_eq(dist, 8)) {
                    current_statement__ = 907;
                    stan::math::validate_non_negative_index("eeta", "n", n);
                    Eigen::Matrix<local_scalar_t__,-1,1> eeta =
                      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n,
                        DUMMY_VAR__);
                    current_statement__ = 908;
                    stan::model::assign(eeta,
                      stan::math::exp(stan::math::minus(eta)),
                      "assigning variable eeta");
                    current_statement__ = 910;
                    for (int i = 1; i <= n; ++i) {
                      current_statement__ = 909;
                      stan::model::assign(out,
                        (stan::math::gamma_lpdf<false>(y,
                           stan::model::rvalue(aux, "aux",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(eeta, "eeta",
                             stan::model::index_uni(i))) -
                        stan::math::gamma_lccdf(y,
                          stan::model::rvalue(aux, "aux",
                            stan::model::index_uni(i)),
                          stan::model::rvalue(eeta, "eeta",
                            stan::model::index_uni(i)))),
                        "assigning variable out", stan::model::index_uni(i));
                    }
                  } else {
                    current_statement__ = 906;
                    if (stan::math::logical_eq(dist, 9)) {}
                  }
                }
              }
            }
          }
        }
      }
    }
    current_statement__ = 935;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T3__, typename T5__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, stan::base_type_t<T3__>,
                stan::base_type_t<T5__>, stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>>>,-1,1>
loglik(const int& dist, const T1__& time_arg__, const T2__& start_time_arg__,
       const T3__& delay_time_arg__, const std::vector<int>& status,
       const T5__& eta_arg__, const T6__& aux_arg__, const T7__& aux2_arg__,
       std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T5__>,
                             stan::base_type_t<T6__>,
                             stan::promote_args_t<stan::base_type_t<T7__>>>;
  int current_statement__ = 0;
  const auto& time = stan::math::to_ref(time_arg__);
  const auto& start_time = stan::math::to_ref(start_time_arg__);
  const auto& delay_time = stan::math::to_ref(delay_time_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& aux = stan::math::to_ref(aux_arg__);
  const auto& aux2 = stan::math::to_ref(aux2_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 937;
    n = stan::math::num_elements(eta);
    current_statement__ = 938;
    stan::math::validate_non_negative_index("l", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> l =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    std::vector<int> nw =
      std::vector<int>(3, std::numeric_limits<int>::min());
    current_statement__ = 940;
    stan::model::assign(nw, nwhich_all(status, 3, pstream__),
      "assigning variable nw");
    int nw0 = std::numeric_limits<int>::min();
    current_statement__ = 941;
    nw0 = ((stan::math::primitive_value(
              (stan::math::primitive_value(stan::math::logical_eq(dist, 6))
              ||
              stan::math::primitive_value(stan::math::logical_eq(dist, 8))))
      || stan::math::primitive_value(stan::math::logical_eq(dist, 9))) ? (n -
      stan::math::sum(nw)) : 0);
    current_statement__ = 942;
    stan::math::validate_non_negative_index("w0", "nw0", nw0);
    std::vector<int> w0 =
      std::vector<int>(nw0, std::numeric_limits<int>::min());
    current_statement__ = 944;
    stan::math::validate_non_negative_index("w1", "nw[1]",
      stan::model::rvalue(nw, "nw", stan::model::index_uni(1)));
    std::vector<int> w1 =
      std::vector<int>(stan::model::rvalue(nw, "nw",
                         stan::model::index_uni(1)),
        std::numeric_limits<int>::min());
    current_statement__ = 946;
    stan::math::validate_non_negative_index("w2", "nw[2]",
      stan::model::rvalue(nw, "nw", stan::model::index_uni(2)));
    std::vector<int> w2 =
      std::vector<int>(stan::model::rvalue(nw, "nw",
                         stan::model::index_uni(2)),
        std::numeric_limits<int>::min());
    current_statement__ = 948;
    stan::math::validate_non_negative_index("w3", "nw[3]",
      stan::model::rvalue(nw, "nw", stan::model::index_uni(3)));
    std::vector<int> w3 =
      std::vector<int>(stan::model::rvalue(nw, "nw",
                         stan::model::index_uni(3)),
        std::numeric_limits<int>::min());
    int nd = std::numeric_limits<int>::min();
    current_statement__ = 950;
    nd = stan::math::num_elements(which_gt0(delay_time, pstream__));
    current_statement__ = 951;
    stan::math::validate_non_negative_index("wd", "nd", nd);
    std::vector<int> wd =
      std::vector<int>(nd, std::numeric_limits<int>::min());
    current_statement__ = 954;
    if (nw0) {
      current_statement__ = 953;
      stan::model::assign(w0, which(status, 0, pstream__),
        "assigning variable w0");
    }
    current_statement__ = 956;
    if (stan::model::rvalue(nw, "nw", stan::model::index_uni(1))) {
      current_statement__ = 955;
      stan::model::assign(w1, which(status, 1, pstream__),
        "assigning variable w1");
    }
    current_statement__ = 958;
    if (stan::model::rvalue(nw, "nw", stan::model::index_uni(2))) {
      current_statement__ = 957;
      stan::model::assign(w2, which(status, 2, pstream__),
        "assigning variable w2");
    }
    current_statement__ = 960;
    if (stan::model::rvalue(nw, "nw", stan::model::index_uni(3))) {
      current_statement__ = 959;
      stan::model::assign(w3, which(status, 3, pstream__),
        "assigning variable w3");
    }
    current_statement__ = 962;
    if (nd) {
      current_statement__ = 961;
      stan::model::assign(wd, which_gt0(delay_time, pstream__),
        "assigning variable wd");
    }
    current_statement__ = 980;
    if ((stan::math::primitive_value(
           (stan::math::primitive_value(stan::math::logical_eq(dist, 6)) ||
           stan::math::primitive_value(stan::math::logical_eq(dist, 8))))
        || stan::math::primitive_value(stan::math::logical_eq(dist, 9)))) {
      current_statement__ = 966;
      stan::model::assign(l,
        lS(dist,
          stan::model::rvalue(time, "time", stan::model::index_multi(w0)),
          stan::model::rvalue(eta, "eta", stan::model::index_multi(w0)),
          stan::model::rvalue(aux, "aux", stan::model::index_multi(w0)),
          stan::model::rvalue(aux2, "aux2", stan::model::index_multi(w0)),
          pstream__), "assigning variable l", stan::model::index_multi(w0));
      current_statement__ = 970;
      if (stan::math::logical_eq(dist, 6)) {
        current_statement__ = 969;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 968;
          if (stan::math::logical_eq(
                stan::model::rvalue(status, "status",
                  stan::model::index_uni(i)), 1)) {
            current_statement__ = 967;
            stan::model::assign(l,
              stan::math::lognormal_lpdf<false>(
                stan::model::rvalue(time, "time", stan::model::index_uni(i)),
                stan::model::rvalue(eta, "eta", stan::model::index_uni(i)),
                stan::model::rvalue(aux, "aux", stan::model::index_uni(i))),
              "assigning variable l", stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 974;
      if (stan::math::logical_eq(dist, 8)) {
        current_statement__ = 973;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 972;
          if (stan::math::logical_eq(
                stan::model::rvalue(status, "status",
                  stan::model::index_uni(i)), 1)) {
            current_statement__ = 971;
            stan::model::assign(l,
              stan::math::gamma_lpdf<false>(
                stan::model::rvalue(time, "time", stan::model::index_uni(i)),
                stan::model::rvalue(aux, "aux", stan::model::index_uni(i)),
                stan::math::exp(
                  -stan::model::rvalue(eta, "eta", stan::model::index_uni(i)))),
              "assigning variable l", stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 978;
      if (stan::math::logical_eq(dist, 9)) {
        current_statement__ = 977;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 976;
          if (stan::math::logical_eq(
                stan::model::rvalue(status, "status",
                  stan::model::index_uni(i)), 1)) {
            current_statement__ = 975;
            stan::model::assign(l,
              gengamma_lpdf<false>(
                stan::model::rvalue(time, "time", stan::model::index_uni(i)),
                stan::model::rvalue(eta, "eta", stan::model::index_uni(i)),
                stan::model::rvalue(aux, "aux", stan::model::index_uni(i)),
                stan::model::rvalue(aux2, "aux2", stan::model::index_uni(i)),
                pstream__), "assigning variable l", stan::model::index_uni(i));
          }
        }
      }
    } else {
      current_statement__ = 963;
      stan::model::assign(l, lS(dist, time, eta, aux, aux2, pstream__),
        "assigning variable l");
      current_statement__ = 964;
      stan::model::assign(l,
        stan::math::add(
          stan::model::deep_copy(
            stan::model::rvalue(l, "l", stan::model::index_multi(w1))),
          lh(dist,
            stan::model::rvalue(time, "time", stan::model::index_multi(w1)),
            stan::model::rvalue(eta, "eta", stan::model::index_multi(w1)),
            stan::model::rvalue(aux, "aux", stan::model::index_multi(w1)),
            stan::model::rvalue(aux2, "aux2", stan::model::index_multi(w1)),
            pstream__)), "assigning variable l", stan::model::index_multi(w1));
    }
    current_statement__ = 981;
    stan::model::assign(l,
      stan::math::log1m_exp(
        stan::model::deep_copy(
          stan::model::rvalue(l, "l", stan::model::index_multi(w2)))),
      "assigning variable l", stan::model::index_multi(w2));
    current_statement__ = 982;
    stan::model::assign(l,
      stan::math::log_diff_exp(
        lS(dist,
          stan::model::rvalue(start_time, "start_time",
            stan::model::index_multi(w3)),
          stan::model::rvalue(eta, "eta", stan::model::index_multi(w3)),
          stan::model::rvalue(aux, "aux", stan::model::index_multi(w3)),
          stan::model::rvalue(aux2, "aux2", stan::model::index_multi(w3)),
          pstream__),
        stan::model::deep_copy(
          stan::model::rvalue(l, "l", stan::model::index_multi(w3)))),
      "assigning variable l", stan::model::index_multi(w3));
    current_statement__ = 983;
    stan::model::assign(l,
      stan::math::subtract(
        stan::model::deep_copy(
          stan::model::rvalue(l, "l", stan::model::index_multi(wd))),
        lS(dist,
          stan::model::rvalue(delay_time, "delay_time",
            stan::model::index_multi(wd)),
          stan::model::rvalue(eta, "eta", stan::model::index_multi(wd)),
          stan::model::rvalue(aux, "aux", stan::model::index_multi(wd)),
          stan::model::rvalue(aux2, "aux2", stan::model::index_multi(wd)),
          pstream__)), "assigning variable l", stan::model::index_multi(wd));
    current_statement__ = 984;
    return l;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T3__, typename T5__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, stan::base_type_t<T3__>,
                stan::base_type_t<T5__>, T6__, stan::promote_args_t<T7__>>,-1,1>
loglik2(const int& dist, const T1__& time_arg__, const T2__&
        start_time_arg__, const T3__& delay_time_arg__,
        const std::vector<int>& status, const T5__& eta_arg__, const T6__&
        aux, const T7__& aux2, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T5__>, T6__,
                             stan::promote_args_t<T7__>>;
  int current_statement__ = 0;
  const auto& time = stan::math::to_ref(time_arg__);
  const auto& start_time = stan::math::to_ref(start_time_arg__);
  const auto& delay_time = stan::math::to_ref(delay_time_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 986;
    n = stan::math::num_elements(eta);
    current_statement__ = 987;
    stan::math::validate_non_negative_index("l", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> l =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    std::vector<int> nw =
      std::vector<int>(3, std::numeric_limits<int>::min());
    current_statement__ = 989;
    stan::model::assign(nw, nwhich_all(status, 3, pstream__),
      "assigning variable nw");
    int nw0 = std::numeric_limits<int>::min();
    current_statement__ = 990;
    nw0 = ((stan::math::primitive_value(
              (stan::math::primitive_value(stan::math::logical_eq(dist, 6))
              ||
              stan::math::primitive_value(stan::math::logical_eq(dist, 8))))
      || stan::math::primitive_value(stan::math::logical_eq(dist, 9))) ? (n -
      stan::math::sum(nw)) : 0);
    current_statement__ = 991;
    stan::math::validate_non_negative_index("w0", "nw0", nw0);
    std::vector<int> w0 =
      std::vector<int>(nw0, std::numeric_limits<int>::min());
    current_statement__ = 993;
    stan::math::validate_non_negative_index("w1", "nw[1]",
      stan::model::rvalue(nw, "nw", stan::model::index_uni(1)));
    std::vector<int> w1 =
      std::vector<int>(stan::model::rvalue(nw, "nw",
                         stan::model::index_uni(1)),
        std::numeric_limits<int>::min());
    current_statement__ = 995;
    stan::math::validate_non_negative_index("w2", "nw[2]",
      stan::model::rvalue(nw, "nw", stan::model::index_uni(2)));
    std::vector<int> w2 =
      std::vector<int>(stan::model::rvalue(nw, "nw",
                         stan::model::index_uni(2)),
        std::numeric_limits<int>::min());
    current_statement__ = 997;
    stan::math::validate_non_negative_index("w3", "nw[3]",
      stan::model::rvalue(nw, "nw", stan::model::index_uni(3)));
    std::vector<int> w3 =
      std::vector<int>(stan::model::rvalue(nw, "nw",
                         stan::model::index_uni(3)),
        std::numeric_limits<int>::min());
    int nd = std::numeric_limits<int>::min();
    current_statement__ = 999;
    nd = stan::math::num_elements(which_gt0(delay_time, pstream__));
    current_statement__ = 1000;
    stan::math::validate_non_negative_index("wd", "nd", nd);
    std::vector<int> wd =
      std::vector<int>(nd, std::numeric_limits<int>::min());
    current_statement__ = 1003;
    if (nw0) {
      current_statement__ = 1002;
      stan::model::assign(w0, which(status, 0, pstream__),
        "assigning variable w0");
    }
    current_statement__ = 1005;
    if (stan::model::rvalue(nw, "nw", stan::model::index_uni(1))) {
      current_statement__ = 1004;
      stan::model::assign(w1, which(status, 1, pstream__),
        "assigning variable w1");
    }
    current_statement__ = 1007;
    if (stan::model::rvalue(nw, "nw", stan::model::index_uni(2))) {
      current_statement__ = 1006;
      stan::model::assign(w2, which(status, 2, pstream__),
        "assigning variable w2");
    }
    current_statement__ = 1009;
    if (stan::model::rvalue(nw, "nw", stan::model::index_uni(3))) {
      current_statement__ = 1008;
      stan::model::assign(w3, which(status, 3, pstream__),
        "assigning variable w3");
    }
    current_statement__ = 1011;
    if (nd) {
      current_statement__ = 1010;
      stan::model::assign(wd, which_gt0(delay_time, pstream__),
        "assigning variable wd");
    }
    current_statement__ = 1029;
    if ((stan::math::primitive_value(
           (stan::math::primitive_value(stan::math::logical_eq(dist, 6)) ||
           stan::math::primitive_value(stan::math::logical_eq(dist, 8))))
        || stan::math::primitive_value(stan::math::logical_eq(dist, 9)))) {
      current_statement__ = 1015;
      stan::model::assign(l,
        lS2(dist,
          stan::model::rvalue(time, "time", stan::model::index_multi(w0)),
          stan::model::rvalue(eta, "eta", stan::model::index_multi(w0)), aux,
          aux2, pstream__), "assigning variable l",
        stan::model::index_multi(w0));
      current_statement__ = 1019;
      if (stan::math::logical_eq(dist, 6)) {
        current_statement__ = 1018;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 1017;
          if (stan::math::logical_eq(
                stan::model::rvalue(status, "status",
                  stan::model::index_uni(i)), 1)) {
            current_statement__ = 1016;
            stan::model::assign(l,
              stan::math::lognormal_lpdf<false>(
                stan::model::rvalue(time, "time", stan::model::index_uni(i)),
                stan::model::rvalue(eta, "eta", stan::model::index_uni(i)),
                aux), "assigning variable l", stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 1023;
      if (stan::math::logical_eq(dist, 8)) {
        current_statement__ = 1022;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 1021;
          if (stan::math::logical_eq(
                stan::model::rvalue(status, "status",
                  stan::model::index_uni(i)), 1)) {
            current_statement__ = 1020;
            stan::model::assign(l,
              stan::math::gamma_lpdf<false>(
                stan::model::rvalue(time, "time", stan::model::index_uni(i)),
                aux,
                stan::math::exp(
                  -stan::model::rvalue(eta, "eta", stan::model::index_uni(i)))),
              "assigning variable l", stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 1027;
      if (stan::math::logical_eq(dist, 9)) {
        current_statement__ = 1026;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 1025;
          if (stan::math::logical_eq(
                stan::model::rvalue(status, "status",
                  stan::model::index_uni(i)), 1)) {
            current_statement__ = 1024;
            stan::model::assign(l,
              gengamma_lpdf<false>(
                stan::model::rvalue(time, "time", stan::model::index_uni(i)),
                stan::model::rvalue(eta, "eta", stan::model::index_uni(i)),
                aux, aux2, pstream__), "assigning variable l",
              stan::model::index_uni(i));
          }
        }
      }
    } else {
      current_statement__ = 1012;
      stan::model::assign(l, lS2(dist, time, eta, aux, aux2, pstream__),
        "assigning variable l");
      current_statement__ = 1013;
      stan::model::assign(l,
        stan::math::add(
          stan::model::deep_copy(
            stan::model::rvalue(l, "l", stan::model::index_multi(w1))),
          lh2(dist,
            stan::model::rvalue(time, "time", stan::model::index_multi(w1)),
            stan::model::rvalue(eta, "eta", stan::model::index_multi(w1)),
            aux, aux2, pstream__)), "assigning variable l",
        stan::model::index_multi(w1));
    }
    current_statement__ = 1030;
    stan::model::assign(l,
      stan::math::log1m_exp(
        stan::model::deep_copy(
          stan::model::rvalue(l, "l", stan::model::index_multi(w2)))),
      "assigning variable l", stan::model::index_multi(w2));
    current_statement__ = 1031;
    stan::model::assign(l,
      stan::math::log_diff_exp(
        lS2(dist,
          stan::model::rvalue(start_time, "start_time",
            stan::model::index_multi(w3)),
          stan::model::rvalue(eta, "eta", stan::model::index_multi(w3)), aux,
          aux2, pstream__),
        stan::model::deep_copy(
          stan::model::rvalue(l, "l", stan::model::index_multi(w3)))),
      "assigning variable l", stan::model::index_multi(w3));
    current_statement__ = 1032;
    stan::model::assign(l,
      stan::math::subtract(
        stan::model::deep_copy(
          stan::model::rvalue(l, "l", stan::model::index_multi(wd))),
        lS2(dist,
          stan::model::rvalue(delay_time, "delay_time",
            stan::model::index_multi(wd)),
          stan::model::rvalue(eta, "eta", stan::model::index_multi(wd)), aux,
          aux2, pstream__)), "assigning variable l",
      stan::model::index_multi(wd));
    current_statement__ = 1033;
    return l;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T3__, typename T5__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>>*>
Eigen::Matrix<stan::promote_args_t<T1__, T2__, T3__, stan::base_type_t<T5__>,
                T6__, stan::promote_args_t<T7__>>,-1,1>
loglik_a(const int& dist, const T1__& time, const T2__& start_time,
         const T3__& delay_time, const int& status, const T5__& eta_arg__,
         const T6__& aux, const T7__& aux2, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__, T3__,
                             stan::base_type_t<T5__>, T6__,
                             stan::promote_args_t<T7__>>;
  int current_statement__ = 0;
  const auto& eta = stan::math::to_ref(eta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 1035;
    n = stan::math::num_elements(eta);
    current_statement__ = 1036;
    stan::math::validate_non_negative_index("l", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> l =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 1064;
    if (stan::math::logical_eq(status, 0)) {
      current_statement__ = 1062;
      stan::model::assign(l, lS_a(dist, time, eta, aux, aux2, pstream__),
        "assigning variable l");
    } else {
      current_statement__ = 1061;
      if (stan::math::logical_eq(status, 1)) {
        current_statement__ = 1059;
        if (stan::math::logical_eq(dist, 6)) {
          current_statement__ = 1057;
          for (int i = 1; i <= n; ++i) {
            current_statement__ = 1056;
            stan::model::assign(l,
              stan::math::lognormal_lpdf<false>(time,
                stan::model::rvalue(eta, "eta", stan::model::index_uni(i)),
                aux), "assigning variable l", stan::model::index_uni(i));
          }
        } else {
          current_statement__ = 1055;
          if (stan::math::logical_eq(dist, 8)) {
            current_statement__ = 1050;
            stan::math::validate_non_negative_index("eeta", "n", n);
            Eigen::Matrix<local_scalar_t__,-1,1> eeta =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
            current_statement__ = 1051;
            stan::model::assign(eeta,
              stan::math::exp(stan::math::minus(eta)),
              "assigning variable eeta");
            current_statement__ = 1053;
            for (int i = 1; i <= n; ++i) {
              current_statement__ = 1052;
              stan::model::assign(l,
                stan::math::gamma_lpdf<false>(time, aux,
                  stan::model::rvalue(eeta, "eeta", stan::model::index_uni(i))),
                "assigning variable l", stan::model::index_uni(i));
            }
          } else {
            current_statement__ = 1049;
            if (stan::math::logical_eq(dist, 9)) {
              current_statement__ = 1047;
              for (int i = 1; i <= n; ++i) {
                current_statement__ = 1046;
                stan::model::assign(l,
                  gengamma_lpdf<false>(time,
                    stan::model::rvalue(eta, "eta", stan::model::index_uni(i)),
                    aux, aux2, pstream__), "assigning variable l",
                  stan::model::index_uni(i));
              }
            } else {
              current_statement__ = 1044;
              stan::model::assign(l,
                stan::math::add(lS_a(dist, time, eta, aux, aux2, pstream__),
                  lh_a(dist, time, eta, aux, aux2, pstream__)),
                "assigning variable l");
            }
          }
        }
      } else {
        current_statement__ = 1043;
        if (stan::math::logical_eq(status, 2)) {
          current_statement__ = 1041;
          stan::model::assign(l,
            stan::math::log1m_exp(lS_a(dist, time, eta, aux, aux2, pstream__)),
            "assigning variable l");
        } else {
          current_statement__ = 1040;
          if (stan::math::logical_eq(status, 3)) {
            current_statement__ = 1038;
            stan::model::assign(l,
              stan::math::log_diff_exp(
                lS_a(dist, start_time, eta, aux, aux2, pstream__),
                lS_a(dist, time, eta, aux, aux2, pstream__)),
              "assigning variable l");
          }
        }
      }
    }
    current_statement__ = 1067;
    if (stan::math::logical_gt(delay_time, 0)) {
      current_statement__ = 1065;
      stan::model::assign(l,
        stan::math::subtract(stan::model::deep_copy(l),
          lS_a(dist, delay_time, eta, aux, aux2, pstream__)),
        "assigning variable l");
    }
    current_statement__ = 1068;
    return l;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T3__, typename T5__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>*>
Eigen::Matrix<stan::promote_args_t<T1__, T2__, T3__, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>>>,-1,1>
loglik_a2(const int& dist, const T1__& time, const T2__& start_time,
          const T3__& delay_time, const int& status, const T5__& eta_arg__,
          const T6__& aux_arg__, const T7__& aux2_arg__, std::ostream*
          pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__, T3__,
                             stan::base_type_t<T5__>,
                             stan::base_type_t<T6__>,
                             stan::promote_args_t<stan::base_type_t<T7__>>>;
  int current_statement__ = 0;
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& aux = stan::math::to_ref(aux_arg__);
  const auto& aux2 = stan::math::to_ref(aux2_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 1070;
    n = stan::math::num_elements(eta);
    current_statement__ = 1071;
    stan::math::validate_non_negative_index("l", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> l =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 1099;
    if (stan::math::logical_eq(status, 0)) {
      current_statement__ = 1097;
      stan::model::assign(l, lS_a2(dist, time, eta, aux, aux2, pstream__),
        "assigning variable l");
    } else {
      current_statement__ = 1096;
      if (stan::math::logical_eq(status, 1)) {
        current_statement__ = 1094;
        if (stan::math::logical_eq(dist, 6)) {
          current_statement__ = 1092;
          for (int i = 1; i <= n; ++i) {
            current_statement__ = 1091;
            stan::model::assign(l,
              stan::math::lognormal_lpdf<false>(time,
                stan::model::rvalue(eta, "eta", stan::model::index_uni(i)),
                stan::model::rvalue(aux, "aux", stan::model::index_uni(i))),
              "assigning variable l", stan::model::index_uni(i));
          }
        } else {
          current_statement__ = 1090;
          if (stan::math::logical_eq(dist, 8)) {
            current_statement__ = 1085;
            stan::math::validate_non_negative_index("eeta", "n", n);
            Eigen::Matrix<local_scalar_t__,-1,1> eeta =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
            current_statement__ = 1086;
            stan::model::assign(eeta,
              stan::math::exp(stan::math::minus(eta)),
              "assigning variable eeta");
            current_statement__ = 1088;
            for (int i = 1; i <= n; ++i) {
              current_statement__ = 1087;
              stan::model::assign(l,
                stan::math::gamma_lpdf<false>(time,
                  stan::model::rvalue(aux, "aux", stan::model::index_uni(i)),
                  stan::model::rvalue(eeta, "eeta", stan::model::index_uni(i))),
                "assigning variable l", stan::model::index_uni(i));
            }
          } else {
            current_statement__ = 1084;
            if (stan::math::logical_eq(dist, 9)) {
              current_statement__ = 1082;
              for (int i = 1; i <= n; ++i) {
                current_statement__ = 1081;
                stan::model::assign(l,
                  gengamma_lpdf<false>(time,
                    stan::model::rvalue(eta, "eta", stan::model::index_uni(i)),
                    stan::model::rvalue(aux, "aux", stan::model::index_uni(i)),
                    stan::model::rvalue(aux2, "aux2",
                      stan::model::index_uni(i)), pstream__),
                  "assigning variable l", stan::model::index_uni(i));
              }
            } else {
              current_statement__ = 1079;
              stan::model::assign(l,
                stan::math::add(lS_a2(dist, time, eta, aux, aux2, pstream__),
                  lh_a2(dist, time, eta, aux, aux2, pstream__)),
                "assigning variable l");
            }
          }
        }
      } else {
        current_statement__ = 1078;
        if (stan::math::logical_eq(status, 2)) {
          current_statement__ = 1076;
          stan::model::assign(l,
            stan::math::log1m_exp(
              lS_a2(dist, time, eta, aux, aux2, pstream__)),
            "assigning variable l");
        } else {
          current_statement__ = 1075;
          if (stan::math::logical_eq(status, 3)) {
            current_statement__ = 1073;
            stan::model::assign(l,
              stan::math::log_diff_exp(
                lS_a2(dist, start_time, eta, aux, aux2, pstream__),
                lS_a2(dist, time, eta, aux, aux2, pstream__)),
              "assigning variable l");
          }
        }
      }
    }
    current_statement__ = 1102;
    if (stan::math::logical_gt(delay_time, 0)) {
      current_statement__ = 1100;
      stan::model::assign(l,
        stan::math::subtract(stan::model::deep_copy(l),
          lS_a2(dist, delay_time, eta, aux, aux2, pstream__)),
        "assigning variable l");
    }
    current_statement__ = 1103;
    return l;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_survival_param final : public model_base_crtp<model_survival_param> {
private:
  int ns_ipd;
  int ns_agd_arm;
  int ns_agd_contrast;
  int ni_ipd;
  int ni_agd_arm;
  int ni_agd_contrast;
  int narm_ipd;
  std::vector<int> ipd_arm;
  std::vector<int> ipd_trt;
  int narm_agd_arm;
  std::vector<int> agd_arm_trt;
  std::vector<int> agd_contrast_trt;
  std::vector<int> agd_contrast_trt_b;
  int nt;
  int nX;
  int nchains;
  int CHAIN_ID;
  std::vector<int> nint_vec;
  int nint_max;
  int int_thin;
  int link;
  Eigen::Matrix<double,-1,1> agd_contrast_y_data__;
  Eigen::Matrix<double,-1,-1> agd_contrast_Sigma_data__;
  int QR;
  Eigen::Matrix<double,-1,-1> X_data__;
  Eigen::Matrix<double,-1,-1> R_inv_data__;
  int has_offset;
  Eigen::Matrix<double,-1,1> offsets_data__;
  int RE;
  std::vector<int> which_RE;
  Eigen::Matrix<double,-1,-1> RE_cor_data__;
  int nodesplit;
  int prior_intercept_dist;
  double prior_intercept_location;
  double prior_intercept_scale;
  double prior_intercept_df;
  int prior_trt_dist;
  double prior_trt_location;
  double prior_trt_scale;
  double prior_trt_df;
  int prior_het_dist;
  int prior_het_type;
  double prior_het_location;
  double prior_het_scale;
  double prior_het_df;
  int prior_reg_dist;
  double prior_reg_location;
  double prior_reg_scale;
  double prior_reg_df;
  int prior_aux_dist;
  double prior_aux_location;
  double prior_aux_scale;
  double prior_aux_df;
  int prior_aux2_dist;
  double prior_aux2_location;
  double prior_aux2_scale;
  double prior_aux2_df;
  int dist;
  std::vector<int> agd_arm_arm;
  Eigen::Matrix<double,-1,1> ipd_time_data__;
  Eigen::Matrix<double,-1,1> ipd_start_time_data__;
  Eigen::Matrix<double,-1,1> ipd_delay_time_data__;
  std::vector<int> ipd_status;
  Eigen::Matrix<double,-1,1> agd_arm_time_data__;
  Eigen::Matrix<double,-1,1> agd_arm_start_time_data__;
  Eigen::Matrix<double,-1,1> agd_arm_delay_time_data__;
  std::vector<int> agd_arm_status;
  int aux_int;
  std::vector<int> aux_id;
  std::vector<int> aux_group;
  int nX_aux;
  Eigen::Matrix<double,-1,-1> X_aux_data__;
  int aux_reg_trt;
  int prior_aux_reg_dist;
  double prior_aux_reg_location;
  double prior_aux_reg_scale;
  double prior_aux_reg_df;
  int nonexp;
  int gengamma;
  int n_aux;
  int n_aux_group;
  std::vector<int> agd_arm_arm2;
  std::vector<int> aux_id_ipd;
  std::vector<int> aux_id_agd_arm;
  std::vector<int> aux_group_ipd;
  std::vector<int> aux_group_agd_arm;
  std::vector<int> ni_aux_group_ipd;
  std::vector<std::vector<int>> wi_aux_group_ipd;
  std::vector<int> ni_aux_group_agd_arm;
  std::vector<std::vector<int>> wi_aux_group_agd_arm;
  Eigen::Matrix<double,-1,-1> Xauxdummy_data__;
  Eigen::Matrix<double,-1,-1> X_aux_ipd_data__;
  Eigen::Matrix<double,-1,-1> X_aux_agd_arm_data__;
  int nint;
  int n_delta;
  Eigen::Matrix<double,-1,1> RE_mu_data__;
  Eigen::Matrix<double,-1,-1> REdummy_data__;
  Eigen::Matrix<double,-1,-1> RE_L_data__;
  Eigen::Matrix<double,-1,1> wdummy_data__;
  std::vector<int> vudummy;
  int RE_L_nz;
  int RE_sparse;
  Eigen::Matrix<double,-1,1> RE_L_w_data__;
  std::vector<int> RE_L_v;
  std::vector<int> RE_L_u;
  int totns;
  std::vector<int> trt;
  Eigen::Matrix<double,-1,-1> Xdummy_data__;
  Eigen::Matrix<double,-1,-1> X_ipd_data__;
  Eigen::Matrix<double,-1,-1> X_agd_arm_data__;
  Eigen::Matrix<double,-1,-1> X_agd_contrast_data__;
  Eigen::Matrix<double,-1,1> odummy_data__;
  Eigen::Matrix<double,-1,1> offset_ipd_data__;
  Eigen::Matrix<double,-1,1> offset_agd_arm_data__;
  Eigen::Matrix<double,-1,1> offset_agd_contrast_data__;
  int n_int_thin;
  Eigen::Matrix<double,-1,-1> inv_Sigma_data__;
  std::vector<int> nc_agd_contrast;
  int tau_1dim__;
  int aux2_1dim__;
  int beta_aux_1dim__;
  int beta_aux_2dim__;
  int d_1dim__;
  int beta_1dim__;
  int eta_agd_contrast_ii_1dim__;
  int shape_1dim__;
  int sdlog_1dim__;
  int sigma_1dim__;
  int k_1dim__;
  int d_aux_1dim__;
  int d_aux_2dim__;
  int log_lik_1dim__;
  int resdev_1dim__;
  int theta_bar_cum_agd_contrast_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> agd_contrast_y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> agd_contrast_Sigma{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> R_inv{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> offsets{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> RE_cor{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ipd_time{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ipd_start_time{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ipd_delay_time{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> agd_arm_time{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> agd_arm_start_time{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> agd_arm_delay_time{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_aux{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Xauxdummy{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_aux_ipd{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_aux_agd_arm{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> RE_mu{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> REdummy{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> RE_L{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> wdummy{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> RE_L_w{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Xdummy{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_ipd{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_agd_arm{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_agd_contrast{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> odummy{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> offset_ipd{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> offset_agd_arm{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> offset_agd_contrast{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> inv_Sigma{nullptr, 0, 0};
public:
  ~model_survival_param() {}
  model_survival_param(stan::io::var_context& context__, unsigned int
                       random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_survival_param_namespace::model_survival_param";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 327;
      context__.validate_dims("data initialization", "ns_ipd", "int",
        std::vector<size_t>{});
      ns_ipd = std::numeric_limits<int>::min();
      current_statement__ = 327;
      ns_ipd = context__.vals_i("ns_ipd")[(1 - 1)];
      current_statement__ = 327;
      stan::math::check_greater_or_equal(function__, "ns_ipd", ns_ipd, 0);
      current_statement__ = 328;
      context__.validate_dims("data initialization", "ns_agd_arm", "int",
        std::vector<size_t>{});
      ns_agd_arm = std::numeric_limits<int>::min();
      current_statement__ = 328;
      ns_agd_arm = context__.vals_i("ns_agd_arm")[(1 - 1)];
      current_statement__ = 328;
      stan::math::check_greater_or_equal(function__, "ns_agd_arm",
        ns_agd_arm, 0);
      current_statement__ = 329;
      context__.validate_dims("data initialization", "ns_agd_contrast",
        "int", std::vector<size_t>{});
      ns_agd_contrast = std::numeric_limits<int>::min();
      current_statement__ = 329;
      ns_agd_contrast = context__.vals_i("ns_agd_contrast")[(1 - 1)];
      current_statement__ = 329;
      stan::math::check_greater_or_equal(function__, "ns_agd_contrast",
        ns_agd_contrast, 0);
      current_statement__ = 330;
      context__.validate_dims("data initialization", "ni_ipd", "int",
        std::vector<size_t>{});
      ni_ipd = std::numeric_limits<int>::min();
      current_statement__ = 330;
      ni_ipd = context__.vals_i("ni_ipd")[(1 - 1)];
      current_statement__ = 330;
      stan::math::check_greater_or_equal(function__, "ni_ipd", ni_ipd, 0);
      current_statement__ = 331;
      context__.validate_dims("data initialization", "ni_agd_arm", "int",
        std::vector<size_t>{});
      ni_agd_arm = std::numeric_limits<int>::min();
      current_statement__ = 331;
      ni_agd_arm = context__.vals_i("ni_agd_arm")[(1 - 1)];
      current_statement__ = 331;
      stan::math::check_greater_or_equal(function__, "ni_agd_arm",
        ni_agd_arm, 0);
      current_statement__ = 332;
      context__.validate_dims("data initialization", "ni_agd_contrast",
        "int", std::vector<size_t>{});
      ni_agd_contrast = std::numeric_limits<int>::min();
      current_statement__ = 332;
      ni_agd_contrast = context__.vals_i("ni_agd_contrast")[(1 - 1)];
      current_statement__ = 332;
      stan::math::check_greater_or_equal(function__, "ni_agd_contrast",
        ni_agd_contrast, 0);
      current_statement__ = 333;
      context__.validate_dims("data initialization", "narm_ipd", "int",
        std::vector<size_t>{});
      narm_ipd = std::numeric_limits<int>::min();
      current_statement__ = 333;
      narm_ipd = context__.vals_i("narm_ipd")[(1 - 1)];
      current_statement__ = 333;
      stan::math::check_greater_or_equal(function__, "narm_ipd", narm_ipd, 0);
      current_statement__ = 334;
      stan::math::validate_non_negative_index("ipd_arm", "ni_ipd", ni_ipd);
      current_statement__ = 335;
      context__.validate_dims("data initialization", "ipd_arm", "int",
        std::vector<size_t>{static_cast<size_t>(ni_ipd)});
      ipd_arm = std::vector<int>(ni_ipd, std::numeric_limits<int>::min());
      current_statement__ = 335;
      ipd_arm = context__.vals_i("ipd_arm");
      current_statement__ = 335;
      stan::math::check_greater_or_equal(function__, "ipd_arm", ipd_arm, 1);
      current_statement__ = 336;
      stan::math::validate_non_negative_index("ipd_trt", "narm_ipd", narm_ipd);
      current_statement__ = 337;
      context__.validate_dims("data initialization", "ipd_trt", "int",
        std::vector<size_t>{static_cast<size_t>(narm_ipd)});
      ipd_trt = std::vector<int>(narm_ipd, std::numeric_limits<int>::min());
      current_statement__ = 337;
      ipd_trt = context__.vals_i("ipd_trt");
      current_statement__ = 337;
      stan::math::check_greater_or_equal(function__, "ipd_trt", ipd_trt, 1);
      current_statement__ = 338;
      context__.validate_dims("data initialization", "narm_agd_arm", "int",
        std::vector<size_t>{});
      narm_agd_arm = std::numeric_limits<int>::min();
      current_statement__ = 338;
      narm_agd_arm = context__.vals_i("narm_agd_arm")[(1 - 1)];
      current_statement__ = 338;
      stan::math::check_greater_or_equal(function__, "narm_agd_arm",
        narm_agd_arm, 0);
      current_statement__ = 339;
      stan::math::validate_non_negative_index("agd_arm_trt", "narm_agd_arm",
        narm_agd_arm);
      current_statement__ = 340;
      context__.validate_dims("data initialization", "agd_arm_trt", "int",
        std::vector<size_t>{static_cast<size_t>(narm_agd_arm)});
      agd_arm_trt = std::vector<int>(narm_agd_arm,
                      std::numeric_limits<int>::min());
      current_statement__ = 340;
      agd_arm_trt = context__.vals_i("agd_arm_trt");
      current_statement__ = 340;
      stan::math::check_greater_or_equal(function__, "agd_arm_trt",
        agd_arm_trt, 1);
      current_statement__ = 341;
      stan::math::validate_non_negative_index("agd_contrast_trt",
        "ni_agd_contrast", ni_agd_contrast);
      current_statement__ = 342;
      context__.validate_dims("data initialization", "agd_contrast_trt",
        "int", std::vector<size_t>{static_cast<size_t>(ni_agd_contrast)});
      agd_contrast_trt = std::vector<int>(ni_agd_contrast,
                           std::numeric_limits<int>::min());
      current_statement__ = 342;
      agd_contrast_trt = context__.vals_i("agd_contrast_trt");
      current_statement__ = 342;
      stan::math::check_greater_or_equal(function__, "agd_contrast_trt",
        agd_contrast_trt, 1);
      current_statement__ = 343;
      stan::math::validate_non_negative_index("agd_contrast_trt_b",
        "ni_agd_contrast", ni_agd_contrast);
      current_statement__ = 344;
      context__.validate_dims("data initialization", "agd_contrast_trt_b",
        "int", std::vector<size_t>{static_cast<size_t>(ni_agd_contrast)});
      agd_contrast_trt_b = std::vector<int>(ni_agd_contrast,
                             std::numeric_limits<int>::min());
      current_statement__ = 344;
      agd_contrast_trt_b = context__.vals_i("agd_contrast_trt_b");
      current_statement__ = 344;
      stan::math::check_greater_or_equal(function__, "agd_contrast_trt_b",
        agd_contrast_trt_b, 1);
      current_statement__ = 345;
      context__.validate_dims("data initialization", "nt", "int",
        std::vector<size_t>{});
      nt = std::numeric_limits<int>::min();
      current_statement__ = 345;
      nt = context__.vals_i("nt")[(1 - 1)];
      current_statement__ = 345;
      stan::math::check_greater_or_equal(function__, "nt", nt, 1);
      current_statement__ = 346;
      context__.validate_dims("data initialization", "nX", "int",
        std::vector<size_t>{});
      nX = std::numeric_limits<int>::min();
      current_statement__ = 346;
      nX = context__.vals_i("nX")[(1 - 1)];
      current_statement__ = 346;
      stan::math::check_greater_or_equal(function__, "nX", nX, 0);
      current_statement__ = 347;
      context__.validate_dims("data initialization", "nchains", "int",
        std::vector<size_t>{});
      nchains = std::numeric_limits<int>::min();
      current_statement__ = 347;
      nchains = context__.vals_i("nchains")[(1 - 1)];
      current_statement__ = 347;
      stan::math::check_greater_or_equal(function__, "nchains", nchains, 1);
      current_statement__ = 348;
      context__.validate_dims("data initialization", "CHAIN_ID", "int",
        std::vector<size_t>{});
      CHAIN_ID = std::numeric_limits<int>::min();
      current_statement__ = 348;
      CHAIN_ID = context__.vals_i("CHAIN_ID")[(1 - 1)];
      current_statement__ = 348;
      stan::math::check_greater_or_equal(function__, "CHAIN_ID", CHAIN_ID, 1);
      current_statement__ = 348;
      stan::math::check_less_or_equal(function__, "CHAIN_ID", CHAIN_ID,
        nchains);
      current_statement__ = 349;
      stan::math::validate_non_negative_index("nint_vec", "nchains", nchains);
      current_statement__ = 350;
      context__.validate_dims("data initialization", "nint_vec", "int",
        std::vector<size_t>{static_cast<size_t>(nchains)});
      nint_vec = std::vector<int>(nchains, std::numeric_limits<int>::min());
      current_statement__ = 350;
      nint_vec = context__.vals_i("nint_vec");
      current_statement__ = 350;
      stan::math::check_greater_or_equal(function__, "nint_vec", nint_vec, 1);
      current_statement__ = 351;
      context__.validate_dims("data initialization", "nint_max", "int",
        std::vector<size_t>{});
      nint_max = std::numeric_limits<int>::min();
      current_statement__ = 351;
      nint_max = context__.vals_i("nint_max")[(1 - 1)];
      current_statement__ = 351;
      stan::math::check_greater_or_equal(function__, "nint_max", nint_max, 1);
      current_statement__ = 352;
      context__.validate_dims("data initialization", "int_thin", "int",
        std::vector<size_t>{});
      int_thin = std::numeric_limits<int>::min();
      current_statement__ = 352;
      int_thin = context__.vals_i("int_thin")[(1 - 1)];
      current_statement__ = 352;
      stan::math::check_greater_or_equal(function__, "int_thin", int_thin, 0);
      current_statement__ = 353;
      context__.validate_dims("data initialization", "link", "int",
        std::vector<size_t>{});
      link = std::numeric_limits<int>::min();
      current_statement__ = 353;
      link = context__.vals_i("link")[(1 - 1)];
      current_statement__ = 353;
      stan::math::check_greater_or_equal(function__, "link", link, 1);
      current_statement__ = 354;
      stan::math::validate_non_negative_index("agd_contrast_y",
        "ni_agd_contrast", ni_agd_contrast);
      current_statement__ = 355;
      context__.validate_dims("data initialization", "agd_contrast_y",
        "double", std::vector<size_t>{static_cast<size_t>(ni_agd_contrast)});
      agd_contrast_y_data__ = Eigen::Matrix<double,-1,1>::Constant(ni_agd_contrast,
                                std::numeric_limits<double>::quiet_NaN());
      new (&agd_contrast_y)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(agd_contrast_y_data__.data(),
        ni_agd_contrast);
      {
        std::vector<local_scalar_t__> agd_contrast_y_flat__;
        current_statement__ = 355;
        agd_contrast_y_flat__ = context__.vals_r("agd_contrast_y");
        current_statement__ = 355;
        pos__ = 1;
        current_statement__ = 355;
        for (int sym1__ = 1; sym1__ <= ni_agd_contrast; ++sym1__) {
          current_statement__ = 355;
          stan::model::assign(agd_contrast_y, agd_contrast_y_flat__[(pos__ -
            1)], "assigning variable agd_contrast_y",
            stan::model::index_uni(sym1__));
          current_statement__ = 355;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 356;
      stan::math::validate_non_negative_index("agd_contrast_Sigma",
        "ni_agd_contrast ? ni_agd_contrast : 1",
        (ni_agd_contrast ? ni_agd_contrast : 1));
      current_statement__ = 356;
      stan::math::validate_non_negative_index("agd_contrast_Sigma",
        "ni_agd_contrast ? ni_agd_contrast : 1",
        (ni_agd_contrast ? ni_agd_contrast : 1));
      current_statement__ = 357;
      context__.validate_dims("data initialization", "agd_contrast_Sigma",
        "double",
        std::vector<size_t>{static_cast<size_t>(
                              (ni_agd_contrast ? ni_agd_contrast : 1)),
          static_cast<size_t>((ni_agd_contrast ? ni_agd_contrast : 1))});
      agd_contrast_Sigma_data__ = Eigen::Matrix<double,-1,-1>::Constant((ni_agd_contrast ? ni_agd_contrast : 1),
                                    (ni_agd_contrast ? ni_agd_contrast : 1),
                                    std::numeric_limits<double>::quiet_NaN());
      new (&agd_contrast_Sigma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(agd_contrast_Sigma_data__.data(),
        (ni_agd_contrast ? ni_agd_contrast : 1),
        (ni_agd_contrast ? ni_agd_contrast : 1));
      {
        std::vector<local_scalar_t__> agd_contrast_Sigma_flat__;
        current_statement__ = 357;
        agd_contrast_Sigma_flat__ = context__.vals_r("agd_contrast_Sigma");
        current_statement__ = 357;
        pos__ = 1;
        current_statement__ = 357;
        for (int sym1__ = 1; sym1__ <=
             (ni_agd_contrast ? ni_agd_contrast : 1); ++sym1__) {
          current_statement__ = 357;
          for (int sym2__ = 1; sym2__ <=
               (ni_agd_contrast ? ni_agd_contrast : 1); ++sym2__) {
            current_statement__ = 357;
            stan::model::assign(agd_contrast_Sigma,
              agd_contrast_Sigma_flat__[(pos__ - 1)],
              "assigning variable agd_contrast_Sigma",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 357;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 357;
      stan::math::check_cov_matrix(function__, "agd_contrast_Sigma",
        agd_contrast_Sigma);
      current_statement__ = 358;
      context__.validate_dims("data initialization", "QR", "int",
        std::vector<size_t>{});
      QR = std::numeric_limits<int>::min();
      current_statement__ = 358;
      QR = context__.vals_i("QR")[(1 - 1)];
      current_statement__ = 358;
      stan::math::check_greater_or_equal(function__, "QR", QR, 0);
      current_statement__ = 358;
      stan::math::check_less_or_equal(function__, "QR", QR, 1);
      current_statement__ = 359;
      stan::math::validate_non_negative_index("X",
        "ni_ipd + nint_max * (ni_agd_arm + ni_agd_contrast)", (ni_ipd +
        (nint_max * (ni_agd_arm + ni_agd_contrast))));
      current_statement__ = 360;
      stan::math::validate_non_negative_index("X", "nX", nX);
      current_statement__ = 361;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>((ni_ipd + (nint_max *
                              (ni_agd_arm + ni_agd_contrast)))),
          static_cast<size_t>(nX)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant((ni_ipd + (nint_max *
                   (ni_agd_arm + ni_agd_contrast))), nX,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(),
        (ni_ipd + (nint_max * (ni_agd_arm + ni_agd_contrast))), nX);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 361;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 361;
        pos__ = 1;
        current_statement__ = 361;
        for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
          current_statement__ = 361;
          for (int sym2__ = 1; sym2__ <= (ni_ipd + (nint_max * (ni_agd_arm +
               ni_agd_contrast))); ++sym2__) {
            current_statement__ = 361;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 361;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 362;
      stan::math::validate_non_negative_index("R_inv", "QR ? nX : 0",
        (QR ? nX : 0));
      current_statement__ = 363;
      stan::math::validate_non_negative_index("R_inv", "QR ? nX : 0",
        (QR ? nX : 0));
      current_statement__ = 364;
      context__.validate_dims("data initialization", "R_inv", "double",
        std::vector<size_t>{static_cast<size_t>((QR ? nX : 0)),
          static_cast<size_t>((QR ? nX : 0))});
      R_inv_data__ = Eigen::Matrix<double,-1,-1>::Constant((QR ? nX : 0),
                       (QR ? nX : 0),
                       std::numeric_limits<double>::quiet_NaN());
      new (&R_inv)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(R_inv_data__.data(),
        (QR ? nX : 0), (QR ? nX : 0));
      {
        std::vector<local_scalar_t__> R_inv_flat__;
        current_statement__ = 364;
        R_inv_flat__ = context__.vals_r("R_inv");
        current_statement__ = 364;
        pos__ = 1;
        current_statement__ = 364;
        for (int sym1__ = 1; sym1__ <= (QR ? nX : 0); ++sym1__) {
          current_statement__ = 364;
          for (int sym2__ = 1; sym2__ <= (QR ? nX : 0); ++sym2__) {
            current_statement__ = 364;
            stan::model::assign(R_inv, R_inv_flat__[(pos__ - 1)],
              "assigning variable R_inv", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 364;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 365;
      context__.validate_dims("data initialization", "has_offset", "int",
        std::vector<size_t>{});
      has_offset = std::numeric_limits<int>::min();
      current_statement__ = 365;
      has_offset = context__.vals_i("has_offset")[(1 - 1)];
      current_statement__ = 365;
      stan::math::check_greater_or_equal(function__, "has_offset",
        has_offset, 0);
      current_statement__ = 365;
      stan::math::check_less_or_equal(function__, "has_offset", has_offset, 1);
      current_statement__ = 366;
      stan::math::validate_non_negative_index("offsets",
        "has_offset ? ni_ipd + nint_max * (ni_agd_arm + ni_agd_contrast) : 0",
        (has_offset ? (ni_ipd + (nint_max * (ni_agd_arm +
        ni_agd_contrast))) : 0));
      current_statement__ = 367;
      context__.validate_dims("data initialization", "offsets", "double",
        std::vector<size_t>{static_cast<size_t>((has_offset ? (ni_ipd +
                              (nint_max * (ni_agd_arm +
                              ni_agd_contrast))) : 0))});
      offsets_data__ = Eigen::Matrix<double,-1,1>::Constant((has_offset ? (ni_ipd
                         + (nint_max * (ni_agd_arm + ni_agd_contrast))) : 0),
                         std::numeric_limits<double>::quiet_NaN());
      new (&offsets)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(offsets_data__.data(),
        (has_offset ? (ni_ipd + (nint_max * (ni_agd_arm +
        ni_agd_contrast))) : 0));
      {
        std::vector<local_scalar_t__> offsets_flat__;
        current_statement__ = 367;
        offsets_flat__ = context__.vals_r("offsets");
        current_statement__ = 367;
        pos__ = 1;
        current_statement__ = 367;
        for (int sym1__ = 1; sym1__ <= (has_offset ? (ni_ipd + (nint_max *
             (ni_agd_arm + ni_agd_contrast))) : 0); ++sym1__) {
          current_statement__ = 367;
          stan::model::assign(offsets, offsets_flat__[(pos__ - 1)],
            "assigning variable offsets", stan::model::index_uni(sym1__));
          current_statement__ = 367;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 368;
      context__.validate_dims("data initialization", "RE", "int",
        std::vector<size_t>{});
      RE = std::numeric_limits<int>::min();
      current_statement__ = 368;
      RE = context__.vals_i("RE")[(1 - 1)];
      current_statement__ = 368;
      stan::math::check_greater_or_equal(function__, "RE", RE, 0);
      current_statement__ = 368;
      stan::math::check_less_or_equal(function__, "RE", RE, 1);
      current_statement__ = 369;
      stan::math::validate_non_negative_index("which_RE",
        "RE ? narm_ipd + narm_agd_arm + ni_agd_contrast : 0",
        (RE ? ((narm_ipd + narm_agd_arm) + ni_agd_contrast) : 0));
      current_statement__ = 370;
      context__.validate_dims("data initialization", "which_RE", "int",
        std::vector<size_t>{static_cast<size_t>((RE ? ((narm_ipd +
                              narm_agd_arm) + ni_agd_contrast) : 0))});
      which_RE = std::vector<int>((RE ? ((narm_ipd + narm_agd_arm) +
                   ni_agd_contrast) : 0), std::numeric_limits<int>::min());
      current_statement__ = 370;
      which_RE = context__.vals_i("which_RE");
      current_statement__ = 370;
      stan::math::check_greater_or_equal(function__, "which_RE", which_RE, 0);
      current_statement__ = 371;
      stan::math::validate_non_negative_index("RE_cor",
        "RE ? max(which_RE) : 1", (RE ? stan::math::max(which_RE) : 1));
      current_statement__ = 371;
      stan::math::validate_non_negative_index("RE_cor",
        "RE ? max(which_RE) : 1", (RE ? stan::math::max(which_RE) : 1));
      current_statement__ = 372;
      context__.validate_dims("data initialization", "RE_cor", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (RE ? stan::math::max(which_RE) : 1)),
          static_cast<size_t>((RE ? stan::math::max(which_RE) : 1))});
      RE_cor_data__ = Eigen::Matrix<double,-1,-1>::Constant((RE ? stan::math::max(
                                                                    which_RE) : 1),
                        (RE ? stan::math::max(which_RE) : 1),
                        std::numeric_limits<double>::quiet_NaN());
      new (&RE_cor)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(RE_cor_data__.data(),
        (RE ? stan::math::max(which_RE) : 1),
        (RE ? stan::math::max(which_RE) : 1));
      {
        std::vector<local_scalar_t__> RE_cor_flat__;
        current_statement__ = 372;
        RE_cor_flat__ = context__.vals_r("RE_cor");
        current_statement__ = 372;
        pos__ = 1;
        current_statement__ = 372;
        for (int sym1__ = 1; sym1__ <=
             (RE ? stan::math::max(which_RE) : 1); ++sym1__) {
          current_statement__ = 372;
          for (int sym2__ = 1; sym2__ <=
               (RE ? stan::math::max(which_RE) : 1); ++sym2__) {
            current_statement__ = 372;
            stan::model::assign(RE_cor, RE_cor_flat__[(pos__ - 1)],
              "assigning variable RE_cor", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 372;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 372;
      stan::math::check_corr_matrix(function__, "RE_cor", RE_cor);
      current_statement__ = 373;
      context__.validate_dims("data initialization", "nodesplit", "int",
        std::vector<size_t>{});
      nodesplit = std::numeric_limits<int>::min();
      current_statement__ = 373;
      nodesplit = context__.vals_i("nodesplit")[(1 - 1)];
      current_statement__ = 373;
      stan::math::check_greater_or_equal(function__, "nodesplit", nodesplit,
        0);
      current_statement__ = 373;
      stan::math::check_less_or_equal(function__, "nodesplit", nodesplit, 1);
      current_statement__ = 374;
      context__.validate_dims("data initialization", "prior_intercept_dist",
        "int", std::vector<size_t>{});
      prior_intercept_dist = std::numeric_limits<int>::min();
      current_statement__ = 374;
      prior_intercept_dist = context__.vals_i("prior_intercept_dist")[(1 -
        1)];
      current_statement__ = 374;
      stan::math::check_greater_or_equal(function__, "prior_intercept_dist",
        prior_intercept_dist, 0);
      current_statement__ = 374;
      stan::math::check_less_or_equal(function__, "prior_intercept_dist",
        prior_intercept_dist, 3);
      current_statement__ = 375;
      context__.validate_dims("data initialization",
        "prior_intercept_location", "double", std::vector<size_t>{});
      prior_intercept_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 375;
      prior_intercept_location = context__.vals_r("prior_intercept_location")[(1
        - 1)];
      current_statement__ = 376;
      context__.validate_dims("data initialization", "prior_intercept_scale",
        "double", std::vector<size_t>{});
      prior_intercept_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 376;
      prior_intercept_scale = context__.vals_r("prior_intercept_scale")[(1 -
        1)];
      current_statement__ = 376;
      stan::math::check_greater_or_equal(function__, "prior_intercept_scale",
        prior_intercept_scale, 0);
      current_statement__ = 377;
      context__.validate_dims("data initialization", "prior_intercept_df",
        "double", std::vector<size_t>{});
      prior_intercept_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 377;
      prior_intercept_df = context__.vals_r("prior_intercept_df")[(1 - 1)];
      current_statement__ = 377;
      stan::math::check_greater_or_equal(function__, "prior_intercept_df",
        prior_intercept_df, 0);
      current_statement__ = 378;
      context__.validate_dims("data initialization", "prior_trt_dist", "int",
        std::vector<size_t>{});
      prior_trt_dist = std::numeric_limits<int>::min();
      current_statement__ = 378;
      prior_trt_dist = context__.vals_i("prior_trt_dist")[(1 - 1)];
      current_statement__ = 378;
      stan::math::check_greater_or_equal(function__, "prior_trt_dist",
        prior_trt_dist, 0);
      current_statement__ = 378;
      stan::math::check_less_or_equal(function__, "prior_trt_dist",
        prior_trt_dist, 3);
      current_statement__ = 379;
      context__.validate_dims("data initialization", "prior_trt_location",
        "double", std::vector<size_t>{});
      prior_trt_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 379;
      prior_trt_location = context__.vals_r("prior_trt_location")[(1 - 1)];
      current_statement__ = 380;
      context__.validate_dims("data initialization", "prior_trt_scale",
        "double", std::vector<size_t>{});
      prior_trt_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 380;
      prior_trt_scale = context__.vals_r("prior_trt_scale")[(1 - 1)];
      current_statement__ = 380;
      stan::math::check_greater_or_equal(function__, "prior_trt_scale",
        prior_trt_scale, 0);
      current_statement__ = 381;
      context__.validate_dims("data initialization", "prior_trt_df",
        "double", std::vector<size_t>{});
      prior_trt_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 381;
      prior_trt_df = context__.vals_r("prior_trt_df")[(1 - 1)];
      current_statement__ = 381;
      stan::math::check_greater_or_equal(function__, "prior_trt_df",
        prior_trt_df, 0);
      current_statement__ = 382;
      context__.validate_dims("data initialization", "prior_het_dist", "int",
        std::vector<size_t>{});
      prior_het_dist = std::numeric_limits<int>::min();
      current_statement__ = 382;
      prior_het_dist = context__.vals_i("prior_het_dist")[(1 - 1)];
      current_statement__ = 382;
      stan::math::check_greater_or_equal(function__, "prior_het_dist",
        prior_het_dist, 0);
      current_statement__ = 382;
      stan::math::check_less_or_equal(function__, "prior_het_dist",
        prior_het_dist, 6);
      current_statement__ = 383;
      context__.validate_dims("data initialization", "prior_het_type", "int",
        std::vector<size_t>{});
      prior_het_type = std::numeric_limits<int>::min();
      current_statement__ = 383;
      prior_het_type = context__.vals_i("prior_het_type")[(1 - 1)];
      current_statement__ = 383;
      stan::math::check_greater_or_equal(function__, "prior_het_type",
        prior_het_type, 1);
      current_statement__ = 383;
      stan::math::check_less_or_equal(function__, "prior_het_type",
        prior_het_type, 3);
      current_statement__ = 384;
      context__.validate_dims("data initialization", "prior_het_location",
        "double", std::vector<size_t>{});
      prior_het_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 384;
      prior_het_location = context__.vals_r("prior_het_location")[(1 - 1)];
      current_statement__ = 385;
      context__.validate_dims("data initialization", "prior_het_scale",
        "double", std::vector<size_t>{});
      prior_het_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 385;
      prior_het_scale = context__.vals_r("prior_het_scale")[(1 - 1)];
      current_statement__ = 385;
      stan::math::check_greater_or_equal(function__, "prior_het_scale",
        prior_het_scale, 0);
      current_statement__ = 386;
      context__.validate_dims("data initialization", "prior_het_df",
        "double", std::vector<size_t>{});
      prior_het_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 386;
      prior_het_df = context__.vals_r("prior_het_df")[(1 - 1)];
      current_statement__ = 386;
      stan::math::check_greater_or_equal(function__, "prior_het_df",
        prior_het_df, 0);
      current_statement__ = 387;
      context__.validate_dims("data initialization", "prior_reg_dist", "int",
        std::vector<size_t>{});
      prior_reg_dist = std::numeric_limits<int>::min();
      current_statement__ = 387;
      prior_reg_dist = context__.vals_i("prior_reg_dist")[(1 - 1)];
      current_statement__ = 387;
      stan::math::check_greater_or_equal(function__, "prior_reg_dist",
        prior_reg_dist, 0);
      current_statement__ = 387;
      stan::math::check_less_or_equal(function__, "prior_reg_dist",
        prior_reg_dist, 3);
      current_statement__ = 388;
      context__.validate_dims("data initialization", "prior_reg_location",
        "double", std::vector<size_t>{});
      prior_reg_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 388;
      prior_reg_location = context__.vals_r("prior_reg_location")[(1 - 1)];
      current_statement__ = 389;
      context__.validate_dims("data initialization", "prior_reg_scale",
        "double", std::vector<size_t>{});
      prior_reg_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 389;
      prior_reg_scale = context__.vals_r("prior_reg_scale")[(1 - 1)];
      current_statement__ = 389;
      stan::math::check_greater_or_equal(function__, "prior_reg_scale",
        prior_reg_scale, 0);
      current_statement__ = 390;
      context__.validate_dims("data initialization", "prior_reg_df",
        "double", std::vector<size_t>{});
      prior_reg_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 390;
      prior_reg_df = context__.vals_r("prior_reg_df")[(1 - 1)];
      current_statement__ = 390;
      stan::math::check_greater_or_equal(function__, "prior_reg_df",
        prior_reg_df, 0);
      current_statement__ = 391;
      context__.validate_dims("data initialization", "prior_aux_dist", "int",
        std::vector<size_t>{});
      prior_aux_dist = std::numeric_limits<int>::min();
      current_statement__ = 391;
      prior_aux_dist = context__.vals_i("prior_aux_dist")[(1 - 1)];
      current_statement__ = 391;
      stan::math::check_greater_or_equal(function__, "prior_aux_dist",
        prior_aux_dist, 0);
      current_statement__ = 391;
      stan::math::check_less_or_equal(function__, "prior_aux_dist",
        prior_aux_dist, 6);
      current_statement__ = 392;
      context__.validate_dims("data initialization", "prior_aux_location",
        "double", std::vector<size_t>{});
      prior_aux_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 392;
      prior_aux_location = context__.vals_r("prior_aux_location")[(1 - 1)];
      current_statement__ = 393;
      context__.validate_dims("data initialization", "prior_aux_scale",
        "double", std::vector<size_t>{});
      prior_aux_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 393;
      prior_aux_scale = context__.vals_r("prior_aux_scale")[(1 - 1)];
      current_statement__ = 393;
      stan::math::check_greater_or_equal(function__, "prior_aux_scale",
        prior_aux_scale, 0);
      current_statement__ = 394;
      context__.validate_dims("data initialization", "prior_aux_df",
        "double", std::vector<size_t>{});
      prior_aux_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 394;
      prior_aux_df = context__.vals_r("prior_aux_df")[(1 - 1)];
      current_statement__ = 394;
      stan::math::check_greater_or_equal(function__, "prior_aux_df",
        prior_aux_df, 0);
      current_statement__ = 395;
      context__.validate_dims("data initialization", "prior_aux2_dist",
        "int", std::vector<size_t>{});
      prior_aux2_dist = std::numeric_limits<int>::min();
      current_statement__ = 395;
      prior_aux2_dist = context__.vals_i("prior_aux2_dist")[(1 - 1)];
      current_statement__ = 395;
      stan::math::check_greater_or_equal(function__, "prior_aux2_dist",
        prior_aux2_dist, 0);
      current_statement__ = 395;
      stan::math::check_less_or_equal(function__, "prior_aux2_dist",
        prior_aux2_dist, 6);
      current_statement__ = 396;
      context__.validate_dims("data initialization", "prior_aux2_location",
        "double", std::vector<size_t>{});
      prior_aux2_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 396;
      prior_aux2_location = context__.vals_r("prior_aux2_location")[(1 - 1)];
      current_statement__ = 397;
      context__.validate_dims("data initialization", "prior_aux2_scale",
        "double", std::vector<size_t>{});
      prior_aux2_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 397;
      prior_aux2_scale = context__.vals_r("prior_aux2_scale")[(1 - 1)];
      current_statement__ = 397;
      stan::math::check_greater_or_equal(function__, "prior_aux2_scale",
        prior_aux2_scale, 0);
      current_statement__ = 398;
      context__.validate_dims("data initialization", "prior_aux2_df",
        "double", std::vector<size_t>{});
      prior_aux2_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 398;
      prior_aux2_df = context__.vals_r("prior_aux2_df")[(1 - 1)];
      current_statement__ = 398;
      stan::math::check_greater_or_equal(function__, "prior_aux2_df",
        prior_aux2_df, 0);
      current_statement__ = 399;
      context__.validate_dims("data initialization", "dist", "int",
        std::vector<size_t>{});
      dist = std::numeric_limits<int>::min();
      current_statement__ = 399;
      dist = context__.vals_i("dist")[(1 - 1)];
      current_statement__ = 399;
      stan::math::check_greater_or_equal(function__, "dist", dist, 1);
      current_statement__ = 400;
      stan::math::validate_non_negative_index("agd_arm_arm", "ni_agd_arm",
        ni_agd_arm);
      current_statement__ = 401;
      context__.validate_dims("data initialization", "agd_arm_arm", "int",
        std::vector<size_t>{static_cast<size_t>(ni_agd_arm)});
      agd_arm_arm = std::vector<int>(ni_agd_arm,
                      std::numeric_limits<int>::min());
      current_statement__ = 401;
      agd_arm_arm = context__.vals_i("agd_arm_arm");
      current_statement__ = 401;
      stan::math::check_greater_or_equal(function__, "agd_arm_arm",
        agd_arm_arm, 1);
      current_statement__ = 402;
      stan::math::validate_non_negative_index("ipd_time", "ni_ipd", ni_ipd);
      current_statement__ = 403;
      context__.validate_dims("data initialization", "ipd_time", "double",
        std::vector<size_t>{static_cast<size_t>(ni_ipd)});
      ipd_time_data__ = Eigen::Matrix<double,-1,1>::Constant(ni_ipd,
                          std::numeric_limits<double>::quiet_NaN());
      new (&ipd_time)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(ipd_time_data__.data(),
        ni_ipd);
      {
        std::vector<local_scalar_t__> ipd_time_flat__;
        current_statement__ = 403;
        ipd_time_flat__ = context__.vals_r("ipd_time");
        current_statement__ = 403;
        pos__ = 1;
        current_statement__ = 403;
        for (int sym1__ = 1; sym1__ <= ni_ipd; ++sym1__) {
          current_statement__ = 403;
          stan::model::assign(ipd_time, ipd_time_flat__[(pos__ - 1)],
            "assigning variable ipd_time", stan::model::index_uni(sym1__));
          current_statement__ = 403;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 404;
      stan::math::validate_non_negative_index("ipd_start_time", "ni_ipd",
        ni_ipd);
      current_statement__ = 405;
      context__.validate_dims("data initialization", "ipd_start_time",
        "double", std::vector<size_t>{static_cast<size_t>(ni_ipd)});
      ipd_start_time_data__ = Eigen::Matrix<double,-1,1>::Constant(ni_ipd,
                                std::numeric_limits<double>::quiet_NaN());
      new (&ipd_start_time)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(ipd_start_time_data__.data(),
        ni_ipd);
      {
        std::vector<local_scalar_t__> ipd_start_time_flat__;
        current_statement__ = 405;
        ipd_start_time_flat__ = context__.vals_r("ipd_start_time");
        current_statement__ = 405;
        pos__ = 1;
        current_statement__ = 405;
        for (int sym1__ = 1; sym1__ <= ni_ipd; ++sym1__) {
          current_statement__ = 405;
          stan::model::assign(ipd_start_time, ipd_start_time_flat__[(pos__ -
            1)], "assigning variable ipd_start_time",
            stan::model::index_uni(sym1__));
          current_statement__ = 405;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 406;
      stan::math::validate_non_negative_index("ipd_delay_time", "ni_ipd",
        ni_ipd);
      current_statement__ = 407;
      context__.validate_dims("data initialization", "ipd_delay_time",
        "double", std::vector<size_t>{static_cast<size_t>(ni_ipd)});
      ipd_delay_time_data__ = Eigen::Matrix<double,-1,1>::Constant(ni_ipd,
                                std::numeric_limits<double>::quiet_NaN());
      new (&ipd_delay_time)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(ipd_delay_time_data__.data(),
        ni_ipd);
      {
        std::vector<local_scalar_t__> ipd_delay_time_flat__;
        current_statement__ = 407;
        ipd_delay_time_flat__ = context__.vals_r("ipd_delay_time");
        current_statement__ = 407;
        pos__ = 1;
        current_statement__ = 407;
        for (int sym1__ = 1; sym1__ <= ni_ipd; ++sym1__) {
          current_statement__ = 407;
          stan::model::assign(ipd_delay_time, ipd_delay_time_flat__[(pos__ -
            1)], "assigning variable ipd_delay_time",
            stan::model::index_uni(sym1__));
          current_statement__ = 407;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 408;
      stan::math::validate_non_negative_index("ipd_status", "ni_ipd", ni_ipd);
      current_statement__ = 409;
      context__.validate_dims("data initialization", "ipd_status", "int",
        std::vector<size_t>{static_cast<size_t>(ni_ipd)});
      ipd_status = std::vector<int>(ni_ipd, std::numeric_limits<int>::min());
      current_statement__ = 409;
      ipd_status = context__.vals_i("ipd_status");
      current_statement__ = 409;
      stan::math::check_greater_or_equal(function__, "ipd_status",
        ipd_status, 0);
      current_statement__ = 409;
      stan::math::check_less_or_equal(function__, "ipd_status", ipd_status, 3);
      current_statement__ = 410;
      stan::math::validate_non_negative_index("agd_arm_time", "ni_agd_arm",
        ni_agd_arm);
      current_statement__ = 411;
      context__.validate_dims("data initialization", "agd_arm_time",
        "double", std::vector<size_t>{static_cast<size_t>(ni_agd_arm)});
      agd_arm_time_data__ = Eigen::Matrix<double,-1,1>::Constant(ni_agd_arm,
                              std::numeric_limits<double>::quiet_NaN());
      new (&agd_arm_time)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(agd_arm_time_data__.data(),
        ni_agd_arm);
      {
        std::vector<local_scalar_t__> agd_arm_time_flat__;
        current_statement__ = 411;
        agd_arm_time_flat__ = context__.vals_r("agd_arm_time");
        current_statement__ = 411;
        pos__ = 1;
        current_statement__ = 411;
        for (int sym1__ = 1; sym1__ <= ni_agd_arm; ++sym1__) {
          current_statement__ = 411;
          stan::model::assign(agd_arm_time, agd_arm_time_flat__[(pos__ - 1)],
            "assigning variable agd_arm_time", stan::model::index_uni(sym1__));
          current_statement__ = 411;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 412;
      stan::math::validate_non_negative_index("agd_arm_start_time",
        "ni_agd_arm", ni_agd_arm);
      current_statement__ = 413;
      context__.validate_dims("data initialization", "agd_arm_start_time",
        "double", std::vector<size_t>{static_cast<size_t>(ni_agd_arm)});
      agd_arm_start_time_data__ = Eigen::Matrix<double,-1,1>::Constant(ni_agd_arm,
                                    std::numeric_limits<double>::quiet_NaN());
      new (&agd_arm_start_time)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(agd_arm_start_time_data__.data(),
        ni_agd_arm);
      {
        std::vector<local_scalar_t__> agd_arm_start_time_flat__;
        current_statement__ = 413;
        agd_arm_start_time_flat__ = context__.vals_r("agd_arm_start_time");
        current_statement__ = 413;
        pos__ = 1;
        current_statement__ = 413;
        for (int sym1__ = 1; sym1__ <= ni_agd_arm; ++sym1__) {
          current_statement__ = 413;
          stan::model::assign(agd_arm_start_time,
            agd_arm_start_time_flat__[(pos__ - 1)],
            "assigning variable agd_arm_start_time",
            stan::model::index_uni(sym1__));
          current_statement__ = 413;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 414;
      stan::math::validate_non_negative_index("agd_arm_delay_time",
        "ni_agd_arm", ni_agd_arm);
      current_statement__ = 415;
      context__.validate_dims("data initialization", "agd_arm_delay_time",
        "double", std::vector<size_t>{static_cast<size_t>(ni_agd_arm)});
      agd_arm_delay_time_data__ = Eigen::Matrix<double,-1,1>::Constant(ni_agd_arm,
                                    std::numeric_limits<double>::quiet_NaN());
      new (&agd_arm_delay_time)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(agd_arm_delay_time_data__.data(),
        ni_agd_arm);
      {
        std::vector<local_scalar_t__> agd_arm_delay_time_flat__;
        current_statement__ = 415;
        agd_arm_delay_time_flat__ = context__.vals_r("agd_arm_delay_time");
        current_statement__ = 415;
        pos__ = 1;
        current_statement__ = 415;
        for (int sym1__ = 1; sym1__ <= ni_agd_arm; ++sym1__) {
          current_statement__ = 415;
          stan::model::assign(agd_arm_delay_time,
            agd_arm_delay_time_flat__[(pos__ - 1)],
            "assigning variable agd_arm_delay_time",
            stan::model::index_uni(sym1__));
          current_statement__ = 415;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 416;
      stan::math::validate_non_negative_index("agd_arm_status", "ni_agd_arm",
        ni_agd_arm);
      current_statement__ = 417;
      context__.validate_dims("data initialization", "agd_arm_status", "int",
        std::vector<size_t>{static_cast<size_t>(ni_agd_arm)});
      agd_arm_status = std::vector<int>(ni_agd_arm,
                         std::numeric_limits<int>::min());
      current_statement__ = 417;
      agd_arm_status = context__.vals_i("agd_arm_status");
      current_statement__ = 417;
      stan::math::check_greater_or_equal(function__, "agd_arm_status",
        agd_arm_status, 0);
      current_statement__ = 417;
      stan::math::check_less_or_equal(function__, "agd_arm_status",
        agd_arm_status, 3);
      current_statement__ = 418;
      context__.validate_dims("data initialization", "aux_int", "int",
        std::vector<size_t>{});
      aux_int = std::numeric_limits<int>::min();
      current_statement__ = 418;
      aux_int = context__.vals_i("aux_int")[(1 - 1)];
      current_statement__ = 418;
      stan::math::check_greater_or_equal(function__, "aux_int", aux_int, 0);
      current_statement__ = 418;
      stan::math::check_less_or_equal(function__, "aux_int", aux_int, 1);
      current_statement__ = 419;
      stan::math::validate_non_negative_index("aux_id",
        "ni_ipd + ni_agd_arm * (aux_int ? nint_max : 1)", (ni_ipd +
        (ni_agd_arm * (aux_int ? nint_max : 1))));
      current_statement__ = 420;
      context__.validate_dims("data initialization", "aux_id", "int",
        std::vector<size_t>{static_cast<size_t>((ni_ipd + (ni_agd_arm *
                              (aux_int ? nint_max : 1))))});
      aux_id = std::vector<int>((ni_ipd + (ni_agd_arm *
                 (aux_int ? nint_max : 1))), std::numeric_limits<int>::min());
      current_statement__ = 420;
      aux_id = context__.vals_i("aux_id");
      current_statement__ = 420;
      stan::math::check_greater_or_equal(function__, "aux_id", aux_id, 1);
      current_statement__ = 421;
      stan::math::validate_non_negative_index("aux_group",
        "ni_ipd + ni_agd_arm * (aux_int ? nint_max : 1)", (ni_ipd +
        (ni_agd_arm * (aux_int ? nint_max : 1))));
      current_statement__ = 422;
      context__.validate_dims("data initialization", "aux_group", "int",
        std::vector<size_t>{static_cast<size_t>((ni_ipd + (ni_agd_arm *
                              (aux_int ? nint_max : 1))))});
      aux_group = std::vector<int>((ni_ipd + (ni_agd_arm *
                    (aux_int ? nint_max : 1))),
                    std::numeric_limits<int>::min());
      current_statement__ = 422;
      aux_group = context__.vals_i("aux_group");
      current_statement__ = 422;
      stan::math::check_greater_or_equal(function__, "aux_group", aux_group,
        1);
      current_statement__ = 423;
      context__.validate_dims("data initialization", "nX_aux", "int",
        std::vector<size_t>{});
      nX_aux = std::numeric_limits<int>::min();
      current_statement__ = 423;
      nX_aux = context__.vals_i("nX_aux")[(1 - 1)];
      current_statement__ = 423;
      stan::math::check_greater_or_equal(function__, "nX_aux", nX_aux, 0);
      current_statement__ = 424;
      stan::math::validate_non_negative_index("X_aux",
        "ni_ipd + (aux_int ? nint_max : 1) * ni_agd_arm", (ni_ipd +
        ((aux_int ? nint_max : 1) * ni_agd_arm)));
      current_statement__ = 425;
      stan::math::validate_non_negative_index("X_aux", "nX_aux", nX_aux);
      current_statement__ = 426;
      context__.validate_dims("data initialization", "X_aux", "double",
        std::vector<size_t>{static_cast<size_t>((ni_ipd +
                              ((aux_int ? nint_max : 1) * ni_agd_arm))),
          static_cast<size_t>(nX_aux)});
      X_aux_data__ = Eigen::Matrix<double,-1,-1>::Constant((ni_ipd +
                       ((aux_int ? nint_max : 1) * ni_agd_arm)), nX_aux,
                       std::numeric_limits<double>::quiet_NaN());
      new (&X_aux)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_aux_data__.data(), (ni_ipd
        + ((aux_int ? nint_max : 1) * ni_agd_arm)), nX_aux);
      {
        std::vector<local_scalar_t__> X_aux_flat__;
        current_statement__ = 426;
        X_aux_flat__ = context__.vals_r("X_aux");
        current_statement__ = 426;
        pos__ = 1;
        current_statement__ = 426;
        for (int sym1__ = 1; sym1__ <= nX_aux; ++sym1__) {
          current_statement__ = 426;
          for (int sym2__ = 1; sym2__ <= (ni_ipd + ((aux_int ? nint_max : 1)
               * ni_agd_arm)); ++sym2__) {
            current_statement__ = 426;
            stan::model::assign(X_aux, X_aux_flat__[(pos__ - 1)],
              "assigning variable X_aux", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 426;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 427;
      context__.validate_dims("data initialization", "aux_reg_trt", "int",
        std::vector<size_t>{});
      aux_reg_trt = std::numeric_limits<int>::min();
      current_statement__ = 427;
      aux_reg_trt = context__.vals_i("aux_reg_trt")[(1 - 1)];
      current_statement__ = 427;
      stan::math::check_greater_or_equal(function__, "aux_reg_trt",
        aux_reg_trt, 0);
      current_statement__ = 427;
      stan::math::check_less_or_equal(function__, "aux_reg_trt", aux_reg_trt,
        1);
      current_statement__ = 428;
      context__.validate_dims("data initialization", "prior_aux_reg_dist",
        "int", std::vector<size_t>{});
      prior_aux_reg_dist = std::numeric_limits<int>::min();
      current_statement__ = 428;
      prior_aux_reg_dist = context__.vals_i("prior_aux_reg_dist")[(1 - 1)];
      current_statement__ = 428;
      stan::math::check_greater_or_equal(function__, "prior_aux_reg_dist",
        prior_aux_reg_dist, 0);
      current_statement__ = 428;
      stan::math::check_less_or_equal(function__, "prior_aux_reg_dist",
        prior_aux_reg_dist, 6);
      current_statement__ = 429;
      context__.validate_dims("data initialization",
        "prior_aux_reg_location", "double", std::vector<size_t>{});
      prior_aux_reg_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 429;
      prior_aux_reg_location = context__.vals_r("prior_aux_reg_location")[(1
        - 1)];
      current_statement__ = 429;
      stan::math::check_greater_or_equal(function__,
        "prior_aux_reg_location", prior_aux_reg_location, 0);
      current_statement__ = 430;
      context__.validate_dims("data initialization", "prior_aux_reg_scale",
        "double", std::vector<size_t>{});
      prior_aux_reg_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 430;
      prior_aux_reg_scale = context__.vals_r("prior_aux_reg_scale")[(1 - 1)];
      current_statement__ = 430;
      stan::math::check_greater_or_equal(function__, "prior_aux_reg_scale",
        prior_aux_reg_scale, 0);
      current_statement__ = 431;
      context__.validate_dims("data initialization", "prior_aux_reg_df",
        "double", std::vector<size_t>{});
      prior_aux_reg_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 431;
      prior_aux_reg_df = context__.vals_r("prior_aux_reg_df")[(1 - 1)];
      current_statement__ = 431;
      stan::math::check_greater_or_equal(function__, "prior_aux_reg_df",
        prior_aux_reg_df, 0);
      current_statement__ = 432;
      nonexp = std::numeric_limits<int>::min();
      current_statement__ = 432;
      nonexp = ((stan::math::primitive_value(stan::math::logical_eq(dist, 1))
        ||
        stan::math::primitive_value(stan::math::logical_eq(dist, 4))) ? 0 : 1);
      current_statement__ = 433;
      gengamma = std::numeric_limits<int>::min();
      current_statement__ = 433;
      gengamma = (stan::math::logical_gte(dist, 9) ? 1 : 0);
      current_statement__ = 434;
      n_aux = std::numeric_limits<int>::min();
      current_statement__ = 434;
      n_aux = (nonexp ? stan::math::max(aux_id) : 0);
      current_statement__ = 435;
      n_aux_group = std::numeric_limits<int>::min();
      current_statement__ = 435;
      n_aux_group = (nonexp ? stan::math::max(aux_group) : 0);
      current_statement__ = 436;
      stan::math::validate_non_negative_index("agd_arm_arm2", "ni_agd_arm",
        ni_agd_arm);
      current_statement__ = 437;
      agd_arm_arm2 = std::vector<int>(ni_agd_arm,
                       std::numeric_limits<int>::min());
      current_statement__ = 438;
      stan::math::validate_non_negative_index("aux_id_ipd", "ni_ipd", ni_ipd);
      current_statement__ = 439;
      aux_id_ipd = std::vector<int>(ni_ipd, std::numeric_limits<int>::min());
      current_statement__ = 439;
      stan::model::assign(aux_id_ipd,
        stan::model::rvalue(aux_id, "aux_id",
          stan::model::index_min_max(1, ni_ipd)),
        "assigning variable aux_id_ipd");
      current_statement__ = 440;
      stan::math::validate_non_negative_index("aux_id_agd_arm",
        "ni_agd_arm * (aux_int ? nint_max : 1)", (ni_agd_arm *
        (aux_int ? nint_max : 1)));
      current_statement__ = 441;
      aux_id_agd_arm = std::vector<int>((ni_agd_arm *
                         (aux_int ? nint_max : 1)),
                         std::numeric_limits<int>::min());
      current_statement__ = 441;
      stan::model::assign(aux_id_agd_arm,
        stan::model::rvalue(aux_id, "aux_id",
          stan::model::index_min_max((ni_ipd + 1), (ni_ipd + (ni_agd_arm *
            (aux_int ? nint_max : 1))))), "assigning variable aux_id_agd_arm");
      current_statement__ = 442;
      stan::math::validate_non_negative_index("aux_group_ipd", "ni_ipd",
        ni_ipd);
      current_statement__ = 443;
      aux_group_ipd = std::vector<int>(ni_ipd,
                        std::numeric_limits<int>::min());
      current_statement__ = 443;
      stan::model::assign(aux_group_ipd,
        stan::model::rvalue(aux_group, "aux_group",
          stan::model::index_min_max(1, ni_ipd)),
        "assigning variable aux_group_ipd");
      current_statement__ = 444;
      stan::math::validate_non_negative_index("aux_group_agd_arm",
        "ni_agd_arm * (aux_int ? nint_max : 1)", (ni_agd_arm *
        (aux_int ? nint_max : 1)));
      current_statement__ = 445;
      aux_group_agd_arm = std::vector<int>((ni_agd_arm *
                            (aux_int ? nint_max : 1)),
                            std::numeric_limits<int>::min());
      current_statement__ = 445;
      stan::model::assign(aux_group_agd_arm,
        stan::model::rvalue(aux_group, "aux_group",
          stan::model::index_min_max((ni_ipd + 1), (ni_ipd + (ni_agd_arm *
            (aux_int ? nint_max : 1))))),
        "assigning variable aux_group_agd_arm");
      current_statement__ = 446;
      stan::math::validate_non_negative_index("ni_aux_group_ipd",
        "(nonexp && aux_int == 0) ? n_aux_group : 1",
        ((stan::math::primitive_value(nonexp) &&
        stan::math::primitive_value(stan::math::logical_eq(aux_int, 0))) ? n_aux_group : 1));
      current_statement__ = 447;
      ni_aux_group_ipd = std::vector<int>(((stan::math::primitive_value(
                                              nonexp) &&
                           stan::math::primitive_value(
                             stan::math::logical_eq(aux_int, 0))) ? n_aux_group : 1),
                           std::numeric_limits<int>::min());
      current_statement__ = 447;
      stan::model::assign(ni_aux_group_ipd,
        ((stan::math::primitive_value(nonexp) &&
        stan::math::primitive_value(stan::math::logical_eq(aux_int, 0))) ? 
        nwhich_all(aux_group_ipd, n_aux_group, pstream__) : std::vector<int>{0}),
        "assigning variable ni_aux_group_ipd");
      current_statement__ = 448;
      stan::math::validate_non_negative_index("wi_aux_group_ipd",
        "(nonexp && aux_int == 0) ? n_aux_group : 0",
        ((stan::math::primitive_value(nonexp) &&
        stan::math::primitive_value(stan::math::logical_eq(aux_int, 0))) ? n_aux_group : 0));
      current_statement__ = 449;
      stan::math::validate_non_negative_index("wi_aux_group_ipd",
        "(nonexp && aux_int == 0) ? max(ni_aux_group_ipd) : 0",
        ((stan::math::primitive_value(nonexp) &&
        stan::math::primitive_value(stan::math::logical_eq(aux_int, 0))) ? 
        stan::math::max(ni_aux_group_ipd) : 0));
      current_statement__ = 450;
      wi_aux_group_ipd = std::vector<std::vector<int>>(((stan::math::primitive_value(
                                                           nonexp) &&
                           stan::math::primitive_value(
                             stan::math::logical_eq(aux_int, 0))) ? n_aux_group : 0),
                           std::vector<int>(((stan::math::primitive_value(
                                                nonexp) &&
                             stan::math::primitive_value(
                               stan::math::logical_eq(aux_int, 0))) ? 
                             stan::math::max(ni_aux_group_ipd) : 0),
                             std::numeric_limits<int>::min()));
      current_statement__ = 451;
      stan::math::validate_non_negative_index("ni_aux_group_agd_arm",
        "(nonexp && aux_int == 0) ? n_aux_group : 1",
        ((stan::math::primitive_value(nonexp) &&
        stan::math::primitive_value(stan::math::logical_eq(aux_int, 0))) ? n_aux_group : 1));
      current_statement__ = 452;
      ni_aux_group_agd_arm = std::vector<int>(((stan::math::primitive_value(
                                                  nonexp) &&
                               stan::math::primitive_value(
                                 stan::math::logical_eq(aux_int, 0))) ? n_aux_group : 1),
                               std::numeric_limits<int>::min());
      current_statement__ = 452;
      stan::model::assign(ni_aux_group_agd_arm,
        ((stan::math::primitive_value(nonexp) &&
        stan::math::primitive_value(stan::math::logical_eq(aux_int, 0))) ? 
        nwhich_all(aux_group_agd_arm, n_aux_group, pstream__) : std::vector<
                                                                  int>{0}),
        "assigning variable ni_aux_group_agd_arm");
      current_statement__ = 453;
      stan::math::validate_non_negative_index("wi_aux_group_agd_arm",
        "(nonexp && aux_int == 0) ? n_aux_group : 0",
        ((stan::math::primitive_value(nonexp) &&
        stan::math::primitive_value(stan::math::logical_eq(aux_int, 0))) ? n_aux_group : 0));
      current_statement__ = 454;
      stan::math::validate_non_negative_index("wi_aux_group_agd_arm",
        "(nonexp && aux_int == 0) ? max(ni_aux_group_agd_arm) : 0",
        ((stan::math::primitive_value(nonexp) &&
        stan::math::primitive_value(stan::math::logical_eq(aux_int, 0))) ? 
        stan::math::max(ni_aux_group_agd_arm) : 0));
      current_statement__ = 455;
      wi_aux_group_agd_arm = std::vector<std::vector<int>>(((stan::math::primitive_value(
                                                               nonexp) &&
                               stan::math::primitive_value(
                                 stan::math::logical_eq(aux_int, 0))) ? n_aux_group : 0),
                               std::vector<int>(((stan::math::primitive_value(
                                                    nonexp) &&
                                 stan::math::primitive_value(
                                   stan::math::logical_eq(aux_int, 0))) ? 
                                 stan::math::max(ni_aux_group_agd_arm) : 0),
                                 std::numeric_limits<int>::min()));
      current_statement__ = 456;
      stan::math::validate_non_negative_index("Xauxdummy", "nX_aux", nX_aux);
      current_statement__ = 457;
      Xauxdummy_data__ = Eigen::Matrix<double,-1,-1>::Constant(0, nX_aux,
                           std::numeric_limits<double>::quiet_NaN());
      new (&Xauxdummy)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(Xauxdummy_data__.data(), 0,
        nX_aux);
      current_statement__ = 458;
      stan::math::validate_non_negative_index("X_aux_ipd", "ni_ipd", ni_ipd);
      current_statement__ = 459;
      stan::math::validate_non_negative_index("X_aux_ipd", "nX_aux", nX_aux);
      current_statement__ = 460;
      X_aux_ipd_data__ = Eigen::Matrix<double,-1,-1>::Constant(ni_ipd,
                           nX_aux, std::numeric_limits<double>::quiet_NaN());
      new (&X_aux_ipd)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_aux_ipd_data__.data(),
        ni_ipd, nX_aux);
      current_statement__ = 460;
      stan::model::assign(X_aux_ipd,
        (ni_ipd ? stan::math::eval(
                    stan::model::rvalue(X_aux, "X_aux",
                      stan::model::index_min_max(1, ni_ipd))) : stan::math::eval(
                                                                  Xauxdummy)),
        "assigning variable X_aux_ipd");
      current_statement__ = 461;
      stan::math::validate_non_negative_index("X_aux_agd_arm",
        "(aux_int ? nint_max : 1) * ni_agd_arm", ((aux_int ? nint_max : 1) *
        ni_agd_arm));
      current_statement__ = 462;
      stan::math::validate_non_negative_index("X_aux_agd_arm", "nX_aux",
        nX_aux);
      current_statement__ = 463;
      X_aux_agd_arm_data__ = Eigen::Matrix<double,-1,-1>::Constant(((aux_int ? nint_max : 1)
                               * ni_agd_arm), nX_aux,
                               std::numeric_limits<double>::quiet_NaN());
      new (&X_aux_agd_arm)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_aux_agd_arm_data__.data(),
        ((aux_int ? nint_max : 1) * ni_agd_arm), nX_aux);
      current_statement__ = 463;
      stan::model::assign(X_aux_agd_arm,
        (ni_agd_arm ? stan::math::eval(
                        stan::model::rvalue(X_aux, "X_aux",
                          stan::model::index_min_max((ni_ipd + 1), (ni_ipd +
                            ((aux_int ? nint_max : 1) * ni_agd_arm))))) : 
        stan::math::eval(Xauxdummy)), "assigning variable X_aux_agd_arm");
      current_statement__ = 464;
      nint = std::numeric_limits<int>::min();
      current_statement__ = 464;
      nint = stan::model::rvalue(nint_vec, "nint_vec",
               stan::model::index_uni(CHAIN_ID));
      current_statement__ = 465;
      n_delta = std::numeric_limits<int>::min();
      current_statement__ = 465;
      n_delta = (RE ? stan::math::max(which_RE) : 0);
      current_statement__ = 466;
      stan::math::validate_non_negative_index("RE_mu", "n_delta", n_delta);
      current_statement__ = 467;
      RE_mu_data__ = Eigen::Matrix<double,-1,1>::Constant(n_delta,
                       std::numeric_limits<double>::quiet_NaN());
      new (&RE_mu)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(RE_mu_data__.data(), n_delta);
      current_statement__ = 467;
      stan::model::assign(RE_mu, stan::math::rep_vector(0, n_delta),
        "assigning variable RE_mu");
      current_statement__ = 468;
      REdummy_data__ = Eigen::Matrix<double,-1,-1>::Constant(0, 0,
                         std::numeric_limits<double>::quiet_NaN());
      new (&REdummy)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(REdummy_data__.data(), 0, 0);
      current_statement__ = 469;
      stan::math::validate_non_negative_index("RE_L", "n_delta", n_delta);
      current_statement__ = 469;
      stan::math::validate_non_negative_index("RE_L", "n_delta", n_delta);
      current_statement__ = 470;
      RE_L_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_delta, n_delta,
                      std::numeric_limits<double>::quiet_NaN());
      new (&RE_L) Eigen::Map<Eigen::Matrix<double,-1,-1>>(RE_L_data__.data(),
        n_delta, n_delta);
      current_statement__ = 470;
      stan::model::assign(RE_L,
        (n_delta ? stan::math::eval(stan::math::cholesky_decompose(RE_cor)) : 
        stan::math::eval(REdummy)), "assigning variable RE_L");
      current_statement__ = 471;
      wdummy_data__ = Eigen::Matrix<double,-1,1>::Constant(0,
                        std::numeric_limits<double>::quiet_NaN());
      new (&wdummy)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(wdummy_data__.data(), 0);
      current_statement__ = 472;
      vudummy = std::vector<int>(0, std::numeric_limits<int>::min());
      current_statement__ = 473;
      RE_L_nz = std::numeric_limits<int>::min();
      current_statement__ = 473;
      RE_L_nz = count_nonzero(RE_L, pstream__);
      current_statement__ = 474;
      RE_sparse = std::numeric_limits<int>::min();
      current_statement__ = 474;
      RE_sparse = stan::math::logical_lte(((RE_L_nz * 1.0) /
                    stan::math::num_elements(RE_L)), 0.1);
      current_statement__ = 475;
      stan::math::validate_non_negative_index("RE_L_w",
        "RE_sparse ? RE_L_nz : 0", (RE_sparse ? RE_L_nz : 0));
      current_statement__ = 476;
      RE_L_w_data__ = Eigen::Matrix<double,-1,1>::Constant((RE_sparse ? RE_L_nz : 0),
                        std::numeric_limits<double>::quiet_NaN());
      new (&RE_L_w)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(RE_L_w_data__.data(),
        (RE_sparse ? RE_L_nz : 0));
      current_statement__ = 476;
      stan::model::assign(RE_L_w,
        (RE_sparse ? stan::math::eval(stan::math::csr_extract_w(RE_L)) : 
        stan::math::eval(wdummy)), "assigning variable RE_L_w");
      current_statement__ = 477;
      stan::math::validate_non_negative_index("RE_L_v",
        "RE_sparse ? RE_L_nz : 0", (RE_sparse ? RE_L_nz : 0));
      current_statement__ = 478;
      RE_L_v = std::vector<int>((RE_sparse ? RE_L_nz : 0),
                 std::numeric_limits<int>::min());
      current_statement__ = 478;
      stan::model::assign(RE_L_v,
        (RE_sparse ? stan::math::csr_extract_v(RE_L) : vudummy),
        "assigning variable RE_L_v");
      current_statement__ = 479;
      stan::math::validate_non_negative_index("RE_L_u",
        "RE_sparse ? n_delta + 1 : 0", (RE_sparse ? (n_delta + 1) : 0));
      current_statement__ = 480;
      RE_L_u = std::vector<int>((RE_sparse ? (n_delta + 1) : 0),
                 std::numeric_limits<int>::min());
      current_statement__ = 480;
      stan::model::assign(RE_L_u,
        (RE_sparse ? stan::math::csr_extract_u(RE_L) : vudummy),
        "assigning variable RE_L_u");
      current_statement__ = 481;
      totns = std::numeric_limits<int>::min();
      current_statement__ = 481;
      totns = (ns_ipd + ns_agd_arm);
      current_statement__ = 482;
      stan::math::validate_non_negative_index("trt",
        "narm_ipd + narm_agd_arm + ni_agd_contrast", ((narm_ipd +
        narm_agd_arm) + ni_agd_contrast));
      current_statement__ = 483;
      trt = std::vector<int>(((narm_ipd + narm_agd_arm) + ni_agd_contrast),
              std::numeric_limits<int>::min());
      current_statement__ = 483;
      stan::model::assign(trt,
        stan::math::append_array(
          stan::math::append_array(ipd_trt, agd_arm_trt), agd_contrast_trt),
        "assigning variable trt");
      current_statement__ = 484;
      stan::math::validate_non_negative_index("Xdummy", "nX", nX);
      current_statement__ = 485;
      Xdummy_data__ = Eigen::Matrix<double,-1,-1>::Constant(0, nX,
                        std::numeric_limits<double>::quiet_NaN());
      new (&Xdummy)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(Xdummy_data__.data(), 0, nX);
      current_statement__ = 486;
      stan::math::validate_non_negative_index("X_ipd", "ni_ipd", ni_ipd);
      current_statement__ = 487;
      stan::math::validate_non_negative_index("X_ipd", "nX", nX);
      current_statement__ = 488;
      X_ipd_data__ = Eigen::Matrix<double,-1,-1>::Constant(ni_ipd, nX,
                       std::numeric_limits<double>::quiet_NaN());
      new (&X_ipd)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_ipd_data__.data(), ni_ipd,
        nX);
      current_statement__ = 488;
      stan::model::assign(X_ipd,
        (ni_ipd ? stan::math::eval(
                    stan::model::rvalue(X, "X",
                      stan::model::index_min_max(1, ni_ipd))) : stan::math::eval(
                                                                  Xdummy)),
        "assigning variable X_ipd");
      current_statement__ = 489;
      stan::math::validate_non_negative_index("X_agd_arm",
        "nint_max * ni_agd_arm", (nint_max * ni_agd_arm));
      current_statement__ = 490;
      stan::math::validate_non_negative_index("X_agd_arm", "nX", nX);
      current_statement__ = 491;
      X_agd_arm_data__ = Eigen::Matrix<double,-1,-1>::Constant((nint_max *
                           ni_agd_arm), nX,
                           std::numeric_limits<double>::quiet_NaN());
      new (&X_agd_arm)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_agd_arm_data__.data(),
        (nint_max * ni_agd_arm), nX);
      current_statement__ = 491;
      stan::model::assign(X_agd_arm,
        (ni_agd_arm ? stan::math::eval(
                        stan::model::rvalue(X, "X",
                          stan::model::index_min_max((ni_ipd + 1), (ni_ipd +
                            (nint_max * ni_agd_arm))))) : stan::math::eval(
                                                            Xdummy)),
        "assigning variable X_agd_arm");
      current_statement__ = 492;
      stan::math::validate_non_negative_index("X_agd_contrast",
        "nint_max * ni_agd_contrast", (nint_max * ni_agd_contrast));
      current_statement__ = 493;
      stan::math::validate_non_negative_index("X_agd_contrast", "nX", nX);
      current_statement__ = 494;
      X_agd_contrast_data__ = Eigen::Matrix<double,-1,-1>::Constant((nint_max
                                * ni_agd_contrast), nX,
                                std::numeric_limits<double>::quiet_NaN());
      new (&X_agd_contrast)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_agd_contrast_data__.data(),
        (nint_max * ni_agd_contrast), nX);
      current_statement__ = 494;
      stan::model::assign(X_agd_contrast,
        (ni_agd_contrast ? stan::math::eval(
                             stan::model::rvalue(X, "X",
                               stan::model::index_min_max(((ni_ipd +
                                 (nint_max * ni_agd_arm)) + 1), (ni_ipd +
                                 (nint_max * (ni_agd_arm + ni_agd_contrast)))))) : 
        stan::math::eval(Xdummy)), "assigning variable X_agd_contrast");
      current_statement__ = 495;
      odummy_data__ = Eigen::Matrix<double,-1,1>::Constant(0,
                        std::numeric_limits<double>::quiet_NaN());
      new (&odummy)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(odummy_data__.data(), 0);
      current_statement__ = 496;
      stan::math::validate_non_negative_index("offset_ipd",
        "has_offset && ni_ipd ? ni_ipd : 0",
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_ipd)) ? ni_ipd : 0));
      current_statement__ = 497;
      offset_ipd_data__ = Eigen::Matrix<double,-1,1>::Constant(((stan::math::primitive_value(
                                                                   has_offset)
                            &&
                            stan::math::primitive_value(ni_ipd)) ? ni_ipd : 0),
                            std::numeric_limits<double>::quiet_NaN());
      new (&offset_ipd)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(offset_ipd_data__.data(),
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_ipd)) ? ni_ipd : 0));
      current_statement__ = 497;
      stan::model::assign(offset_ipd,
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_ipd)) ? stan::math::eval(
                                                 stan::model::rvalue(offsets,
                                                   "offsets",
                                                   stan::model::index_min_max(
                                                     1, ni_ipd))) : stan::math::eval(
                                                                    odummy)),
        "assigning variable offset_ipd");
      current_statement__ = 498;
      stan::math::validate_non_negative_index("offset_agd_arm",
        "has_offset && ni_agd_arm ? nint_max * ni_agd_arm : 0",
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_arm)) ? (nint_max *
        ni_agd_arm) : 0));
      current_statement__ = 499;
      offset_agd_arm_data__ = Eigen::Matrix<double,-1,1>::Constant(((
                                stan::math::primitive_value(has_offset) &&
                                stan::math::primitive_value(ni_agd_arm)) ? (nint_max
                                * ni_agd_arm) : 0),
                                std::numeric_limits<double>::quiet_NaN());
      new (&offset_agd_arm)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(offset_agd_arm_data__.data(),
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_arm)) ? (nint_max *
        ni_agd_arm) : 0));
      current_statement__ = 499;
      stan::model::assign(offset_agd_arm,
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_arm)) ? stan::math::eval(
                                                     stan::model::rvalue(
                                                       offsets, "offsets",
                                                       stan::model::index_min_max(
                                                         (ni_ipd + 1),
                                                         (ni_ipd + (nint_max
                                                         * ni_agd_arm))))) : 
        stan::math::eval(odummy)), "assigning variable offset_agd_arm");
      current_statement__ = 500;
      stan::math::validate_non_negative_index("offset_agd_contrast",
        "has_offset && ni_agd_contrast ? nint_max * ni_agd_contrast : 0",
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_contrast)) ? (nint_max *
        ni_agd_contrast) : 0));
      current_statement__ = 501;
      offset_agd_contrast_data__ = Eigen::Matrix<double,-1,1>::Constant(((
                                     stan::math::primitive_value(has_offset)
                                     &&
                                     stan::math::primitive_value(
                                       ni_agd_contrast)) ? (nint_max *
                                     ni_agd_contrast) : 0),
                                     std::numeric_limits<double>::quiet_NaN());
      new (&offset_agd_contrast)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(offset_agd_contrast_data__.data(),
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_contrast)) ? (nint_max *
        ni_agd_contrast) : 0));
      current_statement__ = 501;
      stan::model::assign(offset_agd_contrast,
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_contrast)) ? stan::math::eval(
                                                          stan::model::rvalue(
                                                            offsets,
                                                            "offsets",
                                                            stan::model::index_min_max(
                                                              ((ni_ipd +
                                                              (nint_max *
                                                              ni_agd_arm)) +
                                                              1), (ni_ipd +
                                                              (nint_max *
                                                              (ni_agd_arm +
                                                              ni_agd_contrast)))))) : 
        stan::math::eval(odummy)), "assigning variable offset_agd_contrast");
      current_statement__ = 502;
      n_int_thin = std::numeric_limits<int>::min();
      current_statement__ = 502;
      n_int_thin = ((stan::math::primitive_value(
                       stan::math::logical_gt(nint_max, 1))
        &&
        stan::math::primitive_value(stan::math::logical_gt(int_thin, 0))) ? (nint
        / int_thin) : 0);
      current_statement__ = 503;
      stan::math::validate_non_negative_index("inv_Sigma",
        "ni_agd_contrast ? ni_agd_contrast : 1",
        (ni_agd_contrast ? ni_agd_contrast : 1));
      current_statement__ = 504;
      stan::math::validate_non_negative_index("inv_Sigma",
        "ni_agd_contrast ? ni_agd_contrast : 1",
        (ni_agd_contrast ? ni_agd_contrast : 1));
      current_statement__ = 505;
      inv_Sigma_data__ = Eigen::Matrix<double,-1,-1>::Constant((ni_agd_contrast ? ni_agd_contrast : 1),
                           (ni_agd_contrast ? ni_agd_contrast : 1),
                           std::numeric_limits<double>::quiet_NaN());
      new (&inv_Sigma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(inv_Sigma_data__.data(),
        (ni_agd_contrast ? ni_agd_contrast : 1),
        (ni_agd_contrast ? ni_agd_contrast : 1));
      current_statement__ = 505;
      stan::model::assign(inv_Sigma,
        stan::math::inverse_spd(agd_contrast_Sigma),
        "assigning variable inv_Sigma");
      current_statement__ = 506;
      stan::math::validate_non_negative_index("nc_agd_contrast",
        "ns_agd_contrast", ns_agd_contrast);
      current_statement__ = 507;
      nc_agd_contrast = std::vector<int>(ns_agd_contrast,
                          std::numeric_limits<int>::min());
      current_statement__ = 521;
      if (ns_agd_contrast) {
        int s = std::numeric_limits<int>::min();
        current_statement__ = 508;
        s = 1;
        int c = std::numeric_limits<int>::min();
        current_statement__ = 509;
        c = 1;
        current_statement__ = 518;
        for (int i = 1; i <= (ni_agd_contrast - 1); ++i) {
          current_statement__ = 516;
          if (stan::math::logical_eq(
                stan::model::rvalue(agd_contrast_Sigma, "agd_contrast_Sigma",
                  stan::model::index_uni(i), stan::model::index_uni((i + 1))),
                0)) {
            current_statement__ = 512;
            stan::model::assign(nc_agd_contrast, c,
              "assigning variable nc_agd_contrast", stan::model::index_uni(s));
            current_statement__ = 513;
            s = (s + 1);
            current_statement__ = 514;
            c = 1;
          } else {
            current_statement__ = 510;
            c = (c + 1);
          }
        }
        current_statement__ = 519;
        stan::model::assign(nc_agd_contrast, c,
          "assigning variable nc_agd_contrast", stan::model::index_uni(s));
      }
      current_statement__ = 523;
      for (int i = 1; i <= ni_agd_arm; ++i) {
        current_statement__ = 522;
        stan::model::assign(agd_arm_arm2, (narm_ipd +
          stan::model::rvalue(agd_arm_arm, "agd_arm_arm",
            stan::model::index_uni(i))), "assigning variable agd_arm_arm2",
          stan::model::index_uni(i));
      }
      current_statement__ = 530;
      if ((stan::math::primitive_value(nonexp) &&
          stan::math::primitive_value(stan::math::logical_eq(aux_int, 0)))) {
        current_statement__ = 529;
        for (int i = 1; i <= n_aux_group; ++i) {
          current_statement__ = 525;
          if (stan::model::rvalue(ni_aux_group_ipd, "ni_aux_group_ipd",
                stan::model::index_uni(i))) {
            current_statement__ = 524;
            stan::model::assign(wi_aux_group_ipd,
              which(aux_group_ipd, i, pstream__),
              "assigning variable wi_aux_group_ipd",
              stan::model::index_uni(i),
              stan::model::index_min_max(1,
                stan::model::rvalue(ni_aux_group_ipd, "ni_aux_group_ipd",
                  stan::model::index_uni(i))));
          }
          current_statement__ = 527;
          if (stan::model::rvalue(ni_aux_group_agd_arm,
                "ni_aux_group_agd_arm", stan::model::index_uni(i))) {
            current_statement__ = 526;
            stan::model::assign(wi_aux_group_agd_arm,
              which(aux_group_agd_arm, i, pstream__),
              "assigning variable wi_aux_group_agd_arm",
              stan::model::index_uni(i),
              stan::model::index_min_max(1,
                stan::model::rvalue(ni_aux_group_agd_arm,
                  "ni_aux_group_agd_arm", stan::model::index_uni(i))));
          }
        }
      }
      current_statement__ = 432;
      stan::math::check_greater_or_equal(function__, "nonexp", nonexp, 0);
      current_statement__ = 432;
      stan::math::check_less_or_equal(function__, "nonexp", nonexp, 1);
      current_statement__ = 433;
      stan::math::check_greater_or_equal(function__, "gengamma", gengamma, 0);
      current_statement__ = 433;
      stan::math::check_less_or_equal(function__, "gengamma", gengamma, 1);
      current_statement__ = 439;
      stan::math::check_greater_or_equal(function__, "aux_id_ipd",
        aux_id_ipd, 1);
      current_statement__ = 441;
      stan::math::check_greater_or_equal(function__, "aux_id_agd_arm",
        aux_id_agd_arm, 1);
      current_statement__ = 443;
      stan::math::check_greater_or_equal(function__, "aux_group_ipd",
        aux_group_ipd, 1);
      current_statement__ = 445;
      stan::math::check_greater_or_equal(function__, "aux_group_agd_arm",
        aux_group_agd_arm, 1);
      current_statement__ = 464;
      stan::math::check_greater_or_equal(function__, "nint", nint, 1);
      current_statement__ = 464;
      stan::math::check_less_or_equal(function__, "nint", nint, nint_max);
      current_statement__ = 465;
      stan::math::check_greater_or_equal(function__, "n_delta", n_delta, 0);
      current_statement__ = 470;
      stan::math::check_cholesky_factor_corr(function__, "RE_L", RE_L);
      current_statement__ = 483;
      stan::math::check_greater_or_equal(function__, "trt", trt, 1);
      current_statement__ = 531;
      stan::math::validate_non_negative_index("beta_tilde", "nX", nX);
      current_statement__ = 532;
      stan::math::validate_non_negative_index("u_delta", "n_delta", n_delta);
      current_statement__ = 533;
      tau_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 533;
      tau_1dim__ = (RE ? 1 : 0);
      current_statement__ = 533;
      stan::math::validate_non_negative_index("tau", "RE ? 1 : 0", tau_1dim__);
      current_statement__ = 534;
      stan::math::validate_non_negative_index("aux", "n_aux", n_aux);
      current_statement__ = 535;
      aux2_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 535;
      aux2_1dim__ = (n_aux * gengamma);
      current_statement__ = 535;
      stan::math::validate_non_negative_index("aux2", "n_aux * gengamma",
        aux2_1dim__);
      current_statement__ = 536;
      beta_aux_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 536;
      beta_aux_1dim__ = (nonexp ? nX_aux : 0);
      current_statement__ = 536;
      stan::math::validate_non_negative_index("beta_aux",
        "nonexp ? nX_aux : 0", beta_aux_1dim__);
      current_statement__ = 537;
      beta_aux_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 537;
      beta_aux_2dim__ = (nonexp + gengamma);
      current_statement__ = 537;
      stan::math::validate_non_negative_index("beta_aux",
        "nonexp + gengamma", beta_aux_2dim__);
      current_statement__ = 538;
      stan::math::validate_non_negative_index("log_L_ipd", "ni_ipd", ni_ipd);
      current_statement__ = 539;
      stan::math::validate_non_negative_index("log_L_agd_arm", "ni_agd_arm",
        ni_agd_arm);
      current_statement__ = 540;
      stan::math::validate_non_negative_index("eta_ipd", "ni_ipd", ni_ipd);
      current_statement__ = 541;
      stan::math::validate_non_negative_index("f_delta", "n_delta", n_delta);
      current_statement__ = 542;
      stan::math::validate_non_negative_index("allbeta", "nX", nX);
      current_statement__ = 543;
      stan::math::validate_non_negative_index("mu", "totns", totns);
      current_statement__ = 544;
      d_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 544;
      d_1dim__ = (nt - 1);
      current_statement__ = 544;
      stan::math::validate_non_negative_index("d", "nt - 1", d_1dim__);
      current_statement__ = 545;
      stan::math::validate_non_negative_index("omega", "nodesplit", nodesplit);
      current_statement__ = 546;
      beta_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 546;
      beta_1dim__ = (((nX - totns) - (nt - 1)) - nodesplit);
      current_statement__ = 546;
      stan::math::validate_non_negative_index("beta",
        "nX - totns - (nt - 1) - nodesplit", beta_1dim__);
      current_statement__ = 547;
      eta_agd_contrast_ii_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 547;
      eta_agd_contrast_ii_1dim__ = (stan::math::logical_gt(nint_max, 1) ? (nint
        * ni_agd_contrast) : 0);
      current_statement__ = 547;
      stan::math::validate_non_negative_index("eta_agd_contrast_ii",
        "nint_max > 1 ? nint * ni_agd_contrast : 0",
        eta_agd_contrast_ii_1dim__);
      current_statement__ = 548;
      stan::math::validate_non_negative_index("eta_agd_contrast_bar",
        "ni_agd_contrast", ni_agd_contrast);
      current_statement__ = 549;
      shape_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 549;
      shape_1dim__ = ((stan::math::primitive_value(
                         (stan::math::primitive_value(
                            (stan::math::primitive_value(
                               stan::math::logical_neq(dist, 1)) &&
                            stan::math::primitive_value(
                              stan::math::logical_neq(dist, 4)))) &&
                         stan::math::primitive_value(
                           stan::math::logical_neq(dist, 6))))
        &&
        stan::math::primitive_value(stan::math::logical_neq(dist, 9))) ? n_aux : 0);
      current_statement__ = 549;
      stan::math::validate_non_negative_index("shape",
        "(dist != 1 && dist != 4 && dist != 6 && dist != 9) ? n_aux : 0",
        shape_1dim__);
      current_statement__ = 550;
      sdlog_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 550;
      sdlog_1dim__ = (stan::math::logical_eq(dist, 6) ? n_aux : 0);
      current_statement__ = 550;
      stan::math::validate_non_negative_index("sdlog",
        "dist == 6 ? n_aux : 0", sdlog_1dim__);
      current_statement__ = 551;
      sigma_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 551;
      sigma_1dim__ = (stan::math::logical_eq(dist, 9) ? n_aux : 0);
      current_statement__ = 551;
      stan::math::validate_non_negative_index("sigma",
        "dist == 9 ? n_aux : 0", sigma_1dim__);
      current_statement__ = 552;
      k_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 552;
      k_1dim__ = (stan::math::logical_eq(dist, 9) ? n_aux : 0);
      current_statement__ = 552;
      stan::math::validate_non_negative_index("k", "dist == 9 ? n_aux : 0",
        k_1dim__);
      current_statement__ = 553;
      d_aux_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 553;
      d_aux_1dim__ = (aux_reg_trt ? (nt - 1) : 0);
      current_statement__ = 553;
      stan::math::validate_non_negative_index("d_aux",
        "aux_reg_trt ? nt - 1 : 0", d_aux_1dim__);
      current_statement__ = 554;
      d_aux_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 554;
      d_aux_2dim__ = (nonexp + gengamma);
      current_statement__ = 554;
      stan::math::validate_non_negative_index("d_aux", "nonexp + gengamma",
        d_aux_2dim__);
      current_statement__ = 555;
      log_lik_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 555;
      log_lik_1dim__ = ((ni_ipd + ni_agd_arm) + ns_agd_contrast);
      current_statement__ = 555;
      stan::math::validate_non_negative_index("log_lik",
        "ni_ipd + ni_agd_arm + ns_agd_contrast", log_lik_1dim__);
      current_statement__ = 556;
      resdev_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 556;
      resdev_1dim__ = ((ni_ipd + ni_agd_arm) + ns_agd_contrast);
      current_statement__ = 556;
      stan::math::validate_non_negative_index("resdev",
        "ni_ipd + ni_agd_arm + ns_agd_contrast", resdev_1dim__);
      current_statement__ = 557;
      stan::math::validate_non_negative_index("fitted_agd_contrast",
        "ni_agd_contrast", ni_agd_contrast);
      current_statement__ = 558;
      theta_bar_cum_agd_contrast_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 558;
      theta_bar_cum_agd_contrast_1dim__ = (ni_agd_contrast * n_int_thin);
      current_statement__ = 558;
      stan::math::validate_non_negative_index("theta_bar_cum_agd_contrast",
        "ni_agd_contrast * n_int_thin", theta_bar_cum_agd_contrast_1dim__);
      current_statement__ = 559;
      stan::math::validate_non_negative_index("delta", "n_delta", n_delta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = nX + n_delta + tau_1dim__ + n_aux + aux2_1dim__ +
      (beta_aux_1dim__ * beta_aux_2dim__);
  }
  inline std::string model_name() const final {
    return "model_survival_param";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_survival_param_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta_tilde =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nX, DUMMY_VAR__);
      current_statement__ = 1;
      beta_tilde = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(nX);
      Eigen::Matrix<local_scalar_t__,-1,1> u_delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_delta, DUMMY_VAR__);
      current_statement__ = 2;
      u_delta = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_delta);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tau_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      tau = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
              tau_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> aux =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_aux, DUMMY_VAR__);
      current_statement__ = 4;
      aux = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
              n_aux);
      Eigen::Matrix<local_scalar_t__,-1,1> aux2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(aux2_1dim__,
          DUMMY_VAR__);
      current_statement__ = 5;
      aux2 = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
               aux2_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_aux =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_aux_1dim__,
          beta_aux_2dim__, DUMMY_VAR__);
      current_statement__ = 6;
      beta_aux = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,-1>>(beta_aux_1dim__,
                   beta_aux_2dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> log_L_ipd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_ipd, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> log_L_agd_arm =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_agd_arm,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> eta_ipd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_ipd, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> f_delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_delta, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(f_delta,
        (RE ? stan::math::eval(
                (RE_sparse ? stan::math::eval(
                               stan::math::multiply(
                                 stan::model::rvalue(tau, "tau",
                                   stan::model::index_uni(1)),
                                 stan::math::csr_matrix_times_vector(n_delta,
                                   n_delta, RE_L_w, RE_L_v, RE_L_u, u_delta))) : 
                stan::math::eval(
                  stan::math::multiply(
                    stan::math::multiply(
                      stan::model::rvalue(tau, "tau",
                        stan::model::index_uni(1)), RE_L), u_delta)))) : 
        stan::math::eval(u_delta)), "assigning variable f_delta");
      Eigen::Matrix<local_scalar_t__,-1,1> allbeta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nX, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(allbeta,
        (QR ? stan::math::eval(stan::math::multiply(R_inv, beta_tilde)) : 
        stan::math::eval(beta_tilde)), "assigning variable allbeta");
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(totns, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> d =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d_1dim__, DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(d,
        stan::model::rvalue(allbeta, "allbeta",
          stan::model::index_min_max((totns + 1), ((totns + nt) - 1))),
        "assigning variable d");
      Eigen::Matrix<local_scalar_t__,-1,1> omega =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nodesplit,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_contrast_ii =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eta_agd_contrast_ii_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_contrast_bar =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_agd_contrast,
          DUMMY_VAR__);
      current_statement__ = 30;
      if (totns) {
        current_statement__ = 28;
        stan::model::assign(mu,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_min_max(1, totns)), "assigning variable mu");
      }
      current_statement__ = 33;
      if ((((nX - totns) - (nt - 1)) - nodesplit)) {
        current_statement__ = 31;
        stan::model::assign(beta,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_min(((totns + nt) + nodesplit))),
          "assigning variable beta");
      }
      current_statement__ = 36;
      if (nodesplit) {
        current_statement__ = 34;
        stan::model::assign(omega,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_uni((totns + nt))),
          "assigning variable omega", stan::model::index_uni(1));
      }
      current_statement__ = 50;
      if (ni_ipd) {
        current_statement__ = 48;
        if (RE) {
          current_statement__ = 39;
          stan::math::validate_non_negative_index("eta_ipd_noRE", "ni_ipd",
            ni_ipd);
          Eigen::Matrix<local_scalar_t__,-1,1> eta_ipd_noRE =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_ipd,
              DUMMY_VAR__);
          current_statement__ = 40;
          stan::model::assign(eta_ipd_noRE,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_ipd, beta_tilde),
                              offset_ipd)) : stan::math::eval(
                                               stan::math::multiply(X_ipd,
                                                 beta_tilde))),
            "assigning variable eta_ipd_noRE");
          current_statement__ = 45;
          for (int i = 1; i <= ni_ipd; ++i) {
            current_statement__ = 43;
            if (stan::model::rvalue(which_RE, "which_RE",
                  stan::model::index_uni(
                    stan::model::rvalue(ipd_arm, "ipd_arm",
                      stan::model::index_uni(i))))) {
              current_statement__ = 42;
              stan::model::assign(eta_ipd,
                (stan::model::rvalue(eta_ipd_noRE, "eta_ipd_noRE",
                   stan::model::index_uni(i)) +
                stan::model::rvalue(f_delta, "f_delta",
                  stan::model::index_uni(
                    stan::model::rvalue(which_RE, "which_RE",
                      stan::model::index_uni(
                        stan::model::rvalue(ipd_arm, "ipd_arm",
                          stan::model::index_uni(i))))))),
                "assigning variable eta_ipd", stan::model::index_uni(i));
            } else {
              current_statement__ = 41;
              stan::model::assign(eta_ipd,
                stan::model::rvalue(eta_ipd_noRE, "eta_ipd_noRE",
                  stan::model::index_uni(i)), "assigning variable eta_ipd",
                stan::model::index_uni(i));
            }
          }
        } else {
          current_statement__ = 37;
          stan::model::assign(eta_ipd,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_ipd, beta_tilde),
                              offset_ipd)) : stan::math::eval(
                                               stan::math::multiply(X_ipd,
                                                 beta_tilde))),
            "assigning variable eta_ipd");
        }
      }
      current_statement__ = 85;
      if (ni_agd_contrast) {
        current_statement__ = 83;
        if (stan::math::logical_gt(nint_max, 1)) {
          current_statement__ = 63;
          stan::math::validate_non_negative_index("eta_agd_contrast_noRE",
            "nint_max * ni_agd_contrast", (nint_max * ni_agd_contrast));
          Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_contrast_noRE =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant((nint_max *
              ni_agd_contrast), DUMMY_VAR__);
          current_statement__ = 64;
          stan::model::assign(eta_agd_contrast_noRE,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_agd_contrast, beta_tilde),
                              offset_agd_contrast)) : stan::math::eval(
                                                        stan::math::multiply(
                                                          X_agd_contrast,
                                                          beta_tilde))),
            "assigning variable eta_agd_contrast_noRE");
          current_statement__ = 81;
          if (RE) {
            current_statement__ = 79;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 76;
              if (stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i)))) {
                current_statement__ = 75;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::math::add(
                    stan::model::rvalue(eta_agd_contrast_noRE,
                      "eta_agd_contrast_noRE",
                      stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                        (((i - 1) * nint_max) + nint))),
                    stan::model::rvalue(f_delta, "f_delta",
                      stan::model::index_uni(
                        stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni(((narm_ipd + narm_agd_arm) +
                            i)))))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              } else {
                current_statement__ = 74;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE",
                    stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                      (((i - 1) * nint_max) + nint))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              }
              current_statement__ = 77;
              stan::model::assign(eta_agd_contrast_bar,
                stan::math::mean(
                  stan::model::rvalue(eta_agd_contrast_ii,
                    "eta_agd_contrast_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)))), "assigning variable eta_agd_contrast_bar",
                stan::model::index_uni(i));
            }
          } else {
            current_statement__ = 69;
            if (stan::math::logical_eq(nint, nint_max)) {
              current_statement__ = 68;
              stan::model::assign(eta_agd_contrast_ii, eta_agd_contrast_noRE,
                "assigning variable eta_agd_contrast_ii");
            } else {
              current_statement__ = 67;
              for (int i = 1; i <= ni_agd_contrast; ++i) {
                current_statement__ = 65;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE",
                    stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                      (((i - 1) * nint_max) + nint))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              }
            }
            current_statement__ = 72;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 70;
              stan::model::assign(eta_agd_contrast_bar,
                stan::math::mean(
                  stan::model::rvalue(eta_agd_contrast_ii,
                    "eta_agd_contrast_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)))), "assigning variable eta_agd_contrast_bar",
                stan::model::index_uni(i));
            }
          }
        } else {
          current_statement__ = 61;
          if (RE) {
            current_statement__ = 53;
            stan::math::validate_non_negative_index("eta_agd_contrast_noRE",
              "nint * ni_agd_contrast", (nint * ni_agd_contrast));
            Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_contrast_noRE =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant((nint *
                ni_agd_contrast), DUMMY_VAR__);
            current_statement__ = 54;
            stan::model::assign(eta_agd_contrast_noRE,
              (has_offset ? stan::math::eval(
                              stan::math::add(
                                stan::math::multiply(X_agd_contrast,
                                  beta_tilde), offset_agd_contrast)) : 
              stan::math::eval(
                stan::math::multiply(X_agd_contrast, beta_tilde))),
              "assigning variable eta_agd_contrast_noRE");
            current_statement__ = 59;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 57;
              if (stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i)))) {
                current_statement__ = 56;
                stan::model::assign(eta_agd_contrast_bar,
                  (stan::model::rvalue(eta_agd_contrast_noRE,
                     "eta_agd_contrast_noRE", stan::model::index_uni(i)) +
                  stan::model::rvalue(f_delta, "f_delta",
                    stan::model::index_uni(
                      stan::model::rvalue(which_RE, "which_RE",
                        stan::model::index_uni(((narm_ipd + narm_agd_arm) +
                          i)))))), "assigning variable eta_agd_contrast_bar",
                  stan::model::index_uni(i));
              } else {
                current_statement__ = 55;
                stan::model::assign(eta_agd_contrast_bar,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE", stan::model::index_uni(i)),
                  "assigning variable eta_agd_contrast_bar",
                  stan::model::index_uni(i));
              }
            }
          } else {
            current_statement__ = 51;
            stan::model::assign(eta_agd_contrast_bar,
              (has_offset ? stan::math::eval(
                              stan::math::add(
                                stan::math::multiply(X_agd_contrast,
                                  beta_tilde), offset_agd_contrast)) : 
              stan::math::eval(
                stan::math::multiply(X_agd_contrast, beta_tilde))),
              "assigning variable eta_agd_contrast_bar");
          }
        }
      }
      current_statement__ = 129;
      if (ni_ipd) {
        current_statement__ = 127;
        if ((stan::math::primitive_value(stan::math::logical_eq(nonexp, 0))
            || stan::math::primitive_value(aux_int))) {
          current_statement__ = 112;
          stan::math::validate_non_negative_index("auxi", "ni_ipd", ni_ipd);
          Eigen::Matrix<local_scalar_t__,-1,1> auxi =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_ipd,
              DUMMY_VAR__);
          current_statement__ = 114;
          stan::math::validate_non_negative_index("aux2i", "ni_ipd", ni_ipd);
          Eigen::Matrix<local_scalar_t__,-1,1> aux2i =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_ipd,
              DUMMY_VAR__);
          current_statement__ = 116;
          stan::math::validate_non_negative_index("eXbeta",
            "nonexp ? ni_ipd : 0", (nonexp ? ni_ipd : 0));
          current_statement__ = 117;
          stan::math::validate_non_negative_index("eXbeta",
            "nonexp + gengamma", (nonexp + gengamma));
          Eigen::Matrix<local_scalar_t__,-1,-1> eXbeta =
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((nonexp ? ni_ipd : 0),
              (nonexp + gengamma), DUMMY_VAR__);
          current_statement__ = 120;
          if (nonexp) {
            current_statement__ = 119;
            stan::model::assign(eXbeta,
              stan::math::exp(stan::math::multiply(X_aux_ipd, beta_aux)),
              "assigning variable eXbeta");
          }
          current_statement__ = 122;
          if (nonexp) {
            current_statement__ = 121;
            stan::model::assign(auxi,
              stan::math::elt_multiply(
                stan::model::rvalue(aux, "aux",
                  stan::model::index_multi(aux_id_ipd)),
                stan::model::rvalue(eXbeta, "eXbeta",
                  stan::model::index_omni(), stan::model::index_uni(1))),
              "assigning variable auxi");
          }
          current_statement__ = 124;
          if (gengamma) {
            current_statement__ = 123;
            stan::model::assign(aux2i,
              stan::math::elt_multiply(
                stan::model::rvalue(aux2, "aux2",
                  stan::model::index_multi(aux_id_ipd)),
                stan::model::rvalue(eXbeta, "eXbeta",
                  stan::model::index_omni(), stan::model::index_uni(2))),
              "assigning variable aux2i");
          }
          current_statement__ = 125;
          stan::model::assign(log_L_ipd,
            loglik(dist, ipd_time, ipd_start_time, ipd_delay_time,
              ipd_status, eta_ipd, auxi, aux2i, pstream__),
            "assigning variable log_L_ipd");
        } else {
          current_statement__ = 110;
          for (int i = 1; i <= n_aux_group; ++i) {
            int ni = std::numeric_limits<int>::min();
            current_statement__ = 86;
            ni = stan::model::rvalue(ni_aux_group_ipd, "ni_aux_group_ipd",
                   stan::model::index_uni(i));
            current_statement__ = 108;
            if (ni) {
              current_statement__ = 87;
              stan::math::validate_non_negative_index("wi", "ni", ni);
              std::vector<int> wi =
                std::vector<int>(ni, std::numeric_limits<int>::min());
              current_statement__ = 88;
              stan::model::assign(wi,
                stan::model::rvalue(wi_aux_group_ipd, "wi_aux_group_ipd",
                  stan::model::index_uni(i),
                  stan::model::index_min_max(1, ni)), "assigning variable wi");
              local_scalar_t__ auxi = DUMMY_VAR__;
              local_scalar_t__ aux2i = DUMMY_VAR__;
              current_statement__ = 91;
              stan::math::validate_non_negative_index("eXbeta",
                "nonexp + gengamma", (nonexp + gengamma));
              Eigen::Matrix<local_scalar_t__,1,-1> eXbeta =
                Eigen::Matrix<local_scalar_t__,1,-1>::Constant((nonexp +
                  gengamma), DUMMY_VAR__);
              current_statement__ = 94;
              if (nonexp) {
                current_statement__ = 93;
                stan::model::assign(eXbeta,
                  stan::math::exp(
                    stan::math::multiply(
                      stan::model::rvalue(X_aux_ipd, "X_aux_ipd",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(1))),
                        stan::model::index_omni()), beta_aux)),
                  "assigning variable eXbeta");
              }
              current_statement__ = 105;
              if (nX_aux) {
                current_statement__ = 101;
                if (nonexp) {
                  current_statement__ = 100;
                  auxi = (stan::model::rvalue(aux, "aux",
                            stan::model::index_uni(
                              stan::model::rvalue(aux_id_ipd, "aux_id_ipd",
                                stan::model::index_uni(
                                  stan::model::rvalue(wi, "wi",
                                    stan::model::index_uni(1))))))
                    *
                    stan::model::rvalue(eXbeta, "eXbeta",
                      stan::model::index_uni(1)));
                }
                current_statement__ = 103;
                if (gengamma) {
                  current_statement__ = 102;
                  aux2i = (stan::model::rvalue(aux2, "aux2",
                             stan::model::index_uni(
                               stan::model::rvalue(aux_id_ipd, "aux_id_ipd",
                                 stan::model::index_uni(
                                   stan::model::rvalue(wi, "wi",
                                     stan::model::index_uni(1))))))
                    *
                    stan::model::rvalue(eXbeta, "eXbeta",
                      stan::model::index_uni(2)));
                }
              } else {
                current_statement__ = 96;
                if (nonexp) {
                  current_statement__ = 95;
                  auxi = stan::model::rvalue(aux, "aux",
                           stan::model::index_uni(i));
                }
                current_statement__ = 98;
                if (gengamma) {
                  current_statement__ = 97;
                  aux2i = stan::model::rvalue(aux2, "aux2",
                            stan::model::index_uni(i));
                }
              }
              current_statement__ = 106;
              stan::model::assign(log_L_ipd,
                loglik2(dist,
                  stan::model::rvalue(ipd_time, "ipd_time",
                    stan::model::index_multi(wi)),
                  stan::model::rvalue(ipd_start_time, "ipd_start_time",
                    stan::model::index_multi(wi)),
                  stan::model::rvalue(ipd_delay_time, "ipd_delay_time",
                    stan::model::index_multi(wi)),
                  stan::model::rvalue(ipd_status, "ipd_status",
                    stan::model::index_multi(wi)),
                  stan::model::rvalue(eta_ipd, "eta_ipd",
                    stan::model::index_multi(wi)), auxi, aux2i, pstream__),
                "assigning variable log_L_ipd", stan::model::index_multi(wi));
            }
          }
        }
      }
      current_statement__ = 242;
      if (ni_agd_arm) {
        current_statement__ = 130;
        stan::math::validate_non_negative_index("eta_agd_arm_noRE",
          "nint_max * ni_agd_arm", (nint_max * ni_agd_arm));
        Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_arm_noRE =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((nint_max *
            ni_agd_arm), DUMMY_VAR__);
        current_statement__ = 131;
        stan::model::assign(eta_agd_arm_noRE,
          (has_offset ? stan::math::eval(
                          stan::math::add(
                            stan::math::multiply(X_agd_arm, beta_tilde),
                            offset_agd_arm)) : stan::math::eval(
                                                 stan::math::multiply(
                                                   X_agd_arm, beta_tilde))),
          "assigning variable eta_agd_arm_noRE");
        current_statement__ = 240;
        if (stan::math::logical_gt(nint_max, 1)) {
          current_statement__ = 238;
          if ((stan::math::primitive_value(stan::math::logical_eq(nonexp, 0))
              || stan::math::primitive_value(aux_int))) {
            current_statement__ = 236;
            for (int i = 1; i <= ni_agd_arm; ++i) {
              current_statement__ = 213;
              stan::math::validate_non_negative_index("eta_agd_arm_ii",
                "nint", nint);
              Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_arm_ii =
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nint,
                  DUMMY_VAR__);
              current_statement__ = 215;
              stan::math::validate_non_negative_index("log_L_ii", "nint",
                nint);
              Eigen::Matrix<local_scalar_t__,-1,1> log_L_ii =
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nint,
                  DUMMY_VAR__);
              current_statement__ = 217;
              stan::math::validate_non_negative_index("auxi", "nint", nint);
              Eigen::Matrix<local_scalar_t__,-1,1> auxi =
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nint,
                  DUMMY_VAR__);
              current_statement__ = 219;
              stan::math::validate_non_negative_index("aux2i", "nint", nint);
              Eigen::Matrix<local_scalar_t__,-1,1> aux2i =
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nint,
                  DUMMY_VAR__);
              current_statement__ = 221;
              stan::math::validate_non_negative_index("eXbeta",
                "nonexp ? nint : 0", (nonexp ? nint : 0));
              current_statement__ = 222;
              stan::math::validate_non_negative_index("eXbeta",
                "nonexp + gengamma", (nonexp + gengamma));
              Eigen::Matrix<local_scalar_t__,-1,-1> eXbeta =
                Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((nonexp ? nint : 0),
                  (nonexp + gengamma), DUMMY_VAR__);
              current_statement__ = 225;
              if (nonexp) {
                current_statement__ = 224;
                stan::model::assign(eXbeta,
                  stan::math::exp(
                    stan::math::multiply(
                      stan::model::rvalue(X_aux_agd_arm, "X_aux_agd_arm",
                        stan::model::index_min_max((1 + ((i - 1) *
                          nint_max)), (((i - 1) * nint_max) + nint)),
                        stan::model::index_omni()), beta_aux)),
                  "assigning variable eXbeta");
              }
              current_statement__ = 227;
              if (nonexp) {
                current_statement__ = 226;
                stan::model::assign(auxi,
                  stan::math::elt_multiply(
                    stan::model::rvalue(aux, "aux",
                      stan::model::index_multi(
                        stan::model::rvalue(aux_id_agd_arm, "aux_id_agd_arm",
                          stan::model::index_min_max((1 + ((i - 1) *
                            nint_max)), (((i - 1) * nint_max) + nint))))),
                    stan::model::rvalue(eXbeta, "eXbeta",
                      stan::model::index_omni(), stan::model::index_uni(1))),
                  "assigning variable auxi");
              }
              current_statement__ = 229;
              if (gengamma) {
                current_statement__ = 228;
                stan::model::assign(aux2i,
                  stan::math::elt_multiply(
                    stan::model::rvalue(aux2, "aux2",
                      stan::model::index_multi(
                        stan::model::rvalue(aux_id_agd_arm, "aux_id_agd_arm",
                          stan::model::index_min_max((1 + ((i - 1) *
                            nint_max)), (((i - 1) * nint_max) + nint))))),
                    stan::model::rvalue(eXbeta, "eXbeta",
                      stan::model::index_omni(), stan::model::index_uni(2))),
                  "assigning variable aux2i");
              }
              current_statement__ = 230;
              stan::model::assign(eta_agd_arm_ii,
                stan::model::rvalue(eta_agd_arm_noRE, "eta_agd_arm_noRE",
                  stan::model::index_min_max((1 + ((i - 1) * nint_max)), (((i
                    - 1) * nint_max) + nint))),
                "assigning variable eta_agd_arm_ii");
              current_statement__ = 232;
              if ((stan::math::primitive_value(RE) &&
                  stan::math::primitive_value(
                    stan::model::rvalue(which_RE, "which_RE",
                      stan::model::index_uni(
                        stan::model::rvalue(agd_arm_arm2, "agd_arm_arm2",
                          stan::model::index_uni(i))))))) {
                current_statement__ = 231;
                stan::model::assign(eta_agd_arm_ii,
                  stan::math::add(stan::model::deep_copy(eta_agd_arm_ii),
                    stan::model::rvalue(f_delta, "f_delta",
                      stan::model::index_uni(
                        stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni(
                            stan::model::rvalue(agd_arm_arm2, "agd_arm_arm2",
                              stan::model::index_uni(i))))))),
                  "assigning variable eta_agd_arm_ii");
              }
              current_statement__ = 233;
              stan::model::assign(log_L_ii,
                loglik_a2(dist,
                  stan::model::rvalue(agd_arm_time, "agd_arm_time",
                    stan::model::index_uni(i)),
                  stan::model::rvalue(agd_arm_start_time,
                    "agd_arm_start_time", stan::model::index_uni(i)),
                  stan::model::rvalue(agd_arm_delay_time,
                    "agd_arm_delay_time", stan::model::index_uni(i)),
                  stan::model::rvalue(agd_arm_status, "agd_arm_status",
                    stan::model::index_uni(i)), eta_agd_arm_ii, auxi, aux2i,
                  pstream__), "assigning variable log_L_ii");
              current_statement__ = 234;
              stan::model::assign(log_L_agd_arm,
                (stan::math::log_sum_exp(log_L_ii) - stan::math::log(nint)),
                "assigning variable log_L_agd_arm", stan::model::index_uni(i));
            }
          } else {
            current_statement__ = 211;
            for (int i = 1; i <= n_aux_group; ++i) {
              int ni = std::numeric_limits<int>::min();
              current_statement__ = 181;
              ni = stan::model::rvalue(ni_aux_group_agd_arm,
                     "ni_aux_group_agd_arm", stan::model::index_uni(i));
              current_statement__ = 209;
              if (ni) {
                current_statement__ = 182;
                stan::math::validate_non_negative_index("wi", "ni", ni);
                std::vector<int> wi =
                  std::vector<int>(ni, std::numeric_limits<int>::min());
                current_statement__ = 183;
                stan::model::assign(wi,
                  stan::model::rvalue(wi_aux_group_agd_arm,
                    "wi_aux_group_agd_arm", stan::model::index_uni(i),
                    stan::model::index_min_max(1, ni)),
                  "assigning variable wi");
                local_scalar_t__ auxi = DUMMY_VAR__;
                local_scalar_t__ aux2i = DUMMY_VAR__;
                current_statement__ = 186;
                stan::math::validate_non_negative_index("eXbeta",
                  "nonexp + gengamma", (nonexp + gengamma));
                Eigen::Matrix<local_scalar_t__,1,-1> eXbeta =
                  Eigen::Matrix<local_scalar_t__,1,-1>::Constant((nonexp +
                    gengamma), DUMMY_VAR__);
                current_statement__ = 189;
                if (nonexp) {
                  current_statement__ = 188;
                  stan::model::assign(eXbeta,
                    stan::math::exp(
                      stan::math::multiply(
                        stan::model::rvalue(X_aux_agd_arm, "X_aux_agd_arm",
                          stan::model::index_uni(
                            stan::model::rvalue(wi, "wi",
                              stan::model::index_uni(1))),
                          stan::model::index_omni()), beta_aux)),
                    "assigning variable eXbeta");
                }
                current_statement__ = 196;
                if (nX_aux) {
                  current_statement__ = 193;
                  auxi = (nonexp ? (stan::model::rvalue(aux, "aux",
                                      stan::model::index_uni(
                                        stan::model::rvalue(aux_id_agd_arm,
                                          "aux_id_agd_arm",
                                          stan::model::index_uni(
                                            stan::model::rvalue(wi, "wi",
                                              stan::model::index_uni(1))))))
                    *
                    stan::model::rvalue(eXbeta, "eXbeta",
                      stan::model::index_uni(1))) : 0);
                  current_statement__ = 194;
                  aux2i = (gengamma ? (stan::model::rvalue(aux2, "aux2",
                                         stan::model::index_uni(
                                           stan::model::rvalue(
                                             aux_id_agd_arm,
                                             "aux_id_agd_arm",
                                             stan::model::index_uni(
                                               stan::model::rvalue(wi, "wi",
                                                 stan::model::index_uni(1))))))
                    *
                    stan::model::rvalue(eXbeta, "eXbeta",
                      stan::model::index_uni(2))) : 0);
                } else {
                  current_statement__ = 190;
                  auxi = (nonexp ? stan::model::rvalue(aux, "aux",
                                     stan::model::index_uni(i)) : 0);
                  current_statement__ = 191;
                  aux2i = (gengamma ? stan::model::rvalue(aux2, "aux2",
                                        stan::model::index_uni(i)) : 0);
                }
                current_statement__ = 207;
                for (int j = 1; j <= ni; ++j) {
                  current_statement__ = 197;
                  stan::math::validate_non_negative_index("eta_agd_arm_ii",
                    "nint", nint);
                  Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_arm_ii =
                    Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nint,
                      DUMMY_VAR__);
                  current_statement__ = 199;
                  stan::math::validate_non_negative_index("log_L_ii", "nint",
                    nint);
                  Eigen::Matrix<local_scalar_t__,-1,1> log_L_ii =
                    Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nint,
                      DUMMY_VAR__);
                  current_statement__ = 201;
                  stan::model::assign(eta_agd_arm_ii,
                    stan::model::rvalue(eta_agd_arm_noRE, "eta_agd_arm_noRE",
                      stan::model::index_min_max((1 +
                        ((stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)) - 1) * nint_max)),
                        (((stan::model::rvalue(wi, "wi",
                             stan::model::index_uni(j)) - 1) * nint_max) +
                        nint))), "assigning variable eta_agd_arm_ii");
                  current_statement__ = 203;
                  if ((stan::math::primitive_value(RE) &&
                      stan::math::primitive_value(
                        stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni(
                            stan::model::rvalue(agd_arm_arm2, "agd_arm_arm2",
                              stan::model::index_uni(
                                stan::model::rvalue(wi, "wi",
                                  stan::model::index_uni(j))))))))) {
                    current_statement__ = 202;
                    stan::model::assign(eta_agd_arm_ii,
                      stan::math::add(stan::model::deep_copy(eta_agd_arm_ii),
                        stan::model::rvalue(f_delta, "f_delta",
                          stan::model::index_uni(
                            stan::model::rvalue(which_RE, "which_RE",
                              stan::model::index_uni(
                                stan::model::rvalue(agd_arm_arm2,
                                  "agd_arm_arm2",
                                  stan::model::index_uni(
                                    stan::model::rvalue(wi, "wi",
                                      stan::model::index_uni(j))))))))),
                      "assigning variable eta_agd_arm_ii");
                  }
                  current_statement__ = 204;
                  stan::model::assign(log_L_ii,
                    loglik_a(dist,
                      stan::model::rvalue(agd_arm_time, "agd_arm_time",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))),
                      stan::model::rvalue(agd_arm_start_time,
                        "agd_arm_start_time",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))),
                      stan::model::rvalue(agd_arm_delay_time,
                        "agd_arm_delay_time",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))),
                      stan::model::rvalue(agd_arm_status, "agd_arm_status",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))), eta_agd_arm_ii,
                      auxi, aux2i, pstream__), "assigning variable log_L_ii");
                  current_statement__ = 205;
                  stan::model::assign(log_L_agd_arm,
                    (stan::math::log_sum_exp(log_L_ii) -
                    stan::math::log(nint)),
                    "assigning variable log_L_agd_arm",
                    stan::model::index_uni(
                      stan::model::rvalue(wi, "wi", stan::model::index_uni(j))));
                }
              }
            }
          }
        } else {
          current_statement__ = 132;
          stan::math::validate_non_negative_index("eta_agd_arm",
            "ni_agd_arm", ni_agd_arm);
          Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_arm =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_agd_arm,
              DUMMY_VAR__);
          current_statement__ = 133;
          stan::model::assign(eta_agd_arm, eta_agd_arm_noRE,
            "assigning variable eta_agd_arm");
          current_statement__ = 137;
          if (RE) {
            current_statement__ = 136;
            for (int i = 1; i <= ni_agd_arm; ++i) {
              current_statement__ = 135;
              if (stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni(
                      stan::model::rvalue(agd_arm_arm2, "agd_arm_arm2",
                        stan::model::index_uni(i))))) {
                current_statement__ = 134;
                stan::model::assign(eta_agd_arm,
                  (stan::model::rvalue(eta_agd_arm, "eta_agd_arm",
                     stan::model::index_uni(i)) +
                  stan::model::rvalue(f_delta, "f_delta",
                    stan::model::index_uni(
                      stan::model::rvalue(which_RE, "which_RE",
                        stan::model::index_uni(
                          stan::model::rvalue(agd_arm_arm2, "agd_arm_arm2",
                            stan::model::index_uni(i))))))),
                  "assigning variable eta_agd_arm", stan::model::index_uni(i));
              }
            }
          }
          current_statement__ = 179;
          if ((stan::math::primitive_value(stan::math::logical_eq(nonexp, 0))
              || stan::math::primitive_value(aux_int))) {
            current_statement__ = 164;
            stan::math::validate_non_negative_index("auxi", "ni_agd_arm",
              ni_agd_arm);
            Eigen::Matrix<local_scalar_t__,-1,1> auxi =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_agd_arm,
                DUMMY_VAR__);
            current_statement__ = 166;
            stan::math::validate_non_negative_index("aux2i", "ni_agd_arm",
              ni_agd_arm);
            Eigen::Matrix<local_scalar_t__,-1,1> aux2i =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_agd_arm,
                DUMMY_VAR__);
            current_statement__ = 168;
            stan::math::validate_non_negative_index("eXbeta", "ni_agd_arm",
              ni_agd_arm);
            current_statement__ = 169;
            stan::math::validate_non_negative_index("eXbeta",
              "nonexp + gengamma", (nonexp + gengamma));
            Eigen::Matrix<local_scalar_t__,-1,-1> eXbeta =
              Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(ni_agd_arm,
                (nonexp + gengamma), DUMMY_VAR__);
            current_statement__ = 172;
            if (nonexp) {
              current_statement__ = 171;
              stan::model::assign(eXbeta,
                stan::math::exp(stan::math::multiply(X_aux_agd_arm, beta_aux)),
                "assigning variable eXbeta");
            }
            current_statement__ = 174;
            if (nonexp) {
              current_statement__ = 173;
              stan::model::assign(auxi,
                stan::math::elt_multiply(
                  stan::model::rvalue(aux, "aux",
                    stan::model::index_multi(aux_id_agd_arm)),
                  stan::model::rvalue(eXbeta, "eXbeta",
                    stan::model::index_omni(), stan::model::index_uni(1))),
                "assigning variable auxi");
            }
            current_statement__ = 176;
            if (gengamma) {
              current_statement__ = 175;
              stan::model::assign(aux2i,
                stan::math::elt_multiply(
                  stan::model::rvalue(aux2, "aux2",
                    stan::model::index_multi(aux_id_agd_arm)),
                  stan::model::rvalue(eXbeta, "eXbeta",
                    stan::model::index_omni(), stan::model::index_uni(2))),
                "assigning variable aux2i");
            }
            current_statement__ = 177;
            stan::model::assign(log_L_agd_arm,
              loglik(dist, agd_arm_time, agd_arm_start_time,
                agd_arm_delay_time, agd_arm_status, eta_agd_arm, auxi, aux2i,
                pstream__), "assigning variable log_L_agd_arm");
          } else {
            current_statement__ = 162;
            for (int i = 1; i <= n_aux_group; ++i) {
              int ni = std::numeric_limits<int>::min();
              current_statement__ = 138;
              ni = stan::model::rvalue(ni_aux_group_agd_arm,
                     "ni_aux_group_agd_arm", stan::model::index_uni(i));
              current_statement__ = 160;
              if (ni) {
                current_statement__ = 139;
                stan::math::validate_non_negative_index("wi", "ni", ni);
                std::vector<int> wi =
                  std::vector<int>(ni, std::numeric_limits<int>::min());
                current_statement__ = 140;
                stan::model::assign(wi,
                  stan::model::rvalue(wi_aux_group_agd_arm,
                    "wi_aux_group_agd_arm", stan::model::index_uni(i),
                    stan::model::index_min_max(1, ni)),
                  "assigning variable wi");
                local_scalar_t__ auxi = DUMMY_VAR__;
                local_scalar_t__ aux2i = DUMMY_VAR__;
                current_statement__ = 143;
                stan::math::validate_non_negative_index("eXbeta",
                  "nonexp + gengamma", (nonexp + gengamma));
                Eigen::Matrix<local_scalar_t__,1,-1> eXbeta =
                  Eigen::Matrix<local_scalar_t__,1,-1>::Constant((nonexp +
                    gengamma), DUMMY_VAR__);
                current_statement__ = 146;
                if (nonexp) {
                  current_statement__ = 145;
                  stan::model::assign(eXbeta,
                    stan::math::exp(
                      stan::math::multiply(
                        stan::model::rvalue(X_aux_agd_arm, "X_aux_agd_arm",
                          stan::model::index_uni(
                            stan::model::rvalue(wi, "wi",
                              stan::model::index_uni(1))),
                          stan::model::index_omni()), beta_aux)),
                    "assigning variable eXbeta");
                }
                current_statement__ = 157;
                if (nX_aux) {
                  current_statement__ = 153;
                  if (nonexp) {
                    current_statement__ = 152;
                    auxi = (stan::model::rvalue(aux, "aux",
                              stan::model::index_uni(
                                stan::model::rvalue(aux_id_agd_arm,
                                  "aux_id_agd_arm",
                                  stan::model::index_uni(
                                    stan::model::rvalue(wi, "wi",
                                      stan::model::index_uni(1))))))
                      *
                      stan::model::rvalue(eXbeta, "eXbeta",
                        stan::model::index_uni(1)));
                  }
                  current_statement__ = 155;
                  if (gengamma) {
                    current_statement__ = 154;
                    aux2i = (stan::model::rvalue(aux2, "aux2",
                               stan::model::index_uni(
                                 stan::model::rvalue(aux_id_agd_arm,
                                   "aux_id_agd_arm",
                                   stan::model::index_uni(
                                     stan::model::rvalue(wi, "wi",
                                       stan::model::index_uni(1))))))
                      *
                      stan::model::rvalue(eXbeta, "eXbeta",
                        stan::model::index_uni(2)));
                  }
                } else {
                  current_statement__ = 148;
                  if (nonexp) {
                    current_statement__ = 147;
                    auxi = stan::model::rvalue(aux, "aux",
                             stan::model::index_uni(i));
                  }
                  current_statement__ = 150;
                  if (gengamma) {
                    current_statement__ = 149;
                    aux2i = stan::model::rvalue(aux2, "aux2",
                              stan::model::index_uni(i));
                  }
                }
                current_statement__ = 158;
                stan::model::assign(log_L_agd_arm,
                  loglik2(dist,
                    stan::model::rvalue(agd_arm_time, "agd_arm_time",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(agd_arm_start_time,
                      "agd_arm_start_time", stan::model::index_multi(wi)),
                    stan::model::rvalue(agd_arm_delay_time,
                      "agd_arm_delay_time", stan::model::index_multi(wi)),
                    stan::model::rvalue(agd_arm_status, "agd_arm_status",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(eta_agd_arm, "eta_agd_arm",
                      stan::model::index_multi(wi)), auxi, aux2i, pstream__),
                  "assigning variable log_L_agd_arm",
                  stan::model::index_multi(wi));
              }
            }
          }
        }
      }
      {
        current_statement__ = 291;
        prior_select_lp<propto__>(mu, prior_intercept_dist,
          prior_intercept_location, prior_intercept_scale,
          prior_intercept_df, lp__, lp_accum__, pstream__);
        current_statement__ = 292;
        prior_select_lp<propto__>(d, prior_trt_dist, prior_trt_location,
          prior_trt_scale, prior_trt_df, lp__, lp_accum__, pstream__);
        current_statement__ = 293;
        prior_select_lp<propto__>(beta, prior_reg_dist, prior_reg_location,
          prior_reg_scale, prior_reg_df, lp__, lp_accum__, pstream__);
        current_statement__ = 294;
        prior_select_lp<propto__>(omega, prior_trt_dist, prior_trt_location,
          prior_trt_scale, prior_trt_df, lp__, lp_accum__, pstream__);
        current_statement__ = 312;
        if (RE) {
          current_statement__ = 310;
          if (stan::math::logical_eq(prior_het_type, 1)) {
            current_statement__ = 308;
            prior_select_lp<propto__>(tau, prior_het_dist,
              prior_het_location, prior_het_scale, prior_het_df, lp__,
              lp_accum__, pstream__);
          } else {
            current_statement__ = 295;
            stan::math::validate_non_negative_index("tau_t", "RE ? 1 : 0",
              (RE ? 1 : 0));
            Eigen::Matrix<local_scalar_t__,-1,1> tau_t =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant((RE ? 1 : 0),
                DUMMY_VAR__);
            current_statement__ = 304;
            if (stan::math::logical_eq(prior_het_type, 2)) {
              current_statement__ = 301;
              stan::model::assign(tau_t,
                stan::math::pow(
                  stan::model::rvalue(tau, "tau", stan::model::index_uni(1)),
                  2), "assigning variable tau_t", stan::model::index_uni(1));
              current_statement__ = 302;
              lp_accum__.add(stan::math::log(tau));
            } else {
              current_statement__ = 300;
              if (stan::math::logical_eq(prior_het_type, 3)) {
                current_statement__ = 297;
                stan::model::assign(tau_t,
                  stan::math::pow(
                    stan::model::rvalue(tau, "tau", stan::model::index_uni(1)),
                    -2), "assigning variable tau_t",
                  stan::model::index_uni(1));
                current_statement__ = 298;
                lp_accum__.add(stan::math::multiply(-3, stan::math::log(tau)));
              }
            }
            current_statement__ = 305;
            prior_select_lp<propto__>(tau_t, prior_het_dist,
              prior_het_location, prior_het_scale, prior_het_df, lp__,
              lp_accum__, pstream__);
          }
        }
        current_statement__ = 313;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(u_delta));
        current_statement__ = 316;
        if (ni_agd_contrast) {
          current_statement__ = 314;
          lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(
                           agd_contrast_y, eta_agd_contrast_bar,
                           agd_contrast_Sigma));
        }
        current_statement__ = 318;
        if (nonexp) {
          current_statement__ = 317;
          prior_select_lp<propto__>(aux, prior_aux_dist, prior_aux_location,
            prior_aux_scale, prior_aux_df, lp__, lp_accum__, pstream__);
        }
        current_statement__ = 320;
        if (gengamma) {
          current_statement__ = 319;
          prior_select_lp<propto__>(aux2, prior_aux2_dist,
            prior_aux2_location, prior_aux2_scale, prior_aux2_df, lp__,
            lp_accum__, pstream__);
        }
        current_statement__ = 322;
        if ((stan::math::primitive_value(nonexp) &&
            stan::math::primitive_value(nX_aux))) {
          current_statement__ = 321;
          prior_select_lp<propto__>(
            stan::model::rvalue(beta_aux, "beta_aux",
              stan::model::index_omni(), stan::model::index_uni(1)),
            prior_aux_reg_dist, prior_aux_reg_location, prior_aux_reg_scale,
            prior_aux_reg_df, lp__, lp_accum__, pstream__);
        }
        current_statement__ = 324;
        if ((stan::math::primitive_value(gengamma) &&
            stan::math::primitive_value(nX_aux))) {
          current_statement__ = 323;
          prior_select_lp<propto__>(
            stan::model::rvalue(beta_aux, "beta_aux",
              stan::model::index_omni(), stan::model::index_uni(2)),
            prior_aux_reg_dist, prior_aux_reg_location, prior_aux_reg_scale,
            prior_aux_reg_df, lp__, lp_accum__, pstream__);
        }
        current_statement__ = 325;
        lp_accum__.add(log_L_ipd);
        current_statement__ = 326;
        lp_accum__.add(log_L_agd_arm);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_survival_param_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> beta_tilde =
        Eigen::Matrix<double,-1,1>::Constant(nX,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta_tilde = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(nX);
      Eigen::Matrix<double,-1,1> u_delta =
        Eigen::Matrix<double,-1,1>::Constant(n_delta,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      u_delta = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_delta);
      Eigen::Matrix<double,-1,1> tau =
        Eigen::Matrix<double,-1,1>::Constant(tau_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      tau = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
              tau_1dim__);
      Eigen::Matrix<double,-1,1> aux =
        Eigen::Matrix<double,-1,1>::Constant(n_aux,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      aux = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
              n_aux);
      Eigen::Matrix<double,-1,1> aux2 =
        Eigen::Matrix<double,-1,1>::Constant(aux2_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      aux2 = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
               aux2_1dim__);
      Eigen::Matrix<double,-1,-1> beta_aux =
        Eigen::Matrix<double,-1,-1>::Constant(beta_aux_1dim__,
          beta_aux_2dim__, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      beta_aux = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,-1>>(beta_aux_1dim__,
                   beta_aux_2dim__);
      Eigen::Matrix<double,-1,1> log_L_ipd =
        Eigen::Matrix<double,-1,1>::Constant(ni_ipd,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_L_agd_arm =
        Eigen::Matrix<double,-1,1>::Constant(ni_agd_arm,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> eta_ipd =
        Eigen::Matrix<double,-1,1>::Constant(ni_ipd,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> f_delta =
        Eigen::Matrix<double,-1,1>::Constant(n_delta,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> allbeta =
        Eigen::Matrix<double,-1,1>::Constant(nX,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(totns,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> d =
        Eigen::Matrix<double,-1,1>::Constant(d_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> omega =
        Eigen::Matrix<double,-1,1>::Constant(nodesplit,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(beta_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> eta_agd_contrast_ii =
        Eigen::Matrix<double,-1,1>::Constant(eta_agd_contrast_ii_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> eta_agd_contrast_bar =
        Eigen::Matrix<double,-1,1>::Constant(ni_agd_contrast,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(beta_tilde);
      out__.write(u_delta);
      out__.write(tau);
      out__.write(aux);
      out__.write(aux2);
      out__.write(beta_aux);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 10;
      stan::model::assign(f_delta,
        (RE ? stan::math::eval(
                (RE_sparse ? stan::math::eval(
                               stan::math::multiply(
                                 stan::model::rvalue(tau, "tau",
                                   stan::model::index_uni(1)),
                                 stan::math::csr_matrix_times_vector(n_delta,
                                   n_delta, RE_L_w, RE_L_v, RE_L_u, u_delta))) : 
                stan::math::eval(
                  stan::math::multiply(
                    stan::math::multiply(
                      stan::model::rvalue(tau, "tau",
                        stan::model::index_uni(1)), RE_L), u_delta)))) : 
        stan::math::eval(u_delta)), "assigning variable f_delta");
      current_statement__ = 11;
      stan::model::assign(allbeta,
        (QR ? stan::math::eval(stan::math::multiply(R_inv, beta_tilde)) : 
        stan::math::eval(beta_tilde)), "assigning variable allbeta");
      current_statement__ = 13;
      stan::model::assign(d,
        stan::model::rvalue(allbeta, "allbeta",
          stan::model::index_min_max((totns + 1), ((totns + nt) - 1))),
        "assigning variable d");
      current_statement__ = 30;
      if (totns) {
        current_statement__ = 28;
        stan::model::assign(mu,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_min_max(1, totns)), "assigning variable mu");
      }
      current_statement__ = 33;
      if ((((nX - totns) - (nt - 1)) - nodesplit)) {
        current_statement__ = 31;
        stan::model::assign(beta,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_min(((totns + nt) + nodesplit))),
          "assigning variable beta");
      }
      current_statement__ = 36;
      if (nodesplit) {
        current_statement__ = 34;
        stan::model::assign(omega,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_uni((totns + nt))),
          "assigning variable omega", stan::model::index_uni(1));
      }
      current_statement__ = 50;
      if (ni_ipd) {
        current_statement__ = 48;
        if (RE) {
          current_statement__ = 39;
          stan::math::validate_non_negative_index("eta_ipd_noRE", "ni_ipd",
            ni_ipd);
          Eigen::Matrix<double,-1,1> eta_ipd_noRE =
            Eigen::Matrix<double,-1,1>::Constant(ni_ipd,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 40;
          stan::model::assign(eta_ipd_noRE,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_ipd, beta_tilde),
                              offset_ipd)) : stan::math::eval(
                                               stan::math::multiply(X_ipd,
                                                 beta_tilde))),
            "assigning variable eta_ipd_noRE");
          current_statement__ = 45;
          for (int i = 1; i <= ni_ipd; ++i) {
            current_statement__ = 43;
            if (stan::model::rvalue(which_RE, "which_RE",
                  stan::model::index_uni(
                    stan::model::rvalue(ipd_arm, "ipd_arm",
                      stan::model::index_uni(i))))) {
              current_statement__ = 42;
              stan::model::assign(eta_ipd,
                (stan::model::rvalue(eta_ipd_noRE, "eta_ipd_noRE",
                   stan::model::index_uni(i)) +
                stan::model::rvalue(f_delta, "f_delta",
                  stan::model::index_uni(
                    stan::model::rvalue(which_RE, "which_RE",
                      stan::model::index_uni(
                        stan::model::rvalue(ipd_arm, "ipd_arm",
                          stan::model::index_uni(i))))))),
                "assigning variable eta_ipd", stan::model::index_uni(i));
            } else {
              current_statement__ = 41;
              stan::model::assign(eta_ipd,
                stan::model::rvalue(eta_ipd_noRE, "eta_ipd_noRE",
                  stan::model::index_uni(i)), "assigning variable eta_ipd",
                stan::model::index_uni(i));
            }
          }
        } else {
          current_statement__ = 37;
          stan::model::assign(eta_ipd,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_ipd, beta_tilde),
                              offset_ipd)) : stan::math::eval(
                                               stan::math::multiply(X_ipd,
                                                 beta_tilde))),
            "assigning variable eta_ipd");
        }
      }
      current_statement__ = 85;
      if (ni_agd_contrast) {
        current_statement__ = 83;
        if (stan::math::logical_gt(nint_max, 1)) {
          current_statement__ = 63;
          stan::math::validate_non_negative_index("eta_agd_contrast_noRE",
            "nint_max * ni_agd_contrast", (nint_max * ni_agd_contrast));
          Eigen::Matrix<double,-1,1> eta_agd_contrast_noRE =
            Eigen::Matrix<double,-1,1>::Constant((nint_max *
              ni_agd_contrast), std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 64;
          stan::model::assign(eta_agd_contrast_noRE,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_agd_contrast, beta_tilde),
                              offset_agd_contrast)) : stan::math::eval(
                                                        stan::math::multiply(
                                                          X_agd_contrast,
                                                          beta_tilde))),
            "assigning variable eta_agd_contrast_noRE");
          current_statement__ = 81;
          if (RE) {
            current_statement__ = 79;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 76;
              if (stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i)))) {
                current_statement__ = 75;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::math::add(
                    stan::model::rvalue(eta_agd_contrast_noRE,
                      "eta_agd_contrast_noRE",
                      stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                        (((i - 1) * nint_max) + nint))),
                    stan::model::rvalue(f_delta, "f_delta",
                      stan::model::index_uni(
                        stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni(((narm_ipd + narm_agd_arm) +
                            i)))))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              } else {
                current_statement__ = 74;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE",
                    stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                      (((i - 1) * nint_max) + nint))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              }
              current_statement__ = 77;
              stan::model::assign(eta_agd_contrast_bar,
                stan::math::mean(
                  stan::model::rvalue(eta_agd_contrast_ii,
                    "eta_agd_contrast_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)))), "assigning variable eta_agd_contrast_bar",
                stan::model::index_uni(i));
            }
          } else {
            current_statement__ = 69;
            if (stan::math::logical_eq(nint, nint_max)) {
              current_statement__ = 68;
              stan::model::assign(eta_agd_contrast_ii, eta_agd_contrast_noRE,
                "assigning variable eta_agd_contrast_ii");
            } else {
              current_statement__ = 67;
              for (int i = 1; i <= ni_agd_contrast; ++i) {
                current_statement__ = 65;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE",
                    stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                      (((i - 1) * nint_max) + nint))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              }
            }
            current_statement__ = 72;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 70;
              stan::model::assign(eta_agd_contrast_bar,
                stan::math::mean(
                  stan::model::rvalue(eta_agd_contrast_ii,
                    "eta_agd_contrast_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)))), "assigning variable eta_agd_contrast_bar",
                stan::model::index_uni(i));
            }
          }
        } else {
          current_statement__ = 61;
          if (RE) {
            current_statement__ = 53;
            stan::math::validate_non_negative_index("eta_agd_contrast_noRE",
              "nint * ni_agd_contrast", (nint * ni_agd_contrast));
            Eigen::Matrix<double,-1,1> eta_agd_contrast_noRE =
              Eigen::Matrix<double,-1,1>::Constant((nint * ni_agd_contrast),
                std::numeric_limits<double>::quiet_NaN());
            current_statement__ = 54;
            stan::model::assign(eta_agd_contrast_noRE,
              (has_offset ? stan::math::eval(
                              stan::math::add(
                                stan::math::multiply(X_agd_contrast,
                                  beta_tilde), offset_agd_contrast)) : 
              stan::math::eval(
                stan::math::multiply(X_agd_contrast, beta_tilde))),
              "assigning variable eta_agd_contrast_noRE");
            current_statement__ = 59;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 57;
              if (stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i)))) {
                current_statement__ = 56;
                stan::model::assign(eta_agd_contrast_bar,
                  (stan::model::rvalue(eta_agd_contrast_noRE,
                     "eta_agd_contrast_noRE", stan::model::index_uni(i)) +
                  stan::model::rvalue(f_delta, "f_delta",
                    stan::model::index_uni(
                      stan::model::rvalue(which_RE, "which_RE",
                        stan::model::index_uni(((narm_ipd + narm_agd_arm) +
                          i)))))), "assigning variable eta_agd_contrast_bar",
                  stan::model::index_uni(i));
              } else {
                current_statement__ = 55;
                stan::model::assign(eta_agd_contrast_bar,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE", stan::model::index_uni(i)),
                  "assigning variable eta_agd_contrast_bar",
                  stan::model::index_uni(i));
              }
            }
          } else {
            current_statement__ = 51;
            stan::model::assign(eta_agd_contrast_bar,
              (has_offset ? stan::math::eval(
                              stan::math::add(
                                stan::math::multiply(X_agd_contrast,
                                  beta_tilde), offset_agd_contrast)) : 
              stan::math::eval(
                stan::math::multiply(X_agd_contrast, beta_tilde))),
              "assigning variable eta_agd_contrast_bar");
          }
        }
      }
      current_statement__ = 129;
      if (ni_ipd) {
        current_statement__ = 127;
        if ((stan::math::primitive_value(stan::math::logical_eq(nonexp, 0))
            || stan::math::primitive_value(aux_int))) {
          current_statement__ = 112;
          stan::math::validate_non_negative_index("auxi", "ni_ipd", ni_ipd);
          Eigen::Matrix<double,-1,1> auxi =
            Eigen::Matrix<double,-1,1>::Constant(ni_ipd,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 114;
          stan::math::validate_non_negative_index("aux2i", "ni_ipd", ni_ipd);
          Eigen::Matrix<double,-1,1> aux2i =
            Eigen::Matrix<double,-1,1>::Constant(ni_ipd,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 116;
          stan::math::validate_non_negative_index("eXbeta",
            "nonexp ? ni_ipd : 0", (nonexp ? ni_ipd : 0));
          current_statement__ = 117;
          stan::math::validate_non_negative_index("eXbeta",
            "nonexp + gengamma", (nonexp + gengamma));
          Eigen::Matrix<double,-1,-1> eXbeta =
            Eigen::Matrix<double,-1,-1>::Constant((nonexp ? ni_ipd : 0),
              (nonexp + gengamma), std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 120;
          if (nonexp) {
            current_statement__ = 119;
            stan::model::assign(eXbeta,
              stan::math::exp(stan::math::multiply(X_aux_ipd, beta_aux)),
              "assigning variable eXbeta");
          }
          current_statement__ = 122;
          if (nonexp) {
            current_statement__ = 121;
            stan::model::assign(auxi,
              stan::math::elt_multiply(
                stan::model::rvalue(aux, "aux",
                  stan::model::index_multi(aux_id_ipd)),
                stan::model::rvalue(eXbeta, "eXbeta",
                  stan::model::index_omni(), stan::model::index_uni(1))),
              "assigning variable auxi");
          }
          current_statement__ = 124;
          if (gengamma) {
            current_statement__ = 123;
            stan::model::assign(aux2i,
              stan::math::elt_multiply(
                stan::model::rvalue(aux2, "aux2",
                  stan::model::index_multi(aux_id_ipd)),
                stan::model::rvalue(eXbeta, "eXbeta",
                  stan::model::index_omni(), stan::model::index_uni(2))),
              "assigning variable aux2i");
          }
          current_statement__ = 125;
          stan::model::assign(log_L_ipd,
            loglik(dist, ipd_time, ipd_start_time, ipd_delay_time,
              ipd_status, eta_ipd, auxi, aux2i, pstream__),
            "assigning variable log_L_ipd");
        } else {
          current_statement__ = 110;
          for (int i = 1; i <= n_aux_group; ++i) {
            int ni = std::numeric_limits<int>::min();
            current_statement__ = 86;
            ni = stan::model::rvalue(ni_aux_group_ipd, "ni_aux_group_ipd",
                   stan::model::index_uni(i));
            current_statement__ = 108;
            if (ni) {
              current_statement__ = 87;
              stan::math::validate_non_negative_index("wi", "ni", ni);
              std::vector<int> wi =
                std::vector<int>(ni, std::numeric_limits<int>::min());
              current_statement__ = 88;
              stan::model::assign(wi,
                stan::model::rvalue(wi_aux_group_ipd, "wi_aux_group_ipd",
                  stan::model::index_uni(i),
                  stan::model::index_min_max(1, ni)), "assigning variable wi");
              double auxi = std::numeric_limits<double>::quiet_NaN();
              double aux2i = std::numeric_limits<double>::quiet_NaN();
              current_statement__ = 91;
              stan::math::validate_non_negative_index("eXbeta",
                "nonexp + gengamma", (nonexp + gengamma));
              Eigen::Matrix<double,1,-1> eXbeta =
                Eigen::Matrix<double,1,-1>::Constant((nonexp + gengamma),
                  std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 94;
              if (nonexp) {
                current_statement__ = 93;
                stan::model::assign(eXbeta,
                  stan::math::exp(
                    stan::math::multiply(
                      stan::model::rvalue(X_aux_ipd, "X_aux_ipd",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(1))),
                        stan::model::index_omni()), beta_aux)),
                  "assigning variable eXbeta");
              }
              current_statement__ = 105;
              if (nX_aux) {
                current_statement__ = 101;
                if (nonexp) {
                  current_statement__ = 100;
                  auxi = (stan::model::rvalue(aux, "aux",
                            stan::model::index_uni(
                              stan::model::rvalue(aux_id_ipd, "aux_id_ipd",
                                stan::model::index_uni(
                                  stan::model::rvalue(wi, "wi",
                                    stan::model::index_uni(1))))))
                    *
                    stan::model::rvalue(eXbeta, "eXbeta",
                      stan::model::index_uni(1)));
                }
                current_statement__ = 103;
                if (gengamma) {
                  current_statement__ = 102;
                  aux2i = (stan::model::rvalue(aux2, "aux2",
                             stan::model::index_uni(
                               stan::model::rvalue(aux_id_ipd, "aux_id_ipd",
                                 stan::model::index_uni(
                                   stan::model::rvalue(wi, "wi",
                                     stan::model::index_uni(1))))))
                    *
                    stan::model::rvalue(eXbeta, "eXbeta",
                      stan::model::index_uni(2)));
                }
              } else {
                current_statement__ = 96;
                if (nonexp) {
                  current_statement__ = 95;
                  auxi = stan::model::rvalue(aux, "aux",
                           stan::model::index_uni(i));
                }
                current_statement__ = 98;
                if (gengamma) {
                  current_statement__ = 97;
                  aux2i = stan::model::rvalue(aux2, "aux2",
                            stan::model::index_uni(i));
                }
              }
              current_statement__ = 106;
              stan::model::assign(log_L_ipd,
                loglik2(dist,
                  stan::model::rvalue(ipd_time, "ipd_time",
                    stan::model::index_multi(wi)),
                  stan::model::rvalue(ipd_start_time, "ipd_start_time",
                    stan::model::index_multi(wi)),
                  stan::model::rvalue(ipd_delay_time, "ipd_delay_time",
                    stan::model::index_multi(wi)),
                  stan::model::rvalue(ipd_status, "ipd_status",
                    stan::model::index_multi(wi)),
                  stan::model::rvalue(eta_ipd, "eta_ipd",
                    stan::model::index_multi(wi)), auxi, aux2i, pstream__),
                "assigning variable log_L_ipd", stan::model::index_multi(wi));
            }
          }
        }
      }
      current_statement__ = 242;
      if (ni_agd_arm) {
        current_statement__ = 130;
        stan::math::validate_non_negative_index("eta_agd_arm_noRE",
          "nint_max * ni_agd_arm", (nint_max * ni_agd_arm));
        Eigen::Matrix<double,-1,1> eta_agd_arm_noRE =
          Eigen::Matrix<double,-1,1>::Constant((nint_max * ni_agd_arm),
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 131;
        stan::model::assign(eta_agd_arm_noRE,
          (has_offset ? stan::math::eval(
                          stan::math::add(
                            stan::math::multiply(X_agd_arm, beta_tilde),
                            offset_agd_arm)) : stan::math::eval(
                                                 stan::math::multiply(
                                                   X_agd_arm, beta_tilde))),
          "assigning variable eta_agd_arm_noRE");
        current_statement__ = 240;
        if (stan::math::logical_gt(nint_max, 1)) {
          current_statement__ = 238;
          if ((stan::math::primitive_value(stan::math::logical_eq(nonexp, 0))
              || stan::math::primitive_value(aux_int))) {
            current_statement__ = 236;
            for (int i = 1; i <= ni_agd_arm; ++i) {
              current_statement__ = 213;
              stan::math::validate_non_negative_index("eta_agd_arm_ii",
                "nint", nint);
              Eigen::Matrix<double,-1,1> eta_agd_arm_ii =
                Eigen::Matrix<double,-1,1>::Constant(nint,
                  std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 215;
              stan::math::validate_non_negative_index("log_L_ii", "nint",
                nint);
              Eigen::Matrix<double,-1,1> log_L_ii =
                Eigen::Matrix<double,-1,1>::Constant(nint,
                  std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 217;
              stan::math::validate_non_negative_index("auxi", "nint", nint);
              Eigen::Matrix<double,-1,1> auxi =
                Eigen::Matrix<double,-1,1>::Constant(nint,
                  std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 219;
              stan::math::validate_non_negative_index("aux2i", "nint", nint);
              Eigen::Matrix<double,-1,1> aux2i =
                Eigen::Matrix<double,-1,1>::Constant(nint,
                  std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 221;
              stan::math::validate_non_negative_index("eXbeta",
                "nonexp ? nint : 0", (nonexp ? nint : 0));
              current_statement__ = 222;
              stan::math::validate_non_negative_index("eXbeta",
                "nonexp + gengamma", (nonexp + gengamma));
              Eigen::Matrix<double,-1,-1> eXbeta =
                Eigen::Matrix<double,-1,-1>::Constant((nonexp ? nint : 0),
                  (nonexp + gengamma),
                  std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 225;
              if (nonexp) {
                current_statement__ = 224;
                stan::model::assign(eXbeta,
                  stan::math::exp(
                    stan::math::multiply(
                      stan::model::rvalue(X_aux_agd_arm, "X_aux_agd_arm",
                        stan::model::index_min_max((1 + ((i - 1) *
                          nint_max)), (((i - 1) * nint_max) + nint)),
                        stan::model::index_omni()), beta_aux)),
                  "assigning variable eXbeta");
              }
              current_statement__ = 227;
              if (nonexp) {
                current_statement__ = 226;
                stan::model::assign(auxi,
                  stan::math::elt_multiply(
                    stan::model::rvalue(aux, "aux",
                      stan::model::index_multi(
                        stan::model::rvalue(aux_id_agd_arm, "aux_id_agd_arm",
                          stan::model::index_min_max((1 + ((i - 1) *
                            nint_max)), (((i - 1) * nint_max) + nint))))),
                    stan::model::rvalue(eXbeta, "eXbeta",
                      stan::model::index_omni(), stan::model::index_uni(1))),
                  "assigning variable auxi");
              }
              current_statement__ = 229;
              if (gengamma) {
                current_statement__ = 228;
                stan::model::assign(aux2i,
                  stan::math::elt_multiply(
                    stan::model::rvalue(aux2, "aux2",
                      stan::model::index_multi(
                        stan::model::rvalue(aux_id_agd_arm, "aux_id_agd_arm",
                          stan::model::index_min_max((1 + ((i - 1) *
                            nint_max)), (((i - 1) * nint_max) + nint))))),
                    stan::model::rvalue(eXbeta, "eXbeta",
                      stan::model::index_omni(), stan::model::index_uni(2))),
                  "assigning variable aux2i");
              }
              current_statement__ = 230;
              stan::model::assign(eta_agd_arm_ii,
                stan::model::rvalue(eta_agd_arm_noRE, "eta_agd_arm_noRE",
                  stan::model::index_min_max((1 + ((i - 1) * nint_max)), (((i
                    - 1) * nint_max) + nint))),
                "assigning variable eta_agd_arm_ii");
              current_statement__ = 232;
              if ((stan::math::primitive_value(RE) &&
                  stan::math::primitive_value(
                    stan::model::rvalue(which_RE, "which_RE",
                      stan::model::index_uni(
                        stan::model::rvalue(agd_arm_arm2, "agd_arm_arm2",
                          stan::model::index_uni(i))))))) {
                current_statement__ = 231;
                stan::model::assign(eta_agd_arm_ii,
                  stan::math::add(stan::model::deep_copy(eta_agd_arm_ii),
                    stan::model::rvalue(f_delta, "f_delta",
                      stan::model::index_uni(
                        stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni(
                            stan::model::rvalue(agd_arm_arm2, "agd_arm_arm2",
                              stan::model::index_uni(i))))))),
                  "assigning variable eta_agd_arm_ii");
              }
              current_statement__ = 233;
              stan::model::assign(log_L_ii,
                loglik_a2(dist,
                  stan::model::rvalue(agd_arm_time, "agd_arm_time",
                    stan::model::index_uni(i)),
                  stan::model::rvalue(agd_arm_start_time,
                    "agd_arm_start_time", stan::model::index_uni(i)),
                  stan::model::rvalue(agd_arm_delay_time,
                    "agd_arm_delay_time", stan::model::index_uni(i)),
                  stan::model::rvalue(agd_arm_status, "agd_arm_status",
                    stan::model::index_uni(i)), eta_agd_arm_ii, auxi, aux2i,
                  pstream__), "assigning variable log_L_ii");
              current_statement__ = 234;
              stan::model::assign(log_L_agd_arm,
                (stan::math::log_sum_exp(log_L_ii) - stan::math::log(nint)),
                "assigning variable log_L_agd_arm", stan::model::index_uni(i));
            }
          } else {
            current_statement__ = 211;
            for (int i = 1; i <= n_aux_group; ++i) {
              int ni = std::numeric_limits<int>::min();
              current_statement__ = 181;
              ni = stan::model::rvalue(ni_aux_group_agd_arm,
                     "ni_aux_group_agd_arm", stan::model::index_uni(i));
              current_statement__ = 209;
              if (ni) {
                current_statement__ = 182;
                stan::math::validate_non_negative_index("wi", "ni", ni);
                std::vector<int> wi =
                  std::vector<int>(ni, std::numeric_limits<int>::min());
                current_statement__ = 183;
                stan::model::assign(wi,
                  stan::model::rvalue(wi_aux_group_agd_arm,
                    "wi_aux_group_agd_arm", stan::model::index_uni(i),
                    stan::model::index_min_max(1, ni)),
                  "assigning variable wi");
                double auxi = std::numeric_limits<double>::quiet_NaN();
                double aux2i = std::numeric_limits<double>::quiet_NaN();
                current_statement__ = 186;
                stan::math::validate_non_negative_index("eXbeta",
                  "nonexp + gengamma", (nonexp + gengamma));
                Eigen::Matrix<double,1,-1> eXbeta =
                  Eigen::Matrix<double,1,-1>::Constant((nonexp + gengamma),
                    std::numeric_limits<double>::quiet_NaN());
                current_statement__ = 189;
                if (nonexp) {
                  current_statement__ = 188;
                  stan::model::assign(eXbeta,
                    stan::math::exp(
                      stan::math::multiply(
                        stan::model::rvalue(X_aux_agd_arm, "X_aux_agd_arm",
                          stan::model::index_uni(
                            stan::model::rvalue(wi, "wi",
                              stan::model::index_uni(1))),
                          stan::model::index_omni()), beta_aux)),
                    "assigning variable eXbeta");
                }
                current_statement__ = 196;
                if (nX_aux) {
                  current_statement__ = 193;
                  auxi = (nonexp ? (stan::model::rvalue(aux, "aux",
                                      stan::model::index_uni(
                                        stan::model::rvalue(aux_id_agd_arm,
                                          "aux_id_agd_arm",
                                          stan::model::index_uni(
                                            stan::model::rvalue(wi, "wi",
                                              stan::model::index_uni(1))))))
                    *
                    stan::model::rvalue(eXbeta, "eXbeta",
                      stan::model::index_uni(1))) : 0);
                  current_statement__ = 194;
                  aux2i = (gengamma ? (stan::model::rvalue(aux2, "aux2",
                                         stan::model::index_uni(
                                           stan::model::rvalue(
                                             aux_id_agd_arm,
                                             "aux_id_agd_arm",
                                             stan::model::index_uni(
                                               stan::model::rvalue(wi, "wi",
                                                 stan::model::index_uni(1))))))
                    *
                    stan::model::rvalue(eXbeta, "eXbeta",
                      stan::model::index_uni(2))) : 0);
                } else {
                  current_statement__ = 190;
                  auxi = (nonexp ? stan::model::rvalue(aux, "aux",
                                     stan::model::index_uni(i)) : 0);
                  current_statement__ = 191;
                  aux2i = (gengamma ? stan::model::rvalue(aux2, "aux2",
                                        stan::model::index_uni(i)) : 0);
                }
                current_statement__ = 207;
                for (int j = 1; j <= ni; ++j) {
                  current_statement__ = 197;
                  stan::math::validate_non_negative_index("eta_agd_arm_ii",
                    "nint", nint);
                  Eigen::Matrix<double,-1,1> eta_agd_arm_ii =
                    Eigen::Matrix<double,-1,1>::Constant(nint,
                      std::numeric_limits<double>::quiet_NaN());
                  current_statement__ = 199;
                  stan::math::validate_non_negative_index("log_L_ii", "nint",
                    nint);
                  Eigen::Matrix<double,-1,1> log_L_ii =
                    Eigen::Matrix<double,-1,1>::Constant(nint,
                      std::numeric_limits<double>::quiet_NaN());
                  current_statement__ = 201;
                  stan::model::assign(eta_agd_arm_ii,
                    stan::model::rvalue(eta_agd_arm_noRE, "eta_agd_arm_noRE",
                      stan::model::index_min_max((1 +
                        ((stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)) - 1) * nint_max)),
                        (((stan::model::rvalue(wi, "wi",
                             stan::model::index_uni(j)) - 1) * nint_max) +
                        nint))), "assigning variable eta_agd_arm_ii");
                  current_statement__ = 203;
                  if ((stan::math::primitive_value(RE) &&
                      stan::math::primitive_value(
                        stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni(
                            stan::model::rvalue(agd_arm_arm2, "agd_arm_arm2",
                              stan::model::index_uni(
                                stan::model::rvalue(wi, "wi",
                                  stan::model::index_uni(j))))))))) {
                    current_statement__ = 202;
                    stan::model::assign(eta_agd_arm_ii,
                      stan::math::add(stan::model::deep_copy(eta_agd_arm_ii),
                        stan::model::rvalue(f_delta, "f_delta",
                          stan::model::index_uni(
                            stan::model::rvalue(which_RE, "which_RE",
                              stan::model::index_uni(
                                stan::model::rvalue(agd_arm_arm2,
                                  "agd_arm_arm2",
                                  stan::model::index_uni(
                                    stan::model::rvalue(wi, "wi",
                                      stan::model::index_uni(j))))))))),
                      "assigning variable eta_agd_arm_ii");
                  }
                  current_statement__ = 204;
                  stan::model::assign(log_L_ii,
                    loglik_a(dist,
                      stan::model::rvalue(agd_arm_time, "agd_arm_time",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))),
                      stan::model::rvalue(agd_arm_start_time,
                        "agd_arm_start_time",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))),
                      stan::model::rvalue(agd_arm_delay_time,
                        "agd_arm_delay_time",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))),
                      stan::model::rvalue(agd_arm_status, "agd_arm_status",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))), eta_agd_arm_ii,
                      auxi, aux2i, pstream__), "assigning variable log_L_ii");
                  current_statement__ = 205;
                  stan::model::assign(log_L_agd_arm,
                    (stan::math::log_sum_exp(log_L_ii) -
                    stan::math::log(nint)),
                    "assigning variable log_L_agd_arm",
                    stan::model::index_uni(
                      stan::model::rvalue(wi, "wi", stan::model::index_uni(j))));
                }
              }
            }
          }
        } else {
          current_statement__ = 132;
          stan::math::validate_non_negative_index("eta_agd_arm",
            "ni_agd_arm", ni_agd_arm);
          Eigen::Matrix<double,-1,1> eta_agd_arm =
            Eigen::Matrix<double,-1,1>::Constant(ni_agd_arm,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 133;
          stan::model::assign(eta_agd_arm, eta_agd_arm_noRE,
            "assigning variable eta_agd_arm");
          current_statement__ = 137;
          if (RE) {
            current_statement__ = 136;
            for (int i = 1; i <= ni_agd_arm; ++i) {
              current_statement__ = 135;
              if (stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni(
                      stan::model::rvalue(agd_arm_arm2, "agd_arm_arm2",
                        stan::model::index_uni(i))))) {
                current_statement__ = 134;
                stan::model::assign(eta_agd_arm,
                  (stan::model::rvalue(eta_agd_arm, "eta_agd_arm",
                     stan::model::index_uni(i)) +
                  stan::model::rvalue(f_delta, "f_delta",
                    stan::model::index_uni(
                      stan::model::rvalue(which_RE, "which_RE",
                        stan::model::index_uni(
                          stan::model::rvalue(agd_arm_arm2, "agd_arm_arm2",
                            stan::model::index_uni(i))))))),
                  "assigning variable eta_agd_arm", stan::model::index_uni(i));
              }
            }
          }
          current_statement__ = 179;
          if ((stan::math::primitive_value(stan::math::logical_eq(nonexp, 0))
              || stan::math::primitive_value(aux_int))) {
            current_statement__ = 164;
            stan::math::validate_non_negative_index("auxi", "ni_agd_arm",
              ni_agd_arm);
            Eigen::Matrix<double,-1,1> auxi =
              Eigen::Matrix<double,-1,1>::Constant(ni_agd_arm,
                std::numeric_limits<double>::quiet_NaN());
            current_statement__ = 166;
            stan::math::validate_non_negative_index("aux2i", "ni_agd_arm",
              ni_agd_arm);
            Eigen::Matrix<double,-1,1> aux2i =
              Eigen::Matrix<double,-1,1>::Constant(ni_agd_arm,
                std::numeric_limits<double>::quiet_NaN());
            current_statement__ = 168;
            stan::math::validate_non_negative_index("eXbeta", "ni_agd_arm",
              ni_agd_arm);
            current_statement__ = 169;
            stan::math::validate_non_negative_index("eXbeta",
              "nonexp + gengamma", (nonexp + gengamma));
            Eigen::Matrix<double,-1,-1> eXbeta =
              Eigen::Matrix<double,-1,-1>::Constant(ni_agd_arm, (nonexp +
                gengamma), std::numeric_limits<double>::quiet_NaN());
            current_statement__ = 172;
            if (nonexp) {
              current_statement__ = 171;
              stan::model::assign(eXbeta,
                stan::math::exp(stan::math::multiply(X_aux_agd_arm, beta_aux)),
                "assigning variable eXbeta");
            }
            current_statement__ = 174;
            if (nonexp) {
              current_statement__ = 173;
              stan::model::assign(auxi,
                stan::math::elt_multiply(
                  stan::model::rvalue(aux, "aux",
                    stan::model::index_multi(aux_id_agd_arm)),
                  stan::model::rvalue(eXbeta, "eXbeta",
                    stan::model::index_omni(), stan::model::index_uni(1))),
                "assigning variable auxi");
            }
            current_statement__ = 176;
            if (gengamma) {
              current_statement__ = 175;
              stan::model::assign(aux2i,
                stan::math::elt_multiply(
                  stan::model::rvalue(aux2, "aux2",
                    stan::model::index_multi(aux_id_agd_arm)),
                  stan::model::rvalue(eXbeta, "eXbeta",
                    stan::model::index_omni(), stan::model::index_uni(2))),
                "assigning variable aux2i");
            }
            current_statement__ = 177;
            stan::model::assign(log_L_agd_arm,
              loglik(dist, agd_arm_time, agd_arm_start_time,
                agd_arm_delay_time, agd_arm_status, eta_agd_arm, auxi, aux2i,
                pstream__), "assigning variable log_L_agd_arm");
          } else {
            current_statement__ = 162;
            for (int i = 1; i <= n_aux_group; ++i) {
              int ni = std::numeric_limits<int>::min();
              current_statement__ = 138;
              ni = stan::model::rvalue(ni_aux_group_agd_arm,
                     "ni_aux_group_agd_arm", stan::model::index_uni(i));
              current_statement__ = 160;
              if (ni) {
                current_statement__ = 139;
                stan::math::validate_non_negative_index("wi", "ni", ni);
                std::vector<int> wi =
                  std::vector<int>(ni, std::numeric_limits<int>::min());
                current_statement__ = 140;
                stan::model::assign(wi,
                  stan::model::rvalue(wi_aux_group_agd_arm,
                    "wi_aux_group_agd_arm", stan::model::index_uni(i),
                    stan::model::index_min_max(1, ni)),
                  "assigning variable wi");
                double auxi = std::numeric_limits<double>::quiet_NaN();
                double aux2i = std::numeric_limits<double>::quiet_NaN();
                current_statement__ = 143;
                stan::math::validate_non_negative_index("eXbeta",
                  "nonexp + gengamma", (nonexp + gengamma));
                Eigen::Matrix<double,1,-1> eXbeta =
                  Eigen::Matrix<double,1,-1>::Constant((nonexp + gengamma),
                    std::numeric_limits<double>::quiet_NaN());
                current_statement__ = 146;
                if (nonexp) {
                  current_statement__ = 145;
                  stan::model::assign(eXbeta,
                    stan::math::exp(
                      stan::math::multiply(
                        stan::model::rvalue(X_aux_agd_arm, "X_aux_agd_arm",
                          stan::model::index_uni(
                            stan::model::rvalue(wi, "wi",
                              stan::model::index_uni(1))),
                          stan::model::index_omni()), beta_aux)),
                    "assigning variable eXbeta");
                }
                current_statement__ = 157;
                if (nX_aux) {
                  current_statement__ = 153;
                  if (nonexp) {
                    current_statement__ = 152;
                    auxi = (stan::model::rvalue(aux, "aux",
                              stan::model::index_uni(
                                stan::model::rvalue(aux_id_agd_arm,
                                  "aux_id_agd_arm",
                                  stan::model::index_uni(
                                    stan::model::rvalue(wi, "wi",
                                      stan::model::index_uni(1))))))
                      *
                      stan::model::rvalue(eXbeta, "eXbeta",
                        stan::model::index_uni(1)));
                  }
                  current_statement__ = 155;
                  if (gengamma) {
                    current_statement__ = 154;
                    aux2i = (stan::model::rvalue(aux2, "aux2",
                               stan::model::index_uni(
                                 stan::model::rvalue(aux_id_agd_arm,
                                   "aux_id_agd_arm",
                                   stan::model::index_uni(
                                     stan::model::rvalue(wi, "wi",
                                       stan::model::index_uni(1))))))
                      *
                      stan::model::rvalue(eXbeta, "eXbeta",
                        stan::model::index_uni(2)));
                  }
                } else {
                  current_statement__ = 148;
                  if (nonexp) {
                    current_statement__ = 147;
                    auxi = stan::model::rvalue(aux, "aux",
                             stan::model::index_uni(i));
                  }
                  current_statement__ = 150;
                  if (gengamma) {
                    current_statement__ = 149;
                    aux2i = stan::model::rvalue(aux2, "aux2",
                              stan::model::index_uni(i));
                  }
                }
                current_statement__ = 158;
                stan::model::assign(log_L_agd_arm,
                  loglik2(dist,
                    stan::model::rvalue(agd_arm_time, "agd_arm_time",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(agd_arm_start_time,
                      "agd_arm_start_time", stan::model::index_multi(wi)),
                    stan::model::rvalue(agd_arm_delay_time,
                      "agd_arm_delay_time", stan::model::index_multi(wi)),
                    stan::model::rvalue(agd_arm_status, "agd_arm_status",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(eta_agd_arm, "eta_agd_arm",
                      stan::model::index_multi(wi)), auxi, aux2i, pstream__),
                  "assigning variable log_L_agd_arm",
                  stan::model::index_multi(wi));
              }
            }
          }
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(log_L_ipd);
        out__.write(log_L_agd_arm);
        out__.write(eta_ipd);
        out__.write(f_delta);
        out__.write(allbeta);
        out__.write(mu);
        out__.write(d);
        out__.write(omega);
        out__.write(beta);
        out__.write(eta_agd_contrast_ii);
        out__.write(eta_agd_contrast_bar);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> shape =
        Eigen::Matrix<double,-1,1>::Constant(shape_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sdlog =
        Eigen::Matrix<double,-1,1>::Constant(sdlog_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sigma =
        Eigen::Matrix<double,-1,1>::Constant(sigma_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> k =
        Eigen::Matrix<double,-1,1>::Constant(k_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> d_aux =
        Eigen::Matrix<double,-1,-1>::Constant(d_aux_1dim__, d_aux_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(log_lik_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> resdev =
        Eigen::Matrix<double,-1,1>::Constant(resdev_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> fitted_agd_contrast =
        Eigen::Matrix<double,-1,1>::Constant(ni_agd_contrast,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> theta_bar_cum_agd_contrast =
        Eigen::Matrix<double,-1,1>::Constant(theta_bar_cum_agd_contrast_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> delta =
        Eigen::Matrix<double,-1,1>::Constant(n_delta,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 259;
      if (RE) {
        int s = std::numeric_limits<int>::min();
        current_statement__ = 243;
        s = 1;
        current_statement__ = 249;
        for (int i = 1; i <= (narm_ipd + narm_agd_arm); ++i) {
          current_statement__ = 247;
          if (stan::model::rvalue(which_RE, "which_RE",
                stan::model::index_uni(i))) {
            current_statement__ = 244;
            stan::model::assign(delta,
              ((stan::math::logical_gt(
                  stan::model::rvalue(trt, "trt", stan::model::index_uni(i)),
                  1) ? stan::model::rvalue(d, "d",
                         stan::model::index_uni(
                           (stan::model::rvalue(trt, "trt",
                              stan::model::index_uni(i)) - 1))) : 0) +
              (stan::model::rvalue(which_RE, "which_RE",
                 stan::model::index_uni(i)) ? stan::model::rvalue(f_delta,
                                                "f_delta",
                                                stan::model::index_uni(
                                                  stan::model::rvalue(
                                                    which_RE, "which_RE",
                                                    stan::model::index_uni(i)))) : 0)),
              "assigning variable delta", stan::model::index_uni(s));
            current_statement__ = 245;
            s = (s + 1);
          }
        }
        current_statement__ = 257;
        for (int i = 1; i <= ni_agd_contrast; ++i) {
          current_statement__ = 255;
          if (stan::model::rvalue(which_RE, "which_RE",
                stan::model::index_uni(((narm_ipd + narm_agd_arm) + i)))) {
            current_statement__ = 250;
            stan::model::assign(delta,
              ((stan::math::logical_gt(
                  stan::model::rvalue(trt, "trt",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i))),
                  1) ? stan::model::rvalue(d, "d",
                         stan::model::index_uni(
                           (stan::model::rvalue(trt, "trt",
                              stan::model::index_uni(((narm_ipd +
                                narm_agd_arm) + i))) - 1))) : 0) +
              (stan::model::rvalue(which_RE, "which_RE",
                 stan::model::index_uni(((narm_ipd + narm_agd_arm) + i))) ? 
              stan::model::rvalue(f_delta, "f_delta",
                stan::model::index_uni(
                  stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i))))) : 0)),
              "assigning variable delta", stan::model::index_uni(s));
            current_statement__ = 252;
            if (stan::math::logical_gt(
                  stan::model::rvalue(agd_contrast_trt_b,
                    "agd_contrast_trt_b", stan::model::index_uni(i)), 1)) {
              current_statement__ = 251;
              stan::model::assign(delta,
                (stan::model::rvalue(delta, "delta",
                   stan::model::index_uni(s)) -
                stan::model::rvalue(d, "d",
                  stan::model::index_uni(
                    (stan::model::rvalue(agd_contrast_trt_b,
                       "agd_contrast_trt_b", stan::model::index_uni(i)) - 1)))),
                "assigning variable delta", stan::model::index_uni(s));
            }
            current_statement__ = 253;
            s = (s + 1);
          }
        }
      }
      current_statement__ = 264;
      for (int i = 1; i <= ni_agd_contrast; ++i) {
        current_statement__ = 262;
        for (int j = 1; j <= n_int_thin; ++j) {
          current_statement__ = 260;
          stan::model::assign(theta_bar_cum_agd_contrast,
            stan::math::mean(
              stan::model::rvalue(eta_agd_contrast_ii, "eta_agd_contrast_ii",
                stan::model::index_min_max((1 + ((i - 1) * nint)), (((i - 1)
                  * nint) + (j * int_thin))))),
            "assigning variable theta_bar_cum_agd_contrast",
            stan::model::index_uni((((i - 1) * n_int_thin) + j)));
        }
      }
      current_statement__ = 265;
      stan::model::assign(fitted_agd_contrast, eta_agd_contrast_bar,
        "assigning variable fitted_agd_contrast");
      {
        int a = std::numeric_limits<int>::min();
        current_statement__ = 266;
        a = 0;
        int nc = std::numeric_limits<int>::min();
        current_statement__ = 273;
        for (int s = 1; s <= ns_agd_contrast; ++s) {
          current_statement__ = 268;
          nc = stan::model::rvalue(nc_agd_contrast, "nc_agd_contrast",
                 stan::model::index_uni(s));
          current_statement__ = 269;
          stan::model::assign(log_lik,
            stan::math::multi_normal_lpdf<false>(
              stan::model::rvalue(agd_contrast_y, "agd_contrast_y",
                stan::model::index_min_max((a + 1), (a + nc))),
              stan::model::rvalue(eta_agd_contrast_bar,
                "eta_agd_contrast_bar",
                stan::model::index_min_max((a + 1), (a + nc))),
              stan::model::rvalue(agd_contrast_Sigma, "agd_contrast_Sigma",
                stan::model::index_min_max((a + 1), (a + nc)),
                stan::model::index_min_max((a + 1), (a + nc)))),
            "assigning variable log_lik",
            stan::model::index_uni(((ni_ipd + ni_agd_arm) + s)));
          current_statement__ = 270;
          stan::model::assign(resdev,
            stan::math::quad_form(
              stan::model::rvalue(inv_Sigma, "inv_Sigma",
                stan::model::index_min_max((a + 1), (a + nc)),
                stan::model::index_min_max((a + 1), (a + nc))),
              stan::math::subtract(
                stan::model::rvalue(agd_contrast_y, "agd_contrast_y",
                  stan::model::index_min_max((a + 1), (a + nc))),
                stan::model::rvalue(eta_agd_contrast_bar,
                  "eta_agd_contrast_bar",
                  stan::model::index_min_max((a + 1), (a + nc))))),
            "assigning variable resdev",
            stan::model::index_uni(((ni_ipd + ni_agd_arm) + s)));
          current_statement__ = 271;
          a = (a + nc);
        }
      }
      current_statement__ = 276;
      if (ni_ipd) {
        current_statement__ = 275;
        stan::model::assign(log_lik, log_L_ipd, "assigning variable log_lik",
          stan::model::index_min_max(1, ni_ipd));
      }
      current_statement__ = 278;
      if (ni_agd_arm) {
        current_statement__ = 277;
        stan::model::assign(log_lik, log_L_agd_arm,
          "assigning variable log_lik",
          stan::model::index_min_max((ni_ipd + 1), (ni_ipd + ni_agd_arm)));
      }
      current_statement__ = 280;
      if ((ni_ipd + ni_agd_arm)) {
        current_statement__ = 279;
        stan::model::assign(resdev,
          stan::math::multiply(-2,
            stan::model::rvalue(log_lik, "log_lik",
              stan::model::index_min_max(1, (ni_ipd + ni_agd_arm)))),
          "assigning variable resdev",
          stan::model::index_min_max(1, (ni_ipd + ni_agd_arm)));
      }
      current_statement__ = 282;
      if ((stan::math::primitive_value(
             (stan::math::primitive_value(
                (stan::math::primitive_value(stan::math::logical_neq(dist, 1))
                &&
                stan::math::primitive_value(stan::math::logical_neq(dist, 4))))
             &&
             stan::math::primitive_value(stan::math::logical_neq(dist, 6))))
          && stan::math::primitive_value(stan::math::logical_neq(dist, 9)))) {
        current_statement__ = 281;
        stan::model::assign(shape, aux, "assigning variable shape");
      }
      current_statement__ = 284;
      if (stan::math::logical_eq(dist, 6)) {
        current_statement__ = 283;
        stan::model::assign(sdlog, aux, "assigning variable sdlog");
      }
      current_statement__ = 288;
      if (stan::math::logical_eq(dist, 9)) {
        current_statement__ = 285;
        stan::model::assign(sigma, aux, "assigning variable sigma");
        current_statement__ = 286;
        stan::model::assign(k, aux2, "assigning variable k");
      }
      current_statement__ = 290;
      if (aux_reg_trt) {
        current_statement__ = 289;
        stan::model::assign(d_aux,
          stan::model::rvalue(beta_aux, "beta_aux",
            stan::model::index_min_max(1, (nt - 1)),
            stan::model::index_omni()), "assigning variable d_aux");
      }
      out__.write(shape);
      out__.write(sdlog);
      out__.write(sigma);
      out__.write(k);
      out__.write(d_aux);
      out__.write(log_lik);
      out__.write(resdev);
      out__.write(fitted_agd_contrast);
      out__.write(theta_bar_cum_agd_contrast);
      out__.write(delta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta_tilde =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nX, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta_tilde,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nX),
        "assigning variable beta_tilde");
      out__.write(beta_tilde);
      Eigen::Matrix<local_scalar_t__,-1,1> u_delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_delta, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(u_delta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_delta),
        "assigning variable u_delta");
      out__.write(u_delta);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tau_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(tau,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(tau_1dim__),
        "assigning variable tau");
      out__.write_free_lb(0, tau);
      Eigen::Matrix<local_scalar_t__,-1,1> aux =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_aux, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(aux,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_aux),
        "assigning variable aux");
      out__.write_free_lb(0, aux);
      Eigen::Matrix<local_scalar_t__,-1,1> aux2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(aux2_1dim__,
          DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(aux2,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(aux2_1dim__),
        "assigning variable aux2");
      out__.write_free_lb(0, aux2);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_aux =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_aux_1dim__,
          beta_aux_2dim__, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(beta_aux,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(beta_aux_1dim__,
          beta_aux_2dim__), "assigning variable beta_aux");
      out__.write(beta_aux);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta_tilde",
        "double", std::vector<size_t>{static_cast<size_t>(nX)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "u_delta",
        "double", std::vector<size_t>{static_cast<size_t>(n_delta)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "tau", "double",
        std::vector<size_t>{static_cast<size_t>(tau_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "aux", "double",
        std::vector<size_t>{static_cast<size_t>(n_aux)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "aux2", "double",
        std::vector<size_t>{static_cast<size_t>(aux2_1dim__)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "beta_aux",
        "double",
        std::vector<size_t>{static_cast<size_t>(beta_aux_1dim__),
          static_cast<size_t>(beta_aux_2dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta_tilde =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nX, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_tilde_flat__;
        current_statement__ = 1;
        beta_tilde_flat__ = context__.vals_r("beta_tilde");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(beta_tilde, beta_tilde_flat__[(pos__ - 1)],
            "assigning variable beta_tilde", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta_tilde);
      Eigen::Matrix<local_scalar_t__,-1,1> u_delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_delta, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> u_delta_flat__;
        current_statement__ = 2;
        u_delta_flat__ = context__.vals_r("u_delta");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(u_delta, u_delta_flat__[(pos__ - 1)],
            "assigning variable u_delta", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(u_delta);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tau_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> tau_flat__;
        current_statement__ = 3;
        tau_flat__ = context__.vals_r("tau");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(tau, tau_flat__[(pos__ - 1)],
            "assigning variable tau", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, tau);
      Eigen::Matrix<local_scalar_t__,-1,1> aux =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_aux, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> aux_flat__;
        current_statement__ = 4;
        aux_flat__ = context__.vals_r("aux");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= n_aux; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(aux, aux_flat__[(pos__ - 1)],
            "assigning variable aux", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, aux);
      Eigen::Matrix<local_scalar_t__,-1,1> aux2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(aux2_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> aux2_flat__;
        current_statement__ = 5;
        aux2_flat__ = context__.vals_r("aux2");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= aux2_1dim__; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(aux2, aux2_flat__[(pos__ - 1)],
            "assigning variable aux2", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, aux2);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_aux =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_aux_1dim__,
          beta_aux_2dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_aux_flat__;
        current_statement__ = 6;
        beta_aux_flat__ = context__.vals_r("beta_aux");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= beta_aux_2dim__; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= beta_aux_1dim__; ++sym2__) {
            current_statement__ = 6;
            stan::model::assign(beta_aux, beta_aux_flat__[(pos__ - 1)],
              "assigning variable beta_aux", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 6;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(beta_aux);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta_tilde", "u_delta", "tau", "aux",
                "aux2", "beta_aux"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"log_L_ipd", "log_L_agd_arm", "eta_ipd", "f_delta", "allbeta",
             "mu", "d", "omega", "beta", "eta_agd_contrast_ii",
             "eta_agd_contrast_bar"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"shape", "sdlog", "sigma", "k", "d_aux", "log_lik", "resdev",
             "fitted_agd_contrast", "theta_bar_cum_agd_contrast", "delta"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    nX)},
                std::vector<size_t>{static_cast<size_t>(n_delta)},
                std::vector<size_t>{static_cast<size_t>(tau_1dim__)},
                std::vector<size_t>{static_cast<size_t>(n_aux)},
                std::vector<size_t>{static_cast<size_t>(aux2_1dim__)},
                std::vector<size_t>{static_cast<size_t>(beta_aux_1dim__),
                  static_cast<size_t>(beta_aux_2dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(ni_ipd)},
             std::vector<size_t>{static_cast<size_t>(ni_agd_arm)},
             std::vector<size_t>{static_cast<size_t>(ni_ipd)},
             std::vector<size_t>{static_cast<size_t>(n_delta)},
             std::vector<size_t>{static_cast<size_t>(nX)},
             std::vector<size_t>{static_cast<size_t>(totns)},
             std::vector<size_t>{static_cast<size_t>(d_1dim__)},
             std::vector<size_t>{static_cast<size_t>(nodesplit)},
             std::vector<size_t>{static_cast<size_t>(beta_1dim__)},
             std::vector<size_t>{static_cast<size_t>(
                                   eta_agd_contrast_ii_1dim__)},
             std::vector<size_t>{static_cast<size_t>(ni_agd_contrast)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(shape_1dim__)},
             std::vector<size_t>{static_cast<size_t>(sdlog_1dim__)},
             std::vector<size_t>{static_cast<size_t>(sigma_1dim__)},
             std::vector<size_t>{static_cast<size_t>(k_1dim__)},
             std::vector<size_t>{static_cast<size_t>(d_aux_1dim__),
               static_cast<size_t>(d_aux_2dim__)},
             std::vector<size_t>{static_cast<size_t>(log_lik_1dim__)},
             std::vector<size_t>{static_cast<size_t>(resdev_1dim__)},
             std::vector<size_t>{static_cast<size_t>(ni_agd_contrast)},
             std::vector<size_t>{static_cast<size_t>(
                                   theta_bar_cum_agd_contrast_1dim__)},
             std::vector<size_t>{static_cast<size_t>(n_delta)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_tilde" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
      param_names__.emplace_back(std::string() + "u_delta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_aux; ++sym1__) {
      param_names__.emplace_back(std::string() + "aux" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= aux2_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "aux2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_aux_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= beta_aux_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta_aux" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= ni_ipd; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_L_ipd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_agd_arm; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_L_agd_arm" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_ipd; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_ipd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
        param_names__.emplace_back(std::string() + "f_delta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
        param_names__.emplace_back(std::string() + "allbeta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= totns; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= d_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "d" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nodesplit; ++sym1__) {
        param_names__.emplace_back(std::string() + "omega" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= eta_agd_contrast_ii_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_agd_contrast_ii" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_agd_contrast; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_agd_contrast_bar" +
          '.' + std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= shape_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "shape" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= sdlog_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "sdlog" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= k_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "k" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= d_aux_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= d_aux_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "d_aux" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= resdev_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "resdev" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_agd_contrast; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_agd_contrast" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <=
           theta_bar_cum_agd_contrast_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "theta_bar_cum_agd_contrast" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
        param_names__.emplace_back(std::string() + "delta" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_tilde" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
      param_names__.emplace_back(std::string() + "u_delta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_aux; ++sym1__) {
      param_names__.emplace_back(std::string() + "aux" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= aux2_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "aux2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_aux_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= beta_aux_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta_aux" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= ni_ipd; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_L_ipd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_agd_arm; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_L_agd_arm" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_ipd; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_ipd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
        param_names__.emplace_back(std::string() + "f_delta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
        param_names__.emplace_back(std::string() + "allbeta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= totns; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= d_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "d" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nodesplit; ++sym1__) {
        param_names__.emplace_back(std::string() + "omega" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= eta_agd_contrast_ii_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_agd_contrast_ii" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_agd_contrast; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_agd_contrast_bar" +
          '.' + std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= shape_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "shape" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= sdlog_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "sdlog" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= k_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "k" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= d_aux_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= d_aux_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "d_aux" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= resdev_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "resdev" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_agd_contrast; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_agd_contrast" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <=
           theta_bar_cum_agd_contrast_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "theta_bar_cum_agd_contrast" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
        param_names__.emplace_back(std::string() + "delta" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nX) + "},\"block\":\"parameters\"},{\"name\":\"u_delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tau_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"aux\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_aux) + "},\"block\":\"parameters\"},{\"name\":\"aux2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(aux2_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_aux\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(beta_aux_1dim__) + ",\"cols\":" + std::to_string(beta_aux_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"log_L_ipd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_ipd) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_L_agd_arm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_agd_arm) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_ipd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_ipd) + "},\"block\":\"transformed_parameters\"},{\"name\":\"f_delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"transformed_parameters\"},{\"name\":\"allbeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nX) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(totns) + "},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nodesplit) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_agd_contrast_ii\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eta_agd_contrast_ii_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_agd_contrast_bar\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_agd_contrast) + "},\"block\":\"transformed_parameters\"},{\"name\":\"shape\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(shape_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"sdlog\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sdlog_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sigma_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"k\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"d_aux\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d_aux_1dim__) + ",\"cols\":" + std::to_string(d_aux_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"resdev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(resdev_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"fitted_agd_contrast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_agd_contrast) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta_bar_cum_agd_contrast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(theta_bar_cum_agd_contrast_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nX) + "},\"block\":\"parameters\"},{\"name\":\"u_delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tau_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"aux\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_aux) + "},\"block\":\"parameters\"},{\"name\":\"aux2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(aux2_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_aux\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(beta_aux_1dim__) + ",\"cols\":" + std::to_string(beta_aux_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"log_L_ipd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_ipd) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_L_agd_arm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_agd_arm) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_ipd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_ipd) + "},\"block\":\"transformed_parameters\"},{\"name\":\"f_delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"transformed_parameters\"},{\"name\":\"allbeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nX) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(totns) + "},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nodesplit) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_agd_contrast_ii\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eta_agd_contrast_ii_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_agd_contrast_bar\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_agd_contrast) + "},\"block\":\"transformed_parameters\"},{\"name\":\"shape\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(shape_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"sdlog\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sdlog_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sigma_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"k\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"d_aux\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d_aux_1dim__) + ",\"cols\":" + std::to_string(d_aux_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"resdev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(resdev_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"fitted_agd_contrast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_agd_contrast) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta_bar_cum_agd_contrast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(theta_bar_cum_agd_contrast_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((nX + n_delta) + tau_1dim__) + n_aux) +
      aux2_1dim__) + (beta_aux_1dim__ * beta_aux_2dim__));
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((((ni_ipd + ni_agd_arm) + ni_ipd) + n_delta) + nX) + totns) +
      d_1dim__) + nodesplit) + beta_1dim__) + eta_agd_contrast_ii_1dim__) +
      ni_agd_contrast));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((shape_1dim__ + sdlog_1dim__) + sigma_1dim__) + k_1dim__) +
      (d_aux_1dim__ * d_aux_2dim__)) + log_lik_1dim__) + resdev_1dim__) +
      ni_agd_contrast) + theta_bar_cum_agd_contrast_1dim__) + n_delta));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((nX + n_delta) + tau_1dim__) + n_aux) +
      aux2_1dim__) + (beta_aux_1dim__ * beta_aux_2dim__));
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((((ni_ipd + ni_agd_arm) + ni_ipd) + n_delta) + nX) + totns) +
      d_1dim__) + nodesplit) + beta_1dim__) + eta_agd_contrast_ii_1dim__) +
      ni_agd_contrast));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((shape_1dim__ + sdlog_1dim__) + sigma_1dim__) + k_1dim__) +
      (d_aux_1dim__ * d_aux_2dim__)) + log_lik_1dim__) + resdev_1dim__) +
      ni_agd_contrast) + theta_bar_cum_agd_contrast_1dim__) + n_delta));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_survival_param_namespace::model_survival_param;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_survival_param_namespace::profiles__;
}
#endif
#endif
