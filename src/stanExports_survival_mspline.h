// Generated by rstantools.  Do not edit by hand.

/*
    multinma is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    multinma is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with multinma.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_survival_mspline_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 900> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 575, column 0 to column 22)",
  " (in 'string', line 578, column 0 to column 24)",
  " (in 'string', line 579, column 0 to column 34)",
  " (in 'string', line 582, column 0 to column 53)",
  " (in 'string', line 583, column 0 to column 63)",
  " (in 'string', line 586, column 0 to column 49)",
  " (in 'string', line 588, column 2 to column 39)",
  " (in 'string', line 589, column 2 to column 71)",
  " (in 'string', line 591, column 2 to column 31)",
  " (in 'string', line 592, column 2 to column 39)",
  " (in 'string', line 596, column 2 to column 27)",
  " (in 'string', line 597, column 2 to column 35)",
  " (in 'string', line 599, column 2 to column 40)",
  " (in 'string', line 600, column 2 to column 55)",
  " (in 'string', line 602, column 2 to column 37)",
  " (in 'string', line 607, column 0 to column 23)",
  " (in 'string', line 612, column 0 to line 617, column 14)",
  " (in 'string', line 620, column 2 to column 60)",
  " (in 'string', line 622, column 2 to column 19)",
  " (in 'string', line 624, column 2 to column 58)",
  " (in 'string', line 626, column 2 to column 26)",
  " (in 'string', line 628, column 2 to column 49)",
  " (in 'string', line 633, column 2 to column 72)",
  " (in 'string', line 634, column 2 to column 47)",
  " (in 'string', line 680, column 2 to column 55)",
  " (in 'string', line 1037, column 2 to column 37)",
  " (in 'string', line 1039, column 2 to column 50)",
  " (in 'string', line 1044, column 0 to column 54)",
  " (in 'string', line 1045, column 0 to column 53)",
  " (in 'string', line 1046, column 0 to column 44)",
  " (in 'string', line 1049, column 2 to column 66)",
  " (in 'string', line 1053, column 0 to column 22)",
  " (in 'string', line 639, column 4 to column 26)",
  " (in 'string', line 638, column 13 to line 640, column 3)",
  " (in 'string', line 638, column 2 to line 640, column 3)",
  " (in 'string', line 645, column 4 to column 46)",
  " (in 'string', line 644, column 41 to line 646, column 3)",
  " (in 'string', line 644, column 2 to line 646, column 3)",
  " (in 'string', line 651, column 4 to column 35)",
  " (in 'string', line 650, column 17 to line 652, column 3)",
  " (in 'string', line 650, column 2 to line 652, column 3)",
  " (in 'string', line 674, column 6 to line 676, column 25)",
  " (in 'string', line 673, column 11 to line 677, column 5)",
  " (in 'string', line 662, column 15 to column 21)",
  " (in 'string', line 662, column 8 to line 664, column 27)",
  " (in 'string', line 670, column 10 to column 39)",
  " (in 'string', line 668, column 10 to column 71)",
  " (in 'string', line 667, column 10 to line 670, column 39)",
  " (in 'string', line 666, column 28 to line 671, column 9)",
  " (in 'string', line 666, column 8 to line 671, column 9)",
  " (in 'string', line 661, column 6 to line 672, column 7)",
  " (in 'string', line 660, column 12 to line 673, column 5)",
  " (in 'string', line 660, column 4 to line 677, column 5)",
  " (in 'string', line 659, column 14 to line 678, column 3)",
  " (in 'string', line 659, column 2 to line 678, column 3)",
  " (in 'string', line 683, column 4 to column 125)",
  " (in 'string', line 684, column 4 to column 115)",
  " (in 'string', line 682, column 21 to line 685, column 3)",
  " (in 'string', line 682, column 2 to line 685, column 3)",
  " (in 'string', line 690, column 8 to column 68)",
  " (in 'string', line 689, column 72 to line 691, column 7)",
  " (in 'string', line 689, column 6 to line 691, column 7)",
  " (in 'string', line 688, column 24 to line 692, column 5)",
  " (in 'string', line 688, column 4 to line 692, column 5)",
  " (in 'string', line 687, column 21 to line 693, column 3)",
  " (in 'string', line 687, column 2 to line 693, column 3)",
  " (in 'string', line 748, column 8 to line 750, column 36)",
  " (in 'string', line 747, column 13 to line 751, column 7)",
  " (in 'string', line 737, column 15 to column 37)",
  " (in 'string', line 737, column 8 to line 739, column 36)",
  " (in 'string', line 745, column 10 to column 61)",
  " (in 'string', line 743, column 10 to column 110)",
  " (in 'string', line 742, column 10 to line 745, column 61)",
  " (in 'string', line 741, column 37 to line 746, column 9)",
  " (in 'string', line 741, column 8 to line 746, column 9)",
  " (in 'string', line 736, column 14 to line 747, column 7)",
  " (in 'string', line 736, column 6 to line 751, column 7)",
  " (in 'string', line 756, column 12 to column 85)",
  " (in 'string', line 755, column 76 to line 757, column 11)",
  " (in 'string', line 755, column 10 to line 757, column 11)",
  " (in 'string', line 759, column 12 to column 87)",
  " (in 'string', line 758, column 80 to line 760, column 11)",
  " (in 'string', line 758, column 10 to line 760, column 11)",
  " (in 'string', line 754, column 37 to line 761, column 9)",
  " (in 'string', line 754, column 8 to line 761, column 9)",
  " (in 'string', line 753, column 25 to line 762, column 7)",
  " (in 'string', line 753, column 6 to line 762, column 7)",
  " (in 'string', line 735, column 11 to line 763, column 5)",
  " (in 'string', line 698, column 13 to column 39)",
  " (in 'string', line 698, column 6 to line 700, column 34)",
  " (in 'string', line 706, column 12 to column 129)",
  " (in 'string', line 705, column 76 to line 707, column 11)",
  " (in 'string', line 705, column 10 to line 707, column 11)",
  " (in 'string', line 709, column 12 to column 131)",
  " (in 'string', line 708, column 80 to line 710, column 11)",
  " (in 'string', line 708, column 10 to line 710, column 11)",
  " (in 'string', line 704, column 31 to line 711, column 9)",
  " (in 'string', line 704, column 8 to line 711, column 9)",
  " (in 'string', line 703, column 25 to line 712, column 7)",
  " (in 'string', line 703, column 6 to line 712, column 7)",
  " (in 'string', line 728, column 10 to column 127)",
  " (in 'string', line 727, column 42 to line 729, column 9)",
  " (in 'string', line 727, column 13 to line 729, column 9)",
  " (in 'string', line 726, column 30 to column 74)",
  " (in 'string', line 726, column 8 to line 729, column 9)",
  " (in 'string', line 732, column 10 to column 89)",
  " (in 'string', line 731, column 37 to line 733, column 9)",
  " (in 'string', line 731, column 8 to line 733, column 9)",
  " (in 'string', line 725, column 13 to line 734, column 7)",
  " (in 'string', line 720, column 10 to line 721, column 78)",
  " (in 'string', line 717, column 10 to line 718, column 127)",
  " (in 'string', line 716, column 10 to line 721, column 78)",
  " (in 'string', line 723, column 10 to column 89)",
  " (in 'string', line 715, column 37 to line 724, column 9)",
  " (in 'string', line 715, column 8 to line 724, column 9)",
  " (in 'string', line 714, column 14 to line 725, column 7)",
  " (in 'string', line 714, column 6 to line 734, column 7)",
  " (in 'string', line 697, column 22 to line 735, column 5)",
  " (in 'string', line 697, column 4 to line 763, column 5)",
  " (in 'string', line 696, column 23 to line 764, column 3)",
  " (in 'string', line 696, column 2 to line 764, column 3)",
  " (in 'string', line 779, column 8 to column 107)",
  " (in 'string', line 778, column 26 to line 780, column 7)",
  " (in 'string', line 778, column 6 to line 780, column 7)",
  " (in 'string', line 776, column 11 to line 781, column 5)",
  " (in 'string', line 768, column 13 to column 15)",
  " (in 'string', line 768, column 17 to column 26)",
  " (in 'string', line 768, column 6 to column 79)",
  " (in 'string', line 770, column 8 to column 111)",
  " (in 'string', line 769, column 22 to line 771, column 7)",
  " (in 'string', line 769, column 6 to line 771, column 7)",
  " (in 'string', line 774, column 8 to column 116)",
  " (in 'string', line 773, column 33 to line 775, column 7)",
  " (in 'string', line 773, column 6 to line 775, column 7)",
  " (in 'string', line 767, column 21 to line 776, column 5)",
  " (in 'string', line 767, column 4 to line 781, column 5)",
  " (in 'string', line 765, column 14 to line 782, column 3)",
  " (in 'string', line 765, column 2 to line 782, column 3)",
  " (in 'string', line 790, column 6 to column 98)",
  " (in 'string', line 791, column 6 to column 56)",
  " (in 'string', line 789, column 23 to line 792, column 5)",
  " (in 'string', line 789, column 4 to line 792, column 5)",
  " (in 'string', line 788, column 9 to line 793, column 3)",
  " (in 'string', line 786, column 6 to column 98)",
  " (in 'string', line 785, column 23 to line 787, column 5)",
  " (in 'string', line 785, column 4 to line 787, column 5)",
  " (in 'string', line 784, column 14 to line 788, column 3)",
  " (in 'string', line 784, column 2 to line 793, column 3)",
  " (in 'string', line 813, column 8 to column 37)",
  " (in 'string', line 815, column 16 to column 18)",
  " (in 'string', line 815, column 10 to column 55)",
  " (in 'string', line 827, column 12 to line 834, column 46)",
  " (in 'string', line 826, column 17 to line 835, column 11)",
  " (in 'string', line 817, column 23 to column 32)",
  " (in 'string', line 817, column 12 to column 74)",
  " (in 'string', line 818, column 12 to line 825, column 103)",
  " (in 'string', line 816, column 22 to line 826, column 11)",
  " (in 'string', line 816, column 10 to line 835, column 11)",
  " (in 'string', line 814, column 16 to line 836, column 9)",
  " (in 'string', line 814, column 8 to line 836, column 9)",
  " (in 'string', line 812, column 31 to line 837, column 7)",
  " (in 'string', line 812, column 6 to line 837, column 7)",
  " (in 'string', line 810, column 11 to line 838, column 5)",
  " (in 'string', line 797, column 13 to column 19)",
  " (in 'string', line 797, column 21 to column 28)",
  " (in 'string', line 797, column 6 to column 40)",
  " (in 'string', line 798, column 13 to column 19)",
  " (in 'string', line 798, column 21 to column 30)",
  " (in 'string', line 798, column 6 to column 62)",
  " (in 'string', line 800, column 8 to column 111)",
  " (in 'string', line 799, column 26 to line 801, column 7)",
  " (in 'string', line 799, column 6 to line 801, column 7)",
  " (in 'string', line 802, column 6 to line 809, column 36)",
  " (in 'string', line 796, column 17 to line 810, column 5)",
  " (in 'string', line 796, column 4 to line 838, column 5)",
  " (in 'string', line 795, column 14 to line 839, column 3)",
  " (in 'string', line 795, column 2 to line 839, column 3)",
  " (in 'string', line 842, column 11 to column 32)",
  " (in 'string', line 842, column 4 to line 844, column 37)",
  " (in 'string', line 848, column 10 to column 117)",
  " (in 'string', line 847, column 64 to line 849, column 9)",
  " (in 'string', line 847, column 8 to line 849, column 9)",
  " (in 'string', line 846, column 30 to line 850, column 7)",
  " (in 'string', line 846, column 6 to line 850, column 7)",
  " (in 'string', line 845, column 23 to line 851, column 5)",
  " (in 'string', line 845, column 4 to line 851, column 5)",
  " (in 'string', line 905, column 13 to column 23)",
  " (in 'string', line 905, column 6 to column 56)",
  " (in 'string', line 908, column 49 to column 112)",
  " (in 'string', line 908, column 8 to column 112)",
  " (in 'string', line 907, column 38 to line 909, column 7)",
  " (in 'string', line 907, column 14 to line 909, column 7)",
  " (in 'string', line 907, column 6 to line 909, column 7)",
  " (in 'string', line 927, column 10 to column 43)",
  " (in 'string', line 929, column 18 to column 20)",
  " (in 'string', line 929, column 12 to column 61)",
  " (in 'string', line 941, column 14 to line 948, column 57)",
  " (in 'string', line 940, column 19 to line 949, column 13)",
  " (in 'string', line 931, column 25 to column 34)",
  " (in 'string', line 931, column 14 to column 80)",
  " (in 'string', line 932, column 14 to line 939, column 118)",
  " (in 'string', line 930, column 24 to line 940, column 13)",
  " (in 'string', line 930, column 12 to line 949, column 13)",
  " (in 'string', line 928, column 18 to line 950, column 11)",
  " (in 'string', line 928, column 10 to line 950, column 11)",
  " (in 'string', line 926, column 33 to line 951, column 9)",
  " (in 'string', line 926, column 8 to line 951, column 9)",
  " (in 'string', line 924, column 13 to line 952, column 7)",
  " (in 'string', line 911, column 15 to column 25)",
  " (in 'string', line 911, column 27 to column 34)",
  " (in 'string', line 911, column 8 to column 50)",
  " (in 'string', line 912, column 15 to column 25)",
  " (in 'string', line 912, column 27 to column 36)",
  " (in 'string', line 912, column 8 to column 72)",
  " (in 'string', line 914, column 10 to column 121)",
  " (in 'string', line 913, column 32 to line 915, column 9)",
  " (in 'string', line 913, column 8 to line 915, column 9)",
  " (in 'string', line 916, column 8 to line 923, column 46)",
  " (in 'string', line 910, column 19 to line 924, column 7)",
  " (in 'string', line 910, column 6 to line 952, column 7)",
  " (in 'string', line 904, column 11 to line 953, column 5)",
  " (in 'string', line 879, column 10 to column 43)",
  " (in 'string', line 881, column 18 to column 20)",
  " (in 'string', line 881, column 12 to column 61)",
  " (in 'string', line 882, column 23 to column 32)",
  " (in 'string', line 882, column 12 to column 78)",
  " (in 'string', line 883, column 19 to column 26)",
  " (in 'string', line 883, column 12 to column 42)",
  " (in 'string', line 885, column 17 to column 47)",
  " (in 'string', line 884, column 24 to column 115)",
  " (in 'string', line 884, column 12 to line 885, column 47)",
  " (in 'string', line 887, column 21 to column 25)",
  " (in 'string', line 887, column 14 to column 42)",
  " (in 'string', line 888, column 21 to column 25)",
  " (in 'string', line 888, column 14 to column 36)",
  " (in 'string', line 889, column 14 to column 102)",
  " (in 'string', line 890, column 65 to column 132)",
  " (in 'string', line 890, column 14 to column 132)",
  " (in 'string', line 891, column 14 to line 898, column 50)",
  " (in 'string', line 899, column 14 to column 71)",
  " (in 'string', line 886, column 28 to line 900, column 13)",
  " (in 'string', line 886, column 12 to line 900, column 13)",
  " (in 'string', line 880, column 18 to line 901, column 11)",
  " (in 'string', line 880, column 10 to line 901, column 11)",
  " (in 'string', line 878, column 33 to line 902, column 9)",
  " (in 'string', line 878, column 8 to line 902, column 9)",
  " (in 'string', line 876, column 13 to line 903, column 7)",
  " (in 'string', line 855, column 17 to column 21)",
  " (in 'string', line 855, column 10 to column 38)",
  " (in 'string', line 856, column 17 to column 21)",
  " (in 'string', line 856, column 10 to column 32)",
  " (in 'string', line 857, column 17 to column 21)",
  " (in 'string', line 857, column 23 to column 32)",
  " (in 'string', line 857, column 10 to column 116)",
  " (in 'string', line 858, column 17 to column 21)",
  " (in 'string', line 858, column 23 to column 30)",
  " (in 'string', line 858, column 10 to column 46)",
  " (in 'string', line 859, column 10 to column 90)",
  " (in 'string', line 861, column 57 to column 120)",
  " (in 'string', line 861, column 10 to column 120)",
  " (in 'string', line 864, column 12 to column 140)",
  " (in 'string', line 863, column 28 to line 865, column 11)",
  " (in 'string', line 863, column 10 to line 865, column 11)",
  " (in 'string', line 866, column 10 to line 873, column 46)",
  " (in 'string', line 874, column 10 to column 63)",
  " (in 'string', line 854, column 32 to line 875, column 9)",
  " (in 'string', line 854, column 8 to line 875, column 9)",
  " (in 'string', line 853, column 19 to line 876, column 7)",
  " (in 'string', line 853, column 6 to line 903, column 7)",
  " (in 'string', line 852, column 22 to line 904, column 5)",
  " (in 'string', line 852, column 4 to line 953, column 5)",
  " (in 'string', line 841, column 18 to line 954, column 3)",
  " (in 'string', line 841, column 2 to line 954, column 3)",
  " (in 'string', line 1056, column 2 to column 12)",
  " (in 'string', line 1059, column 6 to column 93)",
  " (in 'string', line 1060, column 6 to column 13)",
  " (in 'string', line 1058, column 21 to line 1061, column 5)",
  " (in 'string', line 1058, column 4 to line 1061, column 5)",
  " (in 'string', line 1057, column 41 to line 1062, column 3)",
  " (in 'string', line 1057, column 2 to line 1062, column 3)",
  " (in 'string', line 1065, column 6 to line 1066, column 101)",
  " (in 'string', line 1069, column 8 to column 49)",
  " (in 'string', line 1068, column 6 to line 1069, column 49)",
  " (in 'string', line 1071, column 6 to column 13)",
  " (in 'string', line 1064, column 47 to line 1072, column 5)",
  " (in 'string', line 1064, column 4 to line 1072, column 5)",
  " (in 'string', line 1063, column 31 to line 1073, column 3)",
  " (in 'string', line 1063, column 2 to line 1073, column 3)",
  " (in 'string', line 1055, column 8 to line 1074, column 1)",
  " (in 'string', line 1055, column 0 to line 1074, column 1)",
  " (in 'string', line 1079, column 4 to column 125)",
  " (in 'string', line 1078, column 26 to line 1080, column 3)",
  " (in 'string', line 1078, column 2 to line 1080, column 3)",
  " (in 'string', line 1077, column 29 to line 1081, column 1)",
  " (in 'string', line 1077, column 0 to line 1081, column 1)",
  " (in 'string', line 1083, column 0 to column 43)",
  " (in 'string', line 1087, column 2 to column 12)",
  " (in 'string', line 1088, column 2 to column 9)",
  " (in 'string', line 1090, column 4 to column 28)",
  " (in 'string', line 1091, column 4 to line 1092, column 102)",
  " (in 'string', line 1093, column 4 to line 1094, column 123)",
  " (in 'string', line 1095, column 4 to column 12)",
  " (in 'string', line 1089, column 31 to line 1096, column 3)",
  " (in 'string', line 1089, column 2 to line 1096, column 3)",
  " (in 'string', line 1086, column 0 to line 1097, column 1)",
  " (in 'string', line 1101, column 4 to column 74)",
  " (in 'string', line 1100, column 21 to line 1102, column 3)",
  " (in 'string', line 1100, column 2 to line 1102, column 3)",
  " (in 'string', line 1105, column 4 to column 49)",
  " (in 'string', line 1104, column 39 to line 1106, column 3)",
  " (in 'string', line 1104, column 19 to line 1106, column 3)",
  " (in 'string', line 1104, column 2 to line 1106, column 3)",
  " (in 'string', line 1108, column 14 to column 44)",
  " (in 'string', line 1108, column 2 to column 44)",
  " (in 'string', line 1109, column 18 to column 78)",
  " (in 'string', line 1109, column 2 to column 78)",
  " (in 'string', line 1112, column 27 to column 99)",
  " (in 'string', line 1112, column 2 to column 99)",
  " (in 'string', line 962, column 0 to column 111)",
  " (in 'string', line 968, column 4 to column 127)",
  " (in 'string', line 971, column 4 to column 117)",
  " (in 'string', line 966, column 9 to line 972, column 1)",
  " (in 'string', line 965, column 4 to column 90)",
  " (in 'string', line 964, column 26 to line 966, column 3)",
  " (in 'string', line 964, column 2 to line 972, column 1)",
  " (in 'string', line 975, column 0 to column 89)",
  " (in 'string', line 978, column 0 to column 90)",
  " (in 'string', line 987, column 11 to column 21)",
  " (in 'string', line 987, column 4 to column 29)",
  " (in 'string', line 994, column 6 to column 27)",
  " (in 'string', line 995, column 6 to column 28)",
  " (in 'string', line 993, column 34 to line 996, column 5)",
  " (in 'string', line 993, column 9 to line 996, column 5)",
  " (in 'string', line 990, column 6 to column 26)",
  " (in 'string', line 991, column 6 to column 25)",
  " (in 'string', line 989, column 29 to line 992, column 5)",
  " (in 'string', line 989, column 4 to line 996, column 5)",
  " (in 'string', line 997, column 4 to column 94)",
  " (in 'string', line 985, column 10 to line 998, column 3)",
  " (in 'string', line 985, column 9 to line 998, column 4)",
  " (in 'string', line 983, column 4 to column 92)",
  " (in 'string', line 982, column 27 to line 985, column 3)",
  " (in 'string', line 982, column 2 to line 998, column 4)",
  " (in 'string', line 981, column 8 to line 999, column 1)",
  " (in 'string', line 981, column 0 to line 999, column 1)",
  " (in 'string', line 1002, column 0 to column 23)",
  " (in 'string', line 1006, column 2 to column 74)",
  " (in 'string', line 1005, column 21 to line 1007, column 1)",
  " (in 'string', line 1005, column 0 to line 1007, column 1)",
  " (in 'string', line 1017, column 6 to column 42)",
  " (in 'string', line 1015, column 11 to line 1018, column 5)",
  " (in 'string', line 1014, column 6 to column 96)",
  " (in 'string', line 1012, column 26 to line 1015, column 5)",
  " (in 'string', line 1012, column 4 to line 1018, column 5)",
  " (in 'string', line 1011, column 22 to line 1019, column 3)",
  " (in 'string', line 1011, column 2 to line 1019, column 3)",
  " (in 'string', line 1010, column 19 to line 1020, column 1)",
  " (in 'string', line 1010, column 0 to line 1020, column 1)",
  " (in 'string', line 1023, column 0 to column 23)",
  " (in 'string', line 1025, column 21 to column 45)",
  " (in 'string', line 1025, column 2 to column 45)",
  " (in 'string', line 1026, column 2 to column 100)",
  " (in 'string', line 1028, column 22 to column 51)",
  " (in 'string', line 1028, column 2 to column 51)",
  " (in 'string', line 1029, column 2 to column 121)",
  " (in 'string', line 1031, column 2 to column 22)",
  " (in 'string', line 1033, column 2 to column 26)",
  " (in 'string', line 313, column 0 to column 20)",
  " (in 'string', line 314, column 0 to column 24)",
  " (in 'string', line 315, column 0 to column 29)",
  " (in 'string', line 317, column 0 to column 20)",
  " (in 'string', line 318, column 0 to column 24)",
  " (in 'string', line 319, column 0 to column 29)",
  " (in 'string', line 322, column 0 to column 22)",
  " (in 'string', line 323, column 6 to column 12)",
  " (in 'string', line 323, column 0 to column 35)",
  " (in 'string', line 324, column 6 to column 14)",
  " (in 'string', line 324, column 0 to column 37)",
  " (in 'string', line 325, column 0 to column 26)",
  " (in 'string', line 326, column 6 to column 18)",
  " (in 'string', line 326, column 0 to column 45)",
  " (in 'string', line 327, column 6 to column 21)",
  " (in 'string', line 327, column 0 to column 53)",
  " (in 'string', line 328, column 6 to column 21)",
  " (in 'string', line 328, column 0 to column 55)",
  " (in 'string', line 335, column 0 to column 16)",
  " (in 'string', line 336, column 0 to column 16)",
  " (in 'string', line 339, column 0 to column 21)",
  " (in 'string', line 340, column 0 to column 36)",
  " (in 'string', line 341, column 6 to column 13)",
  " (in 'string', line 341, column 0 to column 37)",
  " (in 'string', line 342, column 0 to column 22)",
  " (in 'string', line 343, column 0 to column 22)",
  " (in 'string', line 345, column 0 to column 18)",
  " (in 'string', line 348, column 7 to column 22)",
  " (in 'string', line 348, column 0 to column 39)",
  " (in 'string', line 349, column 11 to column 48)",
  " (in 'string', line 349, column 0 to column 69)",
  " (in 'string', line 352, column 0 to column 25)",
  " (in 'string', line 353, column 7 to column 57)",
  " (in 'string', line 353, column 59 to column 61)",
  " (in 'string', line 353, column 0 to column 65)",
  " (in 'string', line 354, column 7 to column 18)",
  " (in 'string', line 354, column 20 to column 31)",
  " (in 'string', line 354, column 0 to column 39)",
  " (in 'string', line 357, column 0 to column 33)",
  " (in 'string', line 358, column 7 to column 74)",
  " (in 'string', line 358, column 0 to column 84)",
  " (in 'string', line 361, column 0 to column 25)",
  " (in 'string', line 362, column 6 to column 56)",
  " (in 'string', line 362, column 0 to column 80)",
  " (in 'string', line 363, column 12 to column 34)",
  " (in 'string', line 363, column 0 to column 43)",
  " (in 'string', line 366, column 0 to column 32)",
  " (in 'string', line 369, column 0 to column 42)",
  " (in 'string', line 370, column 0 to column 30)",
  " (in 'string', line 371, column 0 to column 36)",
  " (in 'string', line 372, column 0 to column 33)",
  " (in 'string', line 374, column 0 to column 36)",
  " (in 'string', line 375, column 0 to column 24)",
  " (in 'string', line 376, column 0 to column 30)",
  " (in 'string', line 377, column 0 to column 27)",
  " (in 'string', line 379, column 0 to column 36)",
  " (in 'string', line 380, column 0 to column 36)",
  " (in 'string', line 381, column 0 to column 24)",
  " (in 'string', line 382, column 0 to column 30)",
  " (in 'string', line 383, column 0 to column 27)",
  " (in 'string', line 385, column 0 to column 36)",
  " (in 'string', line 386, column 0 to column 24)",
  " (in 'string', line 387, column 0 to column 30)",
  " (in 'string', line 388, column 0 to column 27)",
  " (in 'string', line 391, column 0 to column 36)",
  " (in 'string', line 392, column 22 to column 46)",
  " (in 'string', line 392, column 0 to column 48)",
  " (in 'string', line 393, column 25 to column 49)",
  " (in 'string', line 393, column 0 to column 51)",
  " (in 'string', line 395, column 0 to column 43)",
  " (in 'string', line 396, column 0 to column 31)",
  " (in 'string', line 397, column 0 to column 37)",
  " (in 'string', line 398, column 0 to column 34)",
  " (in 'string', line 400, column 0 to column 41)",
  " (in 'string', line 401, column 0 to column 29)",
  " (in 'string', line 402, column 0 to column 35)",
  " (in 'string', line 403, column 0 to column 32)",
  " (in 'string', line 405, column 2 to column 23)",
  " (in 'string', line 408, column 8 to column 18)",
  " (in 'string', line 408, column 2 to column 45)",
  " (in 'string', line 410, column 9 to column 15)",
  " (in 'string', line 410, column 17 to column 24)",
  " (in 'string', line 410, column 2 to column 35)",
  " (in 'string', line 411, column 9 to column 15)",
  " (in 'string', line 411, column 17 to column 24)",
  " (in 'string', line 411, column 2 to column 36)",
  " (in 'string', line 412, column 9 to column 15)",
  " (in 'string', line 412, column 17 to column 24)",
  " (in 'string', line 412, column 2 to column 42)",
  " (in 'string', line 413, column 9 to column 15)",
  " (in 'string', line 413, column 17 to column 24)",
  " (in 'string', line 413, column 2 to column 42)",
  " (in 'string', line 414, column 8 to column 14)",
  " (in 'string', line 414, column 2 to column 50)",
  " (in 'string', line 415, column 8 to column 14)",
  " (in 'string', line 415, column 2 to column 49)",
  " (in 'string', line 416, column 9 to column 19)",
  " (in 'string', line 416, column 21 to column 28)",
  " (in 'string', line 416, column 2 to column 43)",
  " (in 'string', line 417, column 9 to column 19)",
  " (in 'string', line 417, column 21 to column 28)",
  " (in 'string', line 417, column 2 to column 44)",
  " (in 'string', line 418, column 9 to column 19)",
  " (in 'string', line 418, column 21 to column 28)",
  " (in 'string', line 418, column 2 to column 50)",
  " (in 'string', line 419, column 9 to column 19)",
  " (in 'string', line 419, column 21 to column 28)",
  " (in 'string', line 419, column 2 to column 50)",
  " (in 'string', line 420, column 8 to column 18)",
  " (in 'string', line 420, column 2 to column 58)",
  " (in 'string', line 421, column 8 to column 18)",
  " (in 'string', line 421, column 2 to column 57)",
  " (in 'string', line 423, column 2 to column 32)",
  " (in 'string', line 424, column 8 to column 52)",
  " (in 'string', line 424, column 2 to column 74)",
  " (in 'string', line 425, column 8 to column 52)",
  " (in 'string', line 425, column 2 to column 77)",
  " (in 'string', line 427, column 2 to column 22)",
  " (in 'string', line 428, column 9 to column 55)",
  " (in 'string', line 428, column 57 to column 63)",
  " (in 'string', line 428, column 2 to column 71)",
  " (in 'string', line 429, column 2 to column 36)",
  " (in 'string', line 431, column 2 to column 40)",
  " (in 'string', line 432, column 2 to column 37)",
  " (in 'string', line 433, column 2 to column 34)",
  " (in 'string', line 434, column 2 to column 31)",
  " (in 'string', line 435, column 8 to column 32)",
  " (in 'string', line 435, column 41 to column 50)",
  " (in 'string', line 435, column 2 to column 71)",
  " (in 'string', line 436, column 8 to column 32)",
  " (in 'string', line 436, column 41 to column 50)",
  " (in 'string', line 436, column 2 to column 66)",
  " (in 'string', line 438, column 2 to column 44)",
  " (in 'string', line 439, column 2 to column 41)",
  " (in 'string', line 440, column 2 to column 38)",
  " (in 'string', line 441, column 2 to column 35)",
  " (in 'string', line 445, column 2 to column 26)",
  " (in 'string', line 446, column 2 to column 35)",
  " (in 'string', line 448, column 8 to column 14)",
  " (in 'string', line 448, column 2 to column 59)",
  " (in 'string', line 449, column 8 to column 43)",
  " (in 'string', line 449, column 2 to column 143)",
  " (in 'string', line 450, column 8 to column 14)",
  " (in 'string', line 450, column 2 to column 65)",
  " (in 'string', line 451, column 8 to column 43)",
  " (in 'string', line 451, column 2 to column 149)",
  " (in 'string', line 453, column 8 to column 38)",
  " (in 'string', line 453, column 2 to column 102)",
  " (in 'string', line 454, column 8 to column 38)",
  " (in 'string', line 454, column 40 to column 61)",
  " (in 'string', line 454, column 2 to column 84)",
  " (in 'string', line 455, column 8 to column 38)",
  " (in 'string', line 455, column 2 to column 110)",
  " (in 'string', line 456, column 8 to column 38)",
  " (in 'string', line 456, column 40 to column 65)",
  " (in 'string', line 456, column 2 to column 92)",
  " (in 'string', line 458, column 12 to column 18)",
  " (in 'string', line 458, column 2 to column 30)",
  " (in 'string', line 459, column 9 to column 15)",
  " (in 'string', line 459, column 17 to column 23)",
  " (in 'string', line 459, column 2 to column 74)",
  " (in 'string', line 460, column 9 to column 46)",
  " (in 'string', line 460, column 48 to column 54)",
  " (in 'string', line 460, column 2 to column 166)",
  " (in 'string', line 461, column 23 to column 43)",
  " (in 'string', line 461, column 2 to column 58)",
  " (in 'string', line 467, column 0 to column 54)",
  " (in 'string', line 471, column 0 to column 46)",
  " (in 'string', line 473, column 7 to column 14)",
  " (in 'string', line 473, column 0 to column 47)",
  " (in 'string', line 475, column 0 to column 21)",
  " (in 'string', line 476, column 21 to column 28)",
  " (in 'string', line 476, column 0 to column 84)",
  " (in 'string', line 478, column 0 to column 17)",
  " (in 'string', line 479, column 0 to column 21)",
  " (in 'string', line 480, column 0 to column 34)",
  " (in 'string', line 481, column 0 to column 58)",
  " (in 'string', line 482, column 7 to column 30)",
  " (in 'string', line 482, column 0 to column 81)",
  " (in 'string', line 483, column 6 to column 29)",
  " (in 'string', line 483, column 0 to column 85)",
  " (in 'string', line 484, column 6 to column 33)",
  " (in 'string', line 484, column 0 to column 90)",
  " (in 'string', line 490, column 0 to column 32)",
  " (in 'string', line 496, column 6 to column 47)",
  " (in 'string', line 496, column 0 to column 135)",
  " (in 'string', line 499, column 10 to column 12)",
  " (in 'string', line 499, column 0 to column 21)",
  " (in 'string', line 500, column 7 to column 13)",
  " (in 'string', line 500, column 15 to column 17)",
  " (in 'string', line 500, column 0 to column 57)",
  " (in 'string', line 501, column 7 to column 28)",
  " (in 'string', line 501, column 30 to column 32)",
  " (in 'string', line 501, column 0 to column 117)",
  " (in 'string', line 502, column 7 to column 33)",
  " (in 'string', line 502, column 35 to column 37)",
  " (in 'string', line 502, column 0 to column 176)",
  " (in 'string', line 505, column 0 to column 17)",
  " (in 'string', line 506, column 7 to column 40)",
  " (in 'string', line 506, column 0 to column 105)",
  " (in 'string', line 507, column 7 to column 59)",
  " (in 'string', line 507, column 0 to column 169)",
  " (in 'string', line 508, column 7 to column 69)",
  " (in 'string', line 508, column 0 to column 233)",
  " (in 'string', line 511, column 0 to column 72)",
  " (in 'string', line 514, column 7 to column 44)",
  " (in 'string', line 514, column 46 to column 83)",
  " (in 'string', line 514, column 0 to column 129)",
  " (in 'string', line 518, column 6 to column 21)",
  " (in 'string', line 518, column 0 to column 43)",
  " (in 'string', line 520, column 2 to column 12)",
  " (in 'string', line 521, column 2 to column 12)",
  " (in 'string', line 528, column 6 to column 13)",
  " (in 'string', line 527, column 11 to line 529, column 5)",
  " (in 'string', line 524, column 6 to column 29)",
  " (in 'string', line 525, column 6 to column 13)",
  " (in 'string', line 526, column 6 to column 12)",
  " (in 'string', line 523, column 41 to line 527, column 5)",
  " (in 'string', line 523, column 4 to line 529, column 5)",
  " (in 'string', line 522, column 37 to line 530, column 3)",
  " (in 'string', line 522, column 2 to line 530, column 3)",
  " (in 'string', line 532, column 2 to column 25)",
  " (in 'string', line 519, column 21 to line 533, column 1)",
  " (in 'string', line 519, column 0 to line 533, column 1)",
  " (in 'string', line 536, column 0 to column 57)",
  " (in 'string', line 537, column 6 to column 30)",
  " (in 'string', line 537, column 0 to column 57)",
  " (in 'string', line 538, column 6 to column 33)",
  " (in 'string', line 538, column 0 to column 63)",
  " (in 'string', line 540, column 0 to column 63)",
  " (in 'string', line 541, column 6 to column 18)",
  " (in 'string', line 541, column 0 to column 63)",
  " (in 'string', line 546, column 10 to column 45)",
  " (in 'string', line 547, column 10 to column 16)",
  " (in 'string', line 545, column 30 to line 548, column 9)",
  " (in 'string', line 545, column 8 to line 548, column 9)",
  " (in 'string', line 544, column 26 to line 549, column 7)",
  " (in 'string', line 544, column 6 to line 549, column 7)",
  " (in 'string', line 543, column 25 to line 550, column 5)",
  " (in 'string', line 543, column 4 to line 550, column 5)",
  " (in 'string', line 542, column 20 to line 551, column 3)",
  " (in 'string', line 542, column 1 to line 551, column 3)",
  " (in 'string', line 554, column 2 to column 16)",
  " (in 'string', line 561, column 6 to column 25)",
  " (in 'string', line 560, column 11 to line 562, column 5)",
  " (in 'string', line 558, column 6 to column 29)",
  " (in 'string', line 559, column 6 to column 17)",
  " (in 'string', line 557, column 28 to line 560, column 5)",
  " (in 'string', line 557, column 4 to line 562, column 5)",
  " (in 'string', line 556, column 24 to line 563, column 3)",
  " (in 'string', line 556, column 2 to line 563, column 3)",
  " (in 'string', line 553, column 19 to line 564, column 1)",
  " (in 'string', line 553, column 0 to line 564, column 1)",
  " (in 'string', line 566, column 29 to column 98)",
  " (in 'string', line 566, column 4 to column 98)",
  " (in 'string', line 567, column 33 to column 114)",
  " (in 'string', line 567, column 4 to column 114)",
  " (in 'string', line 565, column 45 to line 568, column 3)",
  " (in 'string', line 565, column 20 to line 568, column 3)",
  " (in 'string', line 565, column 2 to line 568, column 3)",
  " (in 'string', line 569, column 19 to column 66)",
  " (in 'string', line 569, column 2 to column 66)",
  " (in 'string', line 575, column 7 to column 9)",
  " (in 'string', line 578, column 7 to column 14)",
  " (in 'string', line 579, column 18 to column 28)",
  " (in 'string', line 582, column 7 to column 40)",
  " (in 'string', line 583, column 16 to column 52)",
  " (in 'string', line 586, column 7 to column 39)",
  " (in 'string', line 588, column 9 to column 15)",
  " (in 'string', line 588, column 17 to column 26)",
  " (in 'string', line 589, column 18 to column 58)",
  " (in 'string', line 591, column 18 to column 23)",
  " (in 'string', line 592, column 8 to column 13)",
  " (in 'string', line 592, column 22 to column 31)",
  " (in 'string', line 596, column 9 to column 15)",
  " (in 'string', line 597, column 9 to column 19)",
  " (in 'string', line 599, column 8 to column 13)",
  " (in 'string', line 599, column 22 to column 31)",
  " (in 'string', line 600, column 8 to column 26)",
  " (in 'string', line 600, column 35 to column 42)",
  " (in 'string', line 602, column 9 to column 15)",
  " (in 'string', line 602, column 17 to column 26)",
  " (in 'string', line 607, column 7 to column 13)",
  " (in 'string', line 612, column 7 to column 14)",
  " (in 'string', line 620, column 9 to column 11)",
  " (in 'string', line 622, column 9 to column 14)",
  " (in 'string', line 624, column 9 to column 15)",
  " (in 'string', line 626, column 9 to column 18)",
  " (in 'string', line 628, column 9 to column 42)",
  " (in 'string', line 633, column 9 to column 50)",
  " (in 'string', line 634, column 9 to column 24)",
  " (in 'string', line 680, column 9 to column 45)",
  " (in 'string', line 1037, column 8 to column 13)",
  " (in 'string', line 1037, column 22 to column 29)",
  " (in 'string', line 1039, column 9 to column 31)",
  " (in 'string', line 1039, column 33 to column 42)",
  " (in 'string', line 1044, column 7 to column 44)",
  " (in 'string', line 1045, column 7 to column 44)",
  " (in 'string', line 1046, column 7 to column 22)",
  " (in 'string', line 1049, column 9 to column 37)",
  " (in 'string', line 1053, column 7 to column 14)",
  " (in 'string', line 21, column 4 to column 42)",
  " (in 'string', line 20, column 9 to line 22, column 3)",
  " (in 'string', line 18, column 4 to column 44)",
  " (in 'string', line 19, column 4 to column 22)",
  " (in 'string', line 17, column 24 to line 20, column 3)",
  " (in 'string', line 17, column 9 to line 22, column 3)",
  " (in 'string', line 16, column 4 to column 35)",
  " (in 'string', line 15, column 24 to line 17, column 3)",
  " (in 'string', line 15, column 9 to line 22, column 3)",
  " (in 'string', line 14, column 4 to column 29)",
  " (in 'string', line 13, column 24 to line 15, column 3)",
  " (in 'string', line 13, column 9 to line 22, column 3)",
  " (in 'string', line 12, column 4 to column 39)",
  " (in 'string', line 11, column 24 to line 13, column 3)",
  " (in 'string', line 11, column 9 to line 22, column 3)",
  " (in 'string', line 10, column 4 to column 32)",
  " (in 'string', line 9, column 24 to line 11, column 3)",
  " (in 'string', line 9, column 9 to line 22, column 3)",
  " (in 'string', line 8, column 4 to column 32)",
  " (in 'string', line 7, column 24 to line 9, column 3)",
  " (in 'string', line 7, column 9 to line 22, column 3)",
  " (in 'string', line 5, column 17 to line 7, column 3)",
  " (in 'string', line 5, column 2 to line 22, column 3)",
  " (in 'string', line 23, column 2 to column 9)",
  " (in 'string', line 4, column 77 to line 24, column 1)",
  " (in 'string', line 43, column 4 to column 42)",
  " (in 'string', line 42, column 9 to line 44, column 3)",
  " (in 'string', line 40, column 4 to column 44)",
  " (in 'string', line 41, column 4 to column 22)",
  " (in 'string', line 39, column 24 to line 42, column 3)",
  " (in 'string', line 39, column 9 to line 44, column 3)",
  " (in 'string', line 38, column 4 to column 35)",
  " (in 'string', line 37, column 24 to line 39, column 3)",
  " (in 'string', line 37, column 9 to line 44, column 3)",
  " (in 'string', line 36, column 4 to column 29)",
  " (in 'string', line 35, column 24 to line 37, column 3)",
  " (in 'string', line 35, column 9 to line 44, column 3)",
  " (in 'string', line 34, column 4 to column 39)",
  " (in 'string', line 33, column 24 to line 35, column 3)",
  " (in 'string', line 33, column 9 to line 44, column 3)",
  " (in 'string', line 32, column 4 to column 32)",
  " (in 'string', line 31, column 24 to line 33, column 3)",
  " (in 'string', line 31, column 9 to line 44, column 3)",
  " (in 'string', line 30, column 4 to column 32)",
  " (in 'string', line 29, column 24 to line 31, column 3)",
  " (in 'string', line 29, column 9 to line 44, column 3)",
  " (in 'string', line 27, column 17 to line 29, column 3)",
  " (in 'string', line 27, column 2 to line 44, column 3)",
  " (in 'string', line 45, column 2 to column 9)",
  " (in 'string', line 26, column 76 to line 46, column 1)",
  " (in 'string', line 51, column 2 to column 18)",
  " (in 'string', line 52, column 2 to column 18)",
  " (in 'string', line 53, column 2 to column 12)",
  " (in 'string', line 56, column 23 to column 30)",
  " (in 'string', line 56, column 6 to column 30)",
  " (in 'string', line 55, column 19 to line 57, column 5)",
  " (in 'string', line 55, column 4 to line 57, column 5)",
  " (in 'string', line 54, column 17 to line 58, column 3)",
  " (in 'string', line 54, column 2 to line 58, column 3)",
  " (in 'string', line 59, column 2 to column 11)",
  " (in 'string', line 50, column 28 to line 60, column 1)",
  " (in 'string', line 64, column 2 to column 26)",
  " (in 'string', line 65, column 8 to column 9)",
  " (in 'string', line 65, column 2 to column 17)",
  " (in 'string', line 66, column 2 to column 12)",
  " (in 'string', line 69, column 6 to column 15)",
  " (in 'string', line 70, column 6 to column 13)",
  " (in 'string', line 68, column 18 to line 71, column 5)",
  " (in 'string', line 68, column 4 to line 71, column 5)",
  " (in 'string', line 67, column 17 to line 72, column 3)",
  " (in 'string', line 67, column 2 to line 72, column 3)",
  " (in 'string', line 73, column 2 to column 20)",
  " (in 'string', line 63, column 38 to line 74, column 1)",
  " (in 'string', line 80, column 2 to column 26)",
  " (in 'string', line 81, column 8 to column 9)",
  " (in 'string', line 81, column 2 to column 17)",
  " (in 'string', line 82, column 2 to column 12)",
  " (in 'string', line 85, column 6 to column 15)",
  " (in 'string', line 86, column 6 to column 13)",
  " (in 'string', line 84, column 19 to line 87, column 5)",
  " (in 'string', line 84, column 4 to line 87, column 5)",
  " (in 'string', line 83, column 17 to line 88, column 3)",
  " (in 'string', line 83, column 2 to line 88, column 3)",
  " (in 'string', line 89, column 2 to column 20)",
  " (in 'string', line 79, column 40 to line 90, column 1)",
  " (in 'string', line 94, column 2 to column 12)",
  " (in 'string', line 96, column 19 to column 26)",
  " (in 'string', line 96, column 4 to column 26)",
  " (in 'string', line 95, column 31 to line 97, column 3)",
  " (in 'string', line 95, column 2 to line 97, column 3)",
  " (in 'string', line 98, column 2 to column 11)",
  " (in 'string', line 93, column 33 to line 99, column 1)",
  " (in 'string', line 102, column 8 to column 14)",
  " (in 'string', line 102, column 2 to column 45)",
  " (in 'string', line 104, column 14 to column 27)",
  " (in 'string', line 104, column 4 to column 27)",
  " (in 'string', line 103, column 31 to line 105, column 3)",
  " (in 'string', line 103, column 2 to line 105, column 3)",
  " (in 'string', line 106, column 2 to column 11)",
  " (in 'string', line 101, column 50 to line 107, column 1)",
  " (in 'string', line 111, column 2 to column 26)",
  " (in 'string', line 112, column 8 to column 9)",
  " (in 'string', line 112, column 2 to column 17)",
  " (in 'string', line 113, column 2 to column 12)",
  " (in 'string', line 116, column 6 to column 15)",
  " (in 'string', line 117, column 6 to column 13)",
  " (in 'string', line 115, column 18 to line 118, column 5)",
  " (in 'string', line 115, column 4 to line 118, column 5)",
  " (in 'string', line 114, column 17 to line 119, column 3)",
  " (in 'string', line 114, column 2 to line 119, column 3)",
  " (in 'string', line 120, column 2 to column 20)",
  " (in 'string', line 110, column 32 to line 121, column 1)",
  " (in 'string', line 127, column 4 to column 57)",
  " (in 'string', line 123, column 54 to line 128, column 3)",
  " (in 'string', line 133, column 4 to column 53)",
  " (in 'string', line 129, column 53 to line 134, column 3)",
  " (in 'string', line 140, column 4 to column 42)",
  " (in 'string', line 136, column 55 to line 141, column 3)",
  " (in 'string', line 146, column 4 to column 36)",
  " (in 'string', line 142, column 54 to line 147, column 3)",
  " (in 'string', line 153, column 4 to column 43)",
  " (in 'string', line 149, column 60 to line 154, column 3)",
  " (in 'string', line 159, column 4 to column 37)",
  " (in 'string', line 155, column 59 to line 160, column 3)",
  " (in 'string', line 165, column 4 to column 41)",
  " (in 'string', line 161, column 61 to line 166, column 3)",
  " (in 'string', line 171, column 4 to column 36)",
  " (in 'string', line 167, column 60 to line 172, column 3)",
  " (in 'string', line 182, column 11 to column 28)",
  " (in 'string', line 182, column 4 to column 32)",
  " (in 'string', line 183, column 4 to column 44)",
  " (in 'string', line 184, column 4 to column 32)",
  " (in 'string', line 186, column 4 to column 30)",
  " (in 'string', line 189, column 12 to column 17)",
  " (in 'string', line 189, column 6 to column 45)",
  " (in 'string', line 190, column 6 to column 48)",
  " (in 'string', line 188, column 15 to line 191, column 5)",
  " (in 'string', line 188, column 4 to line 191, column 5)",
  " (in 'string', line 194, column 12 to column 17)",
  " (in 'string', line 194, column 6 to column 45)",
  " (in 'string', line 195, column 6 to column 31)",
  " (in 'string', line 193, column 15 to line 196, column 5)",
  " (in 'string', line 193, column 4 to line 196, column 5)",
  " (in 'string', line 199, column 12 to column 17)",
  " (in 'string', line 199, column 6 to column 45)",
  " (in 'string', line 201, column 6 to column 75)",
  " (in 'string', line 198, column 15 to line 202, column 5)",
  " (in 'string', line 198, column 4 to line 202, column 5)",
  " (in 'string', line 205, column 12 to column 14)",
  " (in 'string', line 205, column 6 to column 43)",
  " (in 'string', line 206, column 6 to column 55)",
  " (in 'string', line 204, column 12 to line 207, column 5)",
  " (in 'string', line 204, column 4 to line 207, column 5)",
  " (in 'string', line 208, column 4 to column 13)",
  " (in 'string', line 181, column 28 to line 209, column 3)",
  " (in 'string', line 219, column 11 to column 28)",
  " (in 'string', line 219, column 4 to column 32)",
  " (in 'string', line 220, column 4 to column 44)",
  " (in 'string', line 221, column 4 to column 32)",
  " (in 'string', line 223, column 4 to column 31)",
  " (in 'string', line 226, column 12 to column 17)",
  " (in 'string', line 226, column 6 to column 45)",
  " (in 'string', line 227, column 6 to column 45)",
  " (in 'string', line 225, column 15 to line 228, column 5)",
  " (in 'string', line 225, column 4 to line 228, column 5)",
  " (in 'string', line 231, column 12 to column 17)",
  " (in 'string', line 231, column 6 to column 45)",
  " (in 'string', line 232, column 6 to column 31)",
  " (in 'string', line 230, column 15 to line 233, column 5)",
  " (in 'string', line 230, column 4 to line 233, column 5)",
  " (in 'string', line 236, column 12 to column 17)",
  " (in 'string', line 236, column 6 to column 45)",
  " (in 'string', line 238, column 6 to column 72)",
  " (in 'string', line 235, column 15 to line 239, column 5)",
  " (in 'string', line 235, column 4 to line 239, column 5)",
  " (in 'string', line 242, column 12 to column 14)",
  " (in 'string', line 242, column 6 to column 43)",
  " (in 'string', line 243, column 6 to column 52)",
  " (in 'string', line 241, column 12 to line 244, column 5)",
  " (in 'string', line 241, column 4 to line 244, column 5)",
  " (in 'string', line 245, column 4 to column 13)",
  " (in 'string', line 218, column 28 to line 246, column 3)",
  " (in 'string', line 256, column 11 to column 28)",
  " (in 'string', line 256, column 4 to column 32)",
  " (in 'string', line 264, column 6 to column 79)",
  " (in 'string', line 263, column 28 to line 266, column 5)",
  " (in 'string', line 263, column 11 to line 266, column 5)",
  " (in 'string', line 262, column 6 to column 45)",
  " (in 'string', line 261, column 28 to line 263, column 5)",
  " (in 'string', line 261, column 11 to line 266, column 5)",
  " (in 'string', line 260, column 6 to column 59)",
  " (in 'string', line 259, column 28 to line 261, column 5)",
  " (in 'string', line 259, column 11 to line 266, column 5)",
  " (in 'string', line 258, column 6 to column 34)",
  " (in 'string', line 257, column 21 to line 259, column 5)",
  " (in 'string', line 257, column 4 to line 266, column 5)",
  " (in 'string', line 269, column 6 to column 41)",
  " (in 'string', line 268, column 17 to line 270, column 5)",
  " (in 'string', line 268, column 4 to line 270, column 5)",
  " (in 'string', line 271, column 4 to column 13)",
  " (in 'string', line 255, column 32 to line 272, column 3)",
  " (in 'string', line 282, column 11 to column 28)",
  " (in 'string', line 282, column 4 to column 32)",
  " (in 'string', line 290, column 6 to column 81)",
  " (in 'string', line 289, column 28 to line 292, column 5)",
  " (in 'string', line 289, column 11 to line 292, column 5)",
  " (in 'string', line 288, column 6 to column 46)",
  " (in 'string', line 287, column 28 to line 289, column 5)",
  " (in 'string', line 287, column 11 to line 292, column 5)",
  " (in 'string', line 286, column 6 to column 61)",
  " (in 'string', line 285, column 28 to line 287, column 5)",
  " (in 'string', line 285, column 11 to line 292, column 5)",
  " (in 'string', line 284, column 6 to column 35)",
  " (in 'string', line 283, column 21 to line 285, column 5)",
  " (in 'string', line 283, column 4 to line 292, column 5)",
  " (in 'string', line 295, column 6 to column 42)",
  " (in 'string', line 294, column 17 to line 296, column 5)",
  " (in 'string', line 294, column 4 to line 296, column 5)",
  " (in 'string', line 297, column 4 to column 13)",
  " (in 'string', line 281, column 33 to line 298, column 3)",
  " (in 'string', line 301, column 11 to column 12)",
  " (in 'string', line 301, column 14 to column 15)",
  " (in 'string', line 301, column 4 to column 21)",
  " (in 'string', line 304, column 11 to column 27)",
  " (in 'string', line 303, column 18 to column 32)",
  " (in 'string', line 303, column 6 to line 304, column 27)",
  " (in 'string', line 302, column 34 to line 305, column 5)",
  " (in 'string', line 302, column 19 to line 305, column 5)",
  " (in 'string', line 302, column 4 to line 305, column 5)",
  " (in 'string', line 306, column 4 to column 15)",
  " (in 'string', line 300, column 29 to line 307, column 3)"};
template <bool propto__, typename T0__, typename T2__, typename T3__,
          typename T4__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
void
prior_select_lp(const T0__& y_arg__, const int& dist, const T2__& location,
                const T3__& scale, const T4__& df, T_lp__& lp__,
                T_lp_accum__& lp_accum__, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T2__, typename T3__,
          typename T4__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
void
prior_select2_lp(const T0__& y, const int& dist, const T2__& location,
                 const T3__& scale, const T4__& df, T_lp__& lp__,
                 T_lp_accum__& lp_accum__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
int count_nonzero(const T0__& m_arg__, std::ostream* pstream__);
std::vector<int>
which_gt0a(const std::vector<int>& x, std::ostream* pstream__);
std::vector<int>
which(const std::vector<int>& x, const int& y, std::ostream* pstream__);
int nwhich(const std::vector<int>& x, const int& y, std::ostream* pstream__);
std::vector<int>
nwhich_all(const std::vector<int>& x, const int& max_id, std::ostream*
           pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
std::vector<int> which_gt0(const T0__& x_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
lS(const T0__& ibasis_arg__, const T1__& eta_arg__, const T2__& scoef_arg__,
   std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
lh(const T0__& basis_arg__, const T1__& eta_arg__, const T2__& scoef_arg__,
   std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
lS2(const T0__& ibasis_arg__, const T1__& eta_arg__, const T2__& scoef_arg__,
    std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
lh2(const T0__& basis_arg__, const T1__& eta_arg__, const T2__& scoef_arg__,
    std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_row_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
lS_a(const T0__& ibasis_arg__, const T1__& eta_arg__, const T2__&
     scoef_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_row_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
lh_a(const T0__& basis_arg__, const T1__& eta_arg__, const T2__& scoef_arg__,
     std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_row_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
lS_a2(const T0__& ibasis_arg__, const T1__& eta_arg__, const T2__&
      scoef_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_row_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
lh_a2(const T0__& basis_arg__, const T1__& eta_arg__, const T2__&
      scoef_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_eigen_matrix_dynamic<T7__>,
                              stan::is_vt_not_complex<T7__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>>>,-1,1>
loglik(const T0__& time_arg__, const T1__& itime_arg__, const T2__&
       start_itime_arg__, const T3__& delay_itime_arg__,
       const std::vector<int>& delayed, const std::vector<int>& status,
       const T6__& eta_arg__, const T7__& scoef_arg__, std::ostream*
       pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>>>,-1,1>
loglik2(const T0__& time_arg__, const T1__& itime_arg__, const T2__&
        start_itime_arg__, const T3__& delay_itime_arg__,
        const std::vector<int>& delayed, const std::vector<int>& status,
        const T6__& eta_arg__, const T7__& scoef_arg__, std::ostream*
        pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_row_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_row_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_row_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_row_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_eigen_matrix_dynamic<T7__>,
                              stan::is_vt_not_complex<T7__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>>>,-1,1>
loglik_a(const T0__& time_arg__, const T1__& itime_arg__, const T2__&
         start_itime_arg__, const T3__& delay_itime_arg__, const int&
         delayed, const int& status, const T6__& eta_arg__, const T7__&
         scoef_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_row_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_row_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_row_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_row_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>>>,-1,1>
loglik_a2(const T0__& time_arg__, const T1__& itime_arg__, const T2__&
          start_itime_arg__, const T3__& delay_itime_arg__, const int&
          delayed, const int& status, const T6__& eta_arg__, const T7__&
          scoef_arg__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__>,-1,-1>
cs(const T0__& rho, const int& N, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T2__, typename T3__,
          typename T4__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
void
prior_select_lp(const T0__& y_arg__, const int& dist, const T2__& location,
                const T3__& scale, const T4__& df, T_lp__& lp__,
                T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T2__, T3__, T4__>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 691;
    if (stan::math::logical_eq(dist, 0)) {} else {
                                            current_statement__ = 689;
                                            if (stan::math::logical_eq(dist,
                                                  1)) {
                                              current_statement__ = 687;
                                              lp_accum__.add(stan::math::normal_lpdf<
                                                               propto__>(y,
                                                               location,
                                                               scale));
                                            } else {
                                              current_statement__ = 686;
                                              if (stan::math::logical_eq(
                                                    dist, 2)) {
                                                current_statement__ = 684;
                                                lp_accum__.add(stan::math::cauchy_lpdf<
                                                                 propto__>(y,
                                                                 location,
                                                                 scale));
                                              } else {
                                                current_statement__ = 683;
                                                if (stan::math::logical_eq(
                                                      dist, 3)) {
                                                  current_statement__ = 681;
                                                  lp_accum__.add(stan::math::student_t_lpdf<
                                                                   propto__>(
                                                                   y, df,
                                                                   location,
                                                                   scale));
                                                } else {
                                                  current_statement__ = 680;
                                                  if (stan::math::logical_eq(
                                                        dist, 4)) {
                                                    current_statement__ = 678;
                                                    lp_accum__.add(stan::math::exponential_lpdf<
                                                                    propto__>(
                                                                    y, (1 /
                                                                    scale)));
                                                  } else {
                                                    current_statement__ = 677;
                                                    if (stan::math::logical_eq(
                                                          dist, 5)) {
                                                      current_statement__ = 675;
                                                      lp_accum__.add(
                                                        stan::math::lognormal_lpdf<
                                                          propto__>(y,
                                                          location, scale));
                                                    } else {
                                                      current_statement__ = 674;
                                                      if (stan::math::logical_eq(
                                                            dist, 6)) {
                                                        current_statement__ = 671;
                                                        lp_accum__.add(
                                                          stan::math::student_t_lpdf<
                                                            propto__>(
                                                            stan::math::log(y),
                                                            df, location,
                                                            scale));
                                                        current_statement__ = 672;
                                                        lp_accum__.add(
                                                          stan::math::minus(
                                                            stan::math::log(y)));
                                                      } else {
                                                        current_statement__ = 669;
                                                        std::stringstream
                                                          errmsg_stream__;
                                                        stan::math::stan_print(
                                                          &errmsg_stream__,
                                                          "Not a supported prior dist.");
                                                        throw std::domain_error(
                                                                errmsg_stream__.str());
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
    }
    current_statement__ = 692;
    return ;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T2__, typename T3__,
          typename T4__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
void
prior_select2_lp(const T0__& y, const int& dist, const T2__& location,
                 const T3__& scale, const T4__& df, T_lp__& lp__,
                 T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T2__, T3__, T4__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 716;
    if (stan::math::logical_eq(dist, 0)) {} else {
                                            current_statement__ = 714;
                                            if (stan::math::logical_eq(dist,
                                                  1)) {
                                              current_statement__ = 712;
                                              lp_accum__.add(stan::math::normal_lpdf<
                                                               propto__>(y,
                                                               location,
                                                               scale));
                                            } else {
                                              current_statement__ = 711;
                                              if (stan::math::logical_eq(
                                                    dist, 2)) {
                                                current_statement__ = 709;
                                                lp_accum__.add(stan::math::cauchy_lpdf<
                                                                 propto__>(y,
                                                                 location,
                                                                 scale));
                                              } else {
                                                current_statement__ = 708;
                                                if (stan::math::logical_eq(
                                                      dist, 3)) {
                                                  current_statement__ = 706;
                                                  lp_accum__.add(stan::math::student_t_lpdf<
                                                                   propto__>(
                                                                   y, df,
                                                                   location,
                                                                   scale));
                                                } else {
                                                  current_statement__ = 705;
                                                  if (stan::math::logical_eq(
                                                        dist, 4)) {
                                                    current_statement__ = 703;
                                                    lp_accum__.add(stan::math::exponential_lpdf<
                                                                    propto__>(
                                                                    y, (1 /
                                                                    scale)));
                                                  } else {
                                                    current_statement__ = 702;
                                                    if (stan::math::logical_eq(
                                                          dist, 5)) {
                                                      current_statement__ = 700;
                                                      lp_accum__.add(
                                                        stan::math::lognormal_lpdf<
                                                          propto__>(y,
                                                          location, scale));
                                                    } else {
                                                      current_statement__ = 699;
                                                      if (stan::math::logical_eq(
                                                            dist, 6)) {
                                                        current_statement__ = 696;
                                                        lp_accum__.add(
                                                          stan::math::student_t_lpdf<
                                                            propto__>(
                                                            stan::math::log(y),
                                                            df, location,
                                                            scale));
                                                        current_statement__ = 697;
                                                        lp_accum__.add(-
                                                          stan::math::log(y));
                                                      } else {
                                                        current_statement__ = 694;
                                                        std::stringstream
                                                          errmsg_stream__;
                                                        stan::math::stan_print(
                                                          &errmsg_stream__,
                                                          "Not a supported prior dist.");
                                                        throw std::domain_error(
                                                                errmsg_stream__.str());
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
    }
    current_statement__ = 717;
    return ;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
int count_nonzero(const T0__& m_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& m = stan::math::to_ref(m_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int I = std::numeric_limits<int>::min();
    current_statement__ = 719;
    I = stan::math::rows(m);
    int J = std::numeric_limits<int>::min();
    current_statement__ = 720;
    J = stan::math::cols(m);
    int c = std::numeric_limits<int>::min();
    current_statement__ = 721;
    c = 0;
    current_statement__ = 727;
    for (int j = 1; j <= I; ++j) {
      current_statement__ = 725;
      for (int i = 1; i <= J; ++i) {
        current_statement__ = 723;
        if (stan::math::logical_neq(
              stan::model::rvalue(m, "m", stan::model::index_uni(i),
                stan::model::index_uni(j)), 0)) {
          current_statement__ = 722;
          c = (c + 1);
        }
      }
    }
    current_statement__ = 728;
    return c;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<int>
which_gt0a(const std::vector<int>& x, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 730;
    n = stan::math::num_elements(x);
    current_statement__ = 731;
    stan::math::validate_non_negative_index("w", "n", n);
    std::vector<int> w = std::vector<int>(n, std::numeric_limits<int>::min());
    int c = std::numeric_limits<int>::min();
    current_statement__ = 733;
    c = 1;
    current_statement__ = 739;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 737;
      if (stan::math::logical_gt(
            stan::model::rvalue(x, "x", stan::model::index_uni(i)), 0)) {
        current_statement__ = 734;
        stan::model::assign(w, i, "assigning variable w",
          stan::model::index_uni(c));
        current_statement__ = 735;
        c = (c + 1);
      }
    }
    current_statement__ = 740;
    return stan::model::rvalue(w, "w", stan::model::index_min_max(1, (c - 1)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<int>
which(const std::vector<int>& x, const int& y, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 742;
    n = stan::math::num_elements(x);
    current_statement__ = 743;
    stan::math::validate_non_negative_index("w", "n", n);
    std::vector<int> w = std::vector<int>(n, std::numeric_limits<int>::min());
    int c = std::numeric_limits<int>::min();
    current_statement__ = 745;
    c = 1;
    current_statement__ = 751;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 749;
      if (stan::math::logical_eq(
            stan::model::rvalue(x, "x", stan::model::index_uni(i)), y)) {
        current_statement__ = 746;
        stan::model::assign(w, i, "assigning variable w",
          stan::model::index_uni(c));
        current_statement__ = 747;
        c = (c + 1);
      }
    }
    current_statement__ = 752;
    return stan::model::rvalue(w, "w", stan::model::index_min_max(1, (c - 1)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int nwhich(const std::vector<int>& x, const int& y, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int w = std::numeric_limits<int>::min();
    current_statement__ = 754;
    w = 0;
    current_statement__ = 758;
    for (int i = 1; i <= stan::math::num_elements(x); ++i) {
      current_statement__ = 756;
      if (stan::math::logical_eq(
            stan::model::rvalue(x, "x", stan::model::index_uni(i)), y)) {
        current_statement__ = 755;
        w = (w + 1);
      }
    }
    current_statement__ = 759;
    return w;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<int>
nwhich_all(const std::vector<int>& x, const int& max_id, std::ostream*
           pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 761;
    stan::math::validate_non_negative_index("w", "max_id", max_id);
    std::vector<int> w =
      std::vector<int>(max_id, std::numeric_limits<int>::min());
    current_statement__ = 762;
    stan::model::assign(w, stan::math::rep_array(0, max_id),
      "assigning variable w");
    current_statement__ = 766;
    for (int i = 1; i <= stan::math::num_elements(x); ++i) {
      current_statement__ = 764;
      if (stan::model::rvalue(x, "x", stan::model::index_uni(i))) {
        current_statement__ = 763;
        stan::model::assign(w,
          (stan::model::rvalue(w, "w",
             stan::model::index_uni(
               stan::model::rvalue(x, "x", stan::model::index_uni(i)))) + 1),
          "assigning variable w",
          stan::model::index_uni(
            stan::model::rvalue(x, "x", stan::model::index_uni(i))));
      }
    }
    current_statement__ = 767;
    return w;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
std::vector<int> which_gt0(const T0__& x_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& x = stan::math::to_ref(x_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 769;
    n = stan::math::num_elements(x);
    current_statement__ = 770;
    stan::math::validate_non_negative_index("w", "n", n);
    std::vector<int> w = std::vector<int>(n, std::numeric_limits<int>::min());
    int c = std::numeric_limits<int>::min();
    current_statement__ = 772;
    c = 1;
    current_statement__ = 778;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 776;
      if (stan::math::logical_gt(
            stan::model::rvalue(x, "x", stan::model::index_uni(i)), 0)) {
        current_statement__ = 773;
        stan::model::assign(w, i, "assigning variable w",
          stan::model::index_uni(c));
        current_statement__ = 774;
        c = (c + 1);
      }
    }
    current_statement__ = 779;
    return stan::model::rvalue(w, "w", stan::model::index_min_max(1, (c - 1)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
lS(const T0__& ibasis_arg__, const T1__& eta_arg__, const T2__& scoef_arg__,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& ibasis = stan::math::to_ref(ibasis_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& scoef = stan::math::to_ref(scoef_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 781;
    return stan::math::elt_multiply(
             stan::math::minus(stan::math::rows_dot_product(ibasis, scoef)),
             stan::math::exp(eta));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
lh(const T0__& basis_arg__, const T1__& eta_arg__, const T2__& scoef_arg__,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& basis = stan::math::to_ref(basis_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& scoef = stan::math::to_ref(scoef_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 783;
    return stan::math::add(
             stan::math::log(stan::math::rows_dot_product(basis, scoef)), eta);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
lS2(const T0__& ibasis_arg__, const T1__& eta_arg__, const T2__& scoef_arg__,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& ibasis = stan::math::to_ref(ibasis_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& scoef = stan::math::to_ref(scoef_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 785;
    return stan::math::elt_multiply(
             stan::math::minus(stan::math::multiply(ibasis, scoef)),
             stan::math::exp(eta));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
lh2(const T0__& basis_arg__, const T1__& eta_arg__, const T2__& scoef_arg__,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& basis = stan::math::to_ref(basis_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& scoef = stan::math::to_ref(scoef_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 787;
    return stan::math::add(
             stan::math::log(stan::math::multiply(basis, scoef)), eta);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_row_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
lS_a(const T0__& ibasis_arg__, const T1__& eta_arg__, const T2__&
     scoef_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& ibasis = stan::math::to_ref(ibasis_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& scoef = stan::math::to_ref(scoef_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 789;
    return stan::math::elt_multiply(
             stan::math::minus(
               stan::math::multiply(scoef, stan::math::transpose(ibasis))),
             stan::math::exp(eta));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_row_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
lh_a(const T0__& basis_arg__, const T1__& eta_arg__, const T2__& scoef_arg__,
     std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& basis = stan::math::to_ref(basis_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& scoef = stan::math::to_ref(scoef_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 791;
    return stan::math::add(
             stan::math::log(
               stan::math::multiply(scoef, stan::math::transpose(basis))),
             eta);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_row_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
lS_a2(const T0__& ibasis_arg__, const T1__& eta_arg__, const T2__&
      scoef_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& ibasis = stan::math::to_ref(ibasis_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& scoef = stan::math::to_ref(scoef_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 793;
    return stan::math::multiply(-stan::math::multiply(ibasis, scoef),
             stan::math::exp(eta));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_row_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
lh_a2(const T0__& basis_arg__, const T1__& eta_arg__, const T2__&
      scoef_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& basis = stan::math::to_ref(basis_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& scoef = stan::math::to_ref(scoef_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 795;
    return stan::math::add(
             stan::math::log(stan::math::multiply(basis, scoef)), eta);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_eigen_matrix_dynamic<T7__>,
                              stan::is_vt_not_complex<T7__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>>>,-1,1>
loglik(const T0__& time_arg__, const T1__& itime_arg__, const T2__&
       start_itime_arg__, const T3__& delay_itime_arg__,
       const std::vector<int>& delayed, const std::vector<int>& status,
       const T6__& eta_arg__, const T7__& scoef_arg__, std::ostream*
       pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T6__>,
                             stan::promote_args_t<stan::base_type_t<T7__>>>;
  int current_statement__ = 0;
  const auto& time = stan::math::to_ref(time_arg__);
  const auto& itime = stan::math::to_ref(itime_arg__);
  const auto& start_itime = stan::math::to_ref(start_itime_arg__);
  const auto& delay_itime = stan::math::to_ref(delay_itime_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& scoef = stan::math::to_ref(scoef_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 797;
    stan::math::validate_non_negative_index("l", "num_elements(eta)",
      stan::math::num_elements(eta));
    Eigen::Matrix<local_scalar_t__,-1,1> l =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::num_elements(
                                                       eta), DUMMY_VAR__);
    std::vector<int> nw =
      std::vector<int>(3, std::numeric_limits<int>::min());
    current_statement__ = 799;
    stan::model::assign(nw, nwhich_all(status, 3, pstream__),
      "assigning variable nw");
    int nd = std::numeric_limits<int>::min();
    current_statement__ = 800;
    nd = nwhich(delayed, 1, pstream__);
    current_statement__ = 801;
    stan::model::assign(l, lS(itime, eta, scoef, pstream__),
      "assigning variable l");
    current_statement__ = 806;
    if (stan::model::rvalue(nw, "nw", stan::model::index_uni(1))) {
      current_statement__ = 802;
      stan::math::validate_non_negative_index("w1", "nw[1]",
        stan::model::rvalue(nw, "nw", stan::model::index_uni(1)));
      std::vector<int> w1 =
        std::vector<int>(stan::model::rvalue(nw, "nw",
                           stan::model::index_uni(1)),
          std::numeric_limits<int>::min());
      current_statement__ = 803;
      stan::model::assign(w1, which(status, 1, pstream__),
        "assigning variable w1");
      current_statement__ = 804;
      stan::model::assign(l,
        stan::math::add(
          stan::model::deep_copy(
            stan::model::rvalue(l, "l", stan::model::index_multi(w1))),
          lh(stan::model::rvalue(time, "time", stan::model::index_multi(w1)),
            stan::model::rvalue(eta, "eta", stan::model::index_multi(w1)),
            stan::model::rvalue(scoef, "scoef", stan::model::index_multi(w1)),
            pstream__)), "assigning variable l", stan::model::index_multi(w1));
    }
    current_statement__ = 811;
    if (stan::model::rvalue(nw, "nw", stan::model::index_uni(2))) {
      current_statement__ = 807;
      stan::math::validate_non_negative_index("w2", "nw[2]",
        stan::model::rvalue(nw, "nw", stan::model::index_uni(2)));
      std::vector<int> w2 =
        std::vector<int>(stan::model::rvalue(nw, "nw",
                           stan::model::index_uni(2)),
          std::numeric_limits<int>::min());
      current_statement__ = 808;
      stan::model::assign(w2, which(status, 2, pstream__),
        "assigning variable w2");
      current_statement__ = 809;
      stan::model::assign(l,
        stan::math::log1m_exp(
          stan::model::deep_copy(
            stan::model::rvalue(l, "l", stan::model::index_multi(w2)))),
        "assigning variable l", stan::model::index_multi(w2));
    }
    current_statement__ = 816;
    if (stan::model::rvalue(nw, "nw", stan::model::index_uni(3))) {
      current_statement__ = 812;
      stan::math::validate_non_negative_index("w3", "nw[3]",
        stan::model::rvalue(nw, "nw", stan::model::index_uni(3)));
      std::vector<int> w3 =
        std::vector<int>(stan::model::rvalue(nw, "nw",
                           stan::model::index_uni(3)),
          std::numeric_limits<int>::min());
      current_statement__ = 813;
      stan::model::assign(w3, which(status, 3, pstream__),
        "assigning variable w3");
      current_statement__ = 814;
      stan::model::assign(l,
        stan::math::log_diff_exp(
          lS(
            stan::model::rvalue(start_itime, "start_itime",
              stan::model::index_multi(w3)),
            stan::model::rvalue(eta, "eta", stan::model::index_multi(w3)),
            stan::model::rvalue(scoef, "scoef", stan::model::index_multi(w3)),
            pstream__),
          stan::model::deep_copy(
            stan::model::rvalue(l, "l", stan::model::index_multi(w3)))),
        "assigning variable l", stan::model::index_multi(w3));
    }
    current_statement__ = 821;
    if (nd) {
      current_statement__ = 817;
      stan::math::validate_non_negative_index("wd", "nd", nd);
      std::vector<int> wd =
        std::vector<int>(nd, std::numeric_limits<int>::min());
      current_statement__ = 818;
      stan::model::assign(wd, which(delayed, 1, pstream__),
        "assigning variable wd");
      current_statement__ = 819;
      stan::model::assign(l,
        stan::math::subtract(
          stan::model::deep_copy(
            stan::model::rvalue(l, "l", stan::model::index_multi(wd))),
          lS(
            stan::model::rvalue(delay_itime, "delay_itime",
              stan::model::index_multi(wd)),
            stan::model::rvalue(eta, "eta", stan::model::index_multi(wd)),
            stan::model::rvalue(scoef, "scoef", stan::model::index_multi(wd)),
            pstream__)), "assigning variable l", stan::model::index_multi(wd));
    }
    current_statement__ = 822;
    return l;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>>>,-1,1>
loglik2(const T0__& time_arg__, const T1__& itime_arg__, const T2__&
        start_itime_arg__, const T3__& delay_itime_arg__,
        const std::vector<int>& delayed, const std::vector<int>& status,
        const T6__& eta_arg__, const T7__& scoef_arg__, std::ostream*
        pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T6__>,
                             stan::promote_args_t<stan::base_type_t<T7__>>>;
  int current_statement__ = 0;
  const auto& time = stan::math::to_ref(time_arg__);
  const auto& itime = stan::math::to_ref(itime_arg__);
  const auto& start_itime = stan::math::to_ref(start_itime_arg__);
  const auto& delay_itime = stan::math::to_ref(delay_itime_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& scoef = stan::math::to_ref(scoef_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 824;
    stan::math::validate_non_negative_index("l", "num_elements(eta)",
      stan::math::num_elements(eta));
    Eigen::Matrix<local_scalar_t__,-1,1> l =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::num_elements(
                                                       eta), DUMMY_VAR__);
    std::vector<int> nw =
      std::vector<int>(3, std::numeric_limits<int>::min());
    current_statement__ = 826;
    stan::model::assign(nw, nwhich_all(status, 3, pstream__),
      "assigning variable nw");
    int nd = std::numeric_limits<int>::min();
    current_statement__ = 827;
    nd = nwhich(delayed, 1, pstream__);
    current_statement__ = 828;
    stan::model::assign(l, lS2(itime, eta, scoef, pstream__),
      "assigning variable l");
    current_statement__ = 833;
    if (stan::model::rvalue(nw, "nw", stan::model::index_uni(1))) {
      current_statement__ = 829;
      stan::math::validate_non_negative_index("w1", "nw[1]",
        stan::model::rvalue(nw, "nw", stan::model::index_uni(1)));
      std::vector<int> w1 =
        std::vector<int>(stan::model::rvalue(nw, "nw",
                           stan::model::index_uni(1)),
          std::numeric_limits<int>::min());
      current_statement__ = 830;
      stan::model::assign(w1, which(status, 1, pstream__),
        "assigning variable w1");
      current_statement__ = 831;
      stan::model::assign(l,
        stan::math::add(
          stan::model::deep_copy(
            stan::model::rvalue(l, "l", stan::model::index_multi(w1))),
          lh2(
            stan::model::rvalue(time, "time", stan::model::index_multi(w1)),
            stan::model::rvalue(eta, "eta", stan::model::index_multi(w1)),
            scoef, pstream__)), "assigning variable l",
        stan::model::index_multi(w1));
    }
    current_statement__ = 838;
    if (stan::model::rvalue(nw, "nw", stan::model::index_uni(2))) {
      current_statement__ = 834;
      stan::math::validate_non_negative_index("w2", "nw[2]",
        stan::model::rvalue(nw, "nw", stan::model::index_uni(2)));
      std::vector<int> w2 =
        std::vector<int>(stan::model::rvalue(nw, "nw",
                           stan::model::index_uni(2)),
          std::numeric_limits<int>::min());
      current_statement__ = 835;
      stan::model::assign(w2, which(status, 2, pstream__),
        "assigning variable w2");
      current_statement__ = 836;
      stan::model::assign(l,
        stan::math::log1m_exp(
          stan::model::deep_copy(
            stan::model::rvalue(l, "l", stan::model::index_multi(w2)))),
        "assigning variable l", stan::model::index_multi(w2));
    }
    current_statement__ = 843;
    if (stan::model::rvalue(nw, "nw", stan::model::index_uni(3))) {
      current_statement__ = 839;
      stan::math::validate_non_negative_index("w3", "nw[3]",
        stan::model::rvalue(nw, "nw", stan::model::index_uni(3)));
      std::vector<int> w3 =
        std::vector<int>(stan::model::rvalue(nw, "nw",
                           stan::model::index_uni(3)),
          std::numeric_limits<int>::min());
      current_statement__ = 840;
      stan::model::assign(w3, which(status, 3, pstream__),
        "assigning variable w3");
      current_statement__ = 841;
      stan::model::assign(l,
        stan::math::log_diff_exp(
          lS2(
            stan::model::rvalue(start_itime, "start_itime",
              stan::model::index_multi(w3)),
            stan::model::rvalue(eta, "eta", stan::model::index_multi(w3)),
            scoef, pstream__),
          stan::model::deep_copy(
            stan::model::rvalue(l, "l", stan::model::index_multi(w3)))),
        "assigning variable l", stan::model::index_multi(w3));
    }
    current_statement__ = 848;
    if (nd) {
      current_statement__ = 844;
      stan::math::validate_non_negative_index("wd", "nd", nd);
      std::vector<int> wd =
        std::vector<int>(nd, std::numeric_limits<int>::min());
      current_statement__ = 845;
      stan::model::assign(wd, which(delayed, 1, pstream__),
        "assigning variable wd");
      current_statement__ = 846;
      stan::model::assign(l,
        stan::math::subtract(
          stan::model::deep_copy(
            stan::model::rvalue(l, "l", stan::model::index_multi(wd))),
          lS2(
            stan::model::rvalue(delay_itime, "delay_itime",
              stan::model::index_multi(wd)),
            stan::model::rvalue(eta, "eta", stan::model::index_multi(wd)),
            scoef, pstream__)), "assigning variable l",
        stan::model::index_multi(wd));
    }
    current_statement__ = 849;
    return l;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_row_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_row_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_row_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_row_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_eigen_matrix_dynamic<T7__>,
                              stan::is_vt_not_complex<T7__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>>>,-1,1>
loglik_a(const T0__& time_arg__, const T1__& itime_arg__, const T2__&
         start_itime_arg__, const T3__& delay_itime_arg__, const int&
         delayed, const int& status, const T6__& eta_arg__, const T7__&
         scoef_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T6__>,
                             stan::promote_args_t<stan::base_type_t<T7__>>>;
  int current_statement__ = 0;
  const auto& time = stan::math::to_ref(time_arg__);
  const auto& itime = stan::math::to_ref(itime_arg__);
  const auto& start_itime = stan::math::to_ref(start_itime_arg__);
  const auto& delay_itime = stan::math::to_ref(delay_itime_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& scoef = stan::math::to_ref(scoef_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 851;
    stan::math::validate_non_negative_index("l", "num_elements(eta)",
      stan::math::num_elements(eta));
    Eigen::Matrix<local_scalar_t__,-1,1> l =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::num_elements(
                                                       eta), DUMMY_VAR__);
    current_statement__ = 864;
    if (stan::math::logical_eq(status, 0)) {
      current_statement__ = 862;
      stan::model::assign(l, lS_a(itime, eta, scoef, pstream__),
        "assigning variable l");
    } else {
      current_statement__ = 861;
      if (stan::math::logical_eq(status, 1)) {
        current_statement__ = 859;
        stan::model::assign(l,
          stan::math::add(lS_a(itime, eta, scoef, pstream__),
            lh_a(time, eta, scoef, pstream__)), "assigning variable l");
      } else {
        current_statement__ = 858;
        if (stan::math::logical_eq(status, 2)) {
          current_statement__ = 856;
          stan::model::assign(l,
            stan::math::log1m_exp(lS_a(itime, eta, scoef, pstream__)),
            "assigning variable l");
        } else {
          current_statement__ = 855;
          if (stan::math::logical_eq(status, 3)) {
            current_statement__ = 853;
            stan::model::assign(l,
              stan::math::log_diff_exp(
                lS_a(start_itime, eta, scoef, pstream__),
                lS_a(itime, eta, scoef, pstream__)), "assigning variable l");
          }
        }
      }
    }
    current_statement__ = 867;
    if (delayed) {
      current_statement__ = 865;
      stan::model::assign(l,
        stan::math::subtract(stan::model::deep_copy(l),
          lS_a(delay_itime, eta, scoef, pstream__)), "assigning variable l");
    }
    current_statement__ = 868;
    return l;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_row_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_row_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_row_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_row_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>>>,-1,1>
loglik_a2(const T0__& time_arg__, const T1__& itime_arg__, const T2__&
          start_itime_arg__, const T3__& delay_itime_arg__, const int&
          delayed, const int& status, const T6__& eta_arg__, const T7__&
          scoef_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T6__>,
                             stan::promote_args_t<stan::base_type_t<T7__>>>;
  int current_statement__ = 0;
  const auto& time = stan::math::to_ref(time_arg__);
  const auto& itime = stan::math::to_ref(itime_arg__);
  const auto& start_itime = stan::math::to_ref(start_itime_arg__);
  const auto& delay_itime = stan::math::to_ref(delay_itime_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& scoef = stan::math::to_ref(scoef_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 870;
    stan::math::validate_non_negative_index("l", "num_elements(eta)",
      stan::math::num_elements(eta));
    Eigen::Matrix<local_scalar_t__,-1,1> l =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::num_elements(
                                                       eta), DUMMY_VAR__);
    current_statement__ = 883;
    if (stan::math::logical_eq(status, 0)) {
      current_statement__ = 881;
      stan::model::assign(l, lS_a2(itime, eta, scoef, pstream__),
        "assigning variable l");
    } else {
      current_statement__ = 880;
      if (stan::math::logical_eq(status, 1)) {
        current_statement__ = 878;
        stan::model::assign(l,
          stan::math::add(lS_a2(itime, eta, scoef, pstream__),
            lh_a2(time, eta, scoef, pstream__)), "assigning variable l");
      } else {
        current_statement__ = 877;
        if (stan::math::logical_eq(status, 2)) {
          current_statement__ = 875;
          stan::model::assign(l,
            stan::math::log1m_exp(lS_a2(itime, eta, scoef, pstream__)),
            "assigning variable l");
        } else {
          current_statement__ = 874;
          if (stan::math::logical_eq(status, 3)) {
            current_statement__ = 872;
            stan::model::assign(l,
              stan::math::log_diff_exp(
                lS_a2(start_itime, eta, scoef, pstream__),
                lS_a2(itime, eta, scoef, pstream__)), "assigning variable l");
          }
        }
      }
    }
    current_statement__ = 886;
    if (delayed) {
      current_statement__ = 884;
      stan::model::assign(l,
        stan::math::subtract(stan::model::deep_copy(l),
          lS_a2(delay_itime, eta, scoef, pstream__)), "assigning variable l");
    }
    current_statement__ = 887;
    return l;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
Eigen::Matrix<stan::promote_args_t<T0__>,-1,-1>
cs(const T0__& rho, const int& N, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 889;
    stan::math::validate_non_negative_index("out", "N", N);
    current_statement__ = 890;
    stan::math::validate_non_negative_index("out", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,-1> out =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
    current_statement__ = 897;
    for (int j = 1; j <= N; ++j) {
      current_statement__ = 896;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 894;
        if (stan::math::logical_eq(i, j)) {
          current_statement__ = 893;
          stan::model::assign(out, 1, "assigning variable out",
            stan::model::index_uni(i), stan::model::index_uni(j));
        } else {
          current_statement__ = 892;
          stan::model::assign(out, rho, "assigning variable out",
            stan::model::index_uni(i), stan::model::index_uni(j));
        }
      }
    }
    current_statement__ = 898;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_survival_mspline final : public model_base_crtp<model_survival_mspline> {
private:
  int ns_ipd;
  int ns_agd_arm;
  int ns_agd_contrast;
  int ni_ipd;
  int ni_agd_arm;
  int ni_agd_contrast;
  int narm_ipd;
  std::vector<int> ipd_arm;
  std::vector<int> ipd_trt;
  int narm_agd_arm;
  std::vector<int> agd_arm_trt;
  std::vector<int> agd_contrast_trt;
  std::vector<int> agd_contrast_trt_b;
  int nt;
  int nX;
  int nchains;
  int CHAIN_ID;
  std::vector<int> nint_vec;
  int nint_max;
  int int_thin;
  int link;
  Eigen::Matrix<double,-1,1> agd_contrast_y_data__;
  Eigen::Matrix<double,-1,-1> agd_contrast_Sigma_data__;
  int QR;
  Eigen::Matrix<double,-1,-1> X_data__;
  Eigen::Matrix<double,-1,-1> R_inv_data__;
  int has_offset;
  Eigen::Matrix<double,-1,1> offsets_data__;
  int RE;
  std::vector<int> which_RE;
  Eigen::Matrix<double,-1,-1> RE_cor_data__;
  int nodesplit;
  int prior_intercept_dist;
  double prior_intercept_location;
  double prior_intercept_scale;
  double prior_intercept_df;
  int prior_trt_dist;
  double prior_trt_location;
  double prior_trt_scale;
  double prior_trt_df;
  int prior_het_dist;
  int prior_het_type;
  double prior_het_location;
  double prior_het_scale;
  double prior_het_df;
  int prior_reg_dist;
  double prior_reg_location;
  double prior_reg_scale;
  double prior_reg_df;
  int class_effects;
  std::vector<int> which_CE;
  std::vector<int> which_CE_sd;
  int prior_class_mean_dist;
  double prior_class_mean_location;
  double prior_class_mean_scale;
  double prior_class_mean_df;
  int prior_class_sd_dist;
  double prior_class_sd_location;
  double prior_class_sd_scale;
  double prior_class_sd_df;
  int n_scoef;
  std::vector<int> agd_arm_arm;
  Eigen::Matrix<double,-1,-1> ipd_time_data__;
  Eigen::Matrix<double,-1,-1> ipd_itime_data__;
  Eigen::Matrix<double,-1,-1> ipd_start_itime_data__;
  Eigen::Matrix<double,-1,-1> ipd_delay_itime_data__;
  std::vector<int> ipd_delayed;
  std::vector<int> ipd_status;
  Eigen::Matrix<double,-1,-1> agd_arm_time_data__;
  Eigen::Matrix<double,-1,-1> agd_arm_itime_data__;
  Eigen::Matrix<double,-1,-1> agd_arm_start_itime_data__;
  Eigen::Matrix<double,-1,-1> agd_arm_delay_itime_data__;
  std::vector<int> agd_arm_delayed;
  std::vector<int> agd_arm_status;
  int aux_int;
  std::vector<int> aux_id;
  std::vector<int> aux_group;
  int nX_aux;
  Eigen::Matrix<double,-1,-1> X_aux_data__;
  int aux_reg_trt;
  int prior_hyper_dist;
  double prior_hyper_location;
  double prior_hyper_scale;
  double prior_hyper_df;
  std::vector<Eigen::Matrix<double,-1,1>> prior_aux_location;
  std::vector<Eigen::Matrix<double,-1,1>> lscoef_weight;
  int prior_reg_hyper_dist;
  double prior_reg_hyper_location;
  double prior_reg_hyper_scale;
  double prior_reg_hyper_df;
  int n_aux;
  int n_aux_group;
  std::vector<int> aux_id_ipd;
  std::vector<int> aux_id_agd_arm;
  std::vector<int> aux_group_ipd;
  std::vector<int> aux_group_agd_arm;
  std::vector<int> ni_aux_group_ipd;
  std::vector<std::vector<int>> wi_aux_group_ipd;
  std::vector<int> ni_aux_group_agd_arm;
  std::vector<std::vector<int>> wi_aux_group_agd_arm;
  Eigen::Matrix<double,-1,-1> Xauxdummy_data__;
  Eigen::Matrix<double,-1,-1> X_aux_ipd_data__;
  Eigen::Matrix<double,-1,-1> X_aux_agd_arm_data__;
  Eigen::Matrix<double,-1,-1> sigma_beta_L_data__;
  int nint;
  int n_delta;
  Eigen::Matrix<double,-1,1> RE_mu_data__;
  Eigen::Matrix<double,-1,-1> REdummy_data__;
  Eigen::Matrix<double,-1,-1> RE_L_data__;
  Eigen::Matrix<double,-1,1> wdummy_data__;
  std::vector<int> vudummy;
  int RE_L_nz;
  int RE_sparse;
  Eigen::Matrix<double,-1,1> RE_L_w_data__;
  std::vector<int> RE_L_v;
  std::vector<int> RE_L_u;
  int totns;
  std::vector<int> trt;
  Eigen::Matrix<double,-1,-1> Xdummy_data__;
  Eigen::Matrix<double,-1,-1> X_ipd_data__;
  Eigen::Matrix<double,-1,-1> X_agd_arm_data__;
  Eigen::Matrix<double,-1,-1> X_agd_contrast_data__;
  Eigen::Matrix<double,-1,1> odummy_data__;
  Eigen::Matrix<double,-1,1> offset_ipd_data__;
  Eigen::Matrix<double,-1,1> offset_agd_arm_data__;
  Eigen::Matrix<double,-1,1> offset_agd_contrast_data__;
  int n_int_thin;
  Eigen::Matrix<double,-1,-1> inv_Sigma_data__;
  std::vector<int> nc_agd_contrast;
  int n_class;
  std::vector<int> which_class;
  std::vector<int> which_class_sd;
  int n_class_trts;
  std::vector<int> which_class_trt;
  int tau_1dim__;
  int class_mean_1dim__;
  int class_sd_1dim__;
  int z_class_1dim__;
  int u_beta_aux_2dim__;
  int sigma_beta_1dim__;
  int u_aux_2dim__;
  int lscoef_2dim__;
  int scoef_temp_1dim__;
  int beta_aux_2dim__;
  int d_1dim__;
  int beta_1dim__;
  int eta_agd_contrast_ii_1dim__;
  int f_class_1dim__;
  int d_aux_1dim__;
  int d_aux_2dim__;
  int log_lik_1dim__;
  int resdev_1dim__;
  int theta_bar_cum_agd_contrast_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> agd_contrast_y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> agd_contrast_Sigma{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> R_inv{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> offsets{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> RE_cor{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> ipd_time{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> ipd_itime{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> ipd_start_itime{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> ipd_delay_itime{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> agd_arm_time{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> agd_arm_itime{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> agd_arm_start_itime{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> agd_arm_delay_itime{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_aux{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Xauxdummy{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_aux_ipd{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_aux_agd_arm{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> sigma_beta_L{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> RE_mu{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> REdummy{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> RE_L{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> wdummy{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> RE_L_w{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Xdummy{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_ipd{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_agd_arm{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_agd_contrast{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> odummy{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> offset_ipd{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> offset_agd_arm{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> offset_agd_contrast{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> inv_Sigma{nullptr, 0, 0};
public:
  ~model_survival_mspline() {}
  model_survival_mspline(stan::io::var_context& context__, unsigned int
                         random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_survival_mspline_namespace::model_survival_mspline";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 368;
      context__.validate_dims("data initialization", "ns_ipd", "int",
        std::vector<size_t>{});
      ns_ipd = std::numeric_limits<int>::min();
      current_statement__ = 368;
      ns_ipd = context__.vals_i("ns_ipd")[(1 - 1)];
      current_statement__ = 368;
      stan::math::check_greater_or_equal(function__, "ns_ipd", ns_ipd, 0);
      current_statement__ = 369;
      context__.validate_dims("data initialization", "ns_agd_arm", "int",
        std::vector<size_t>{});
      ns_agd_arm = std::numeric_limits<int>::min();
      current_statement__ = 369;
      ns_agd_arm = context__.vals_i("ns_agd_arm")[(1 - 1)];
      current_statement__ = 369;
      stan::math::check_greater_or_equal(function__, "ns_agd_arm",
        ns_agd_arm, 0);
      current_statement__ = 370;
      context__.validate_dims("data initialization", "ns_agd_contrast",
        "int", std::vector<size_t>{});
      ns_agd_contrast = std::numeric_limits<int>::min();
      current_statement__ = 370;
      ns_agd_contrast = context__.vals_i("ns_agd_contrast")[(1 - 1)];
      current_statement__ = 370;
      stan::math::check_greater_or_equal(function__, "ns_agd_contrast",
        ns_agd_contrast, 0);
      current_statement__ = 371;
      context__.validate_dims("data initialization", "ni_ipd", "int",
        std::vector<size_t>{});
      ni_ipd = std::numeric_limits<int>::min();
      current_statement__ = 371;
      ni_ipd = context__.vals_i("ni_ipd")[(1 - 1)];
      current_statement__ = 371;
      stan::math::check_greater_or_equal(function__, "ni_ipd", ni_ipd, 0);
      current_statement__ = 372;
      context__.validate_dims("data initialization", "ni_agd_arm", "int",
        std::vector<size_t>{});
      ni_agd_arm = std::numeric_limits<int>::min();
      current_statement__ = 372;
      ni_agd_arm = context__.vals_i("ni_agd_arm")[(1 - 1)];
      current_statement__ = 372;
      stan::math::check_greater_or_equal(function__, "ni_agd_arm",
        ni_agd_arm, 0);
      current_statement__ = 373;
      context__.validate_dims("data initialization", "ni_agd_contrast",
        "int", std::vector<size_t>{});
      ni_agd_contrast = std::numeric_limits<int>::min();
      current_statement__ = 373;
      ni_agd_contrast = context__.vals_i("ni_agd_contrast")[(1 - 1)];
      current_statement__ = 373;
      stan::math::check_greater_or_equal(function__, "ni_agd_contrast",
        ni_agd_contrast, 0);
      current_statement__ = 374;
      context__.validate_dims("data initialization", "narm_ipd", "int",
        std::vector<size_t>{});
      narm_ipd = std::numeric_limits<int>::min();
      current_statement__ = 374;
      narm_ipd = context__.vals_i("narm_ipd")[(1 - 1)];
      current_statement__ = 374;
      stan::math::check_greater_or_equal(function__, "narm_ipd", narm_ipd, 0);
      current_statement__ = 375;
      stan::math::validate_non_negative_index("ipd_arm", "ni_ipd", ni_ipd);
      current_statement__ = 376;
      context__.validate_dims("data initialization", "ipd_arm", "int",
        std::vector<size_t>{static_cast<size_t>(ni_ipd)});
      ipd_arm = std::vector<int>(ni_ipd, std::numeric_limits<int>::min());
      current_statement__ = 376;
      ipd_arm = context__.vals_i("ipd_arm");
      current_statement__ = 376;
      stan::math::check_greater_or_equal(function__, "ipd_arm", ipd_arm, 1);
      current_statement__ = 377;
      stan::math::validate_non_negative_index("ipd_trt", "narm_ipd", narm_ipd);
      current_statement__ = 378;
      context__.validate_dims("data initialization", "ipd_trt", "int",
        std::vector<size_t>{static_cast<size_t>(narm_ipd)});
      ipd_trt = std::vector<int>(narm_ipd, std::numeric_limits<int>::min());
      current_statement__ = 378;
      ipd_trt = context__.vals_i("ipd_trt");
      current_statement__ = 378;
      stan::math::check_greater_or_equal(function__, "ipd_trt", ipd_trt, 1);
      current_statement__ = 379;
      context__.validate_dims("data initialization", "narm_agd_arm", "int",
        std::vector<size_t>{});
      narm_agd_arm = std::numeric_limits<int>::min();
      current_statement__ = 379;
      narm_agd_arm = context__.vals_i("narm_agd_arm")[(1 - 1)];
      current_statement__ = 379;
      stan::math::check_greater_or_equal(function__, "narm_agd_arm",
        narm_agd_arm, 0);
      current_statement__ = 380;
      stan::math::validate_non_negative_index("agd_arm_trt", "narm_agd_arm",
        narm_agd_arm);
      current_statement__ = 381;
      context__.validate_dims("data initialization", "agd_arm_trt", "int",
        std::vector<size_t>{static_cast<size_t>(narm_agd_arm)});
      agd_arm_trt = std::vector<int>(narm_agd_arm,
                      std::numeric_limits<int>::min());
      current_statement__ = 381;
      agd_arm_trt = context__.vals_i("agd_arm_trt");
      current_statement__ = 381;
      stan::math::check_greater_or_equal(function__, "agd_arm_trt",
        agd_arm_trt, 1);
      current_statement__ = 382;
      stan::math::validate_non_negative_index("agd_contrast_trt",
        "ni_agd_contrast", ni_agd_contrast);
      current_statement__ = 383;
      context__.validate_dims("data initialization", "agd_contrast_trt",
        "int", std::vector<size_t>{static_cast<size_t>(ni_agd_contrast)});
      agd_contrast_trt = std::vector<int>(ni_agd_contrast,
                           std::numeric_limits<int>::min());
      current_statement__ = 383;
      agd_contrast_trt = context__.vals_i("agd_contrast_trt");
      current_statement__ = 383;
      stan::math::check_greater_or_equal(function__, "agd_contrast_trt",
        agd_contrast_trt, 1);
      current_statement__ = 384;
      stan::math::validate_non_negative_index("agd_contrast_trt_b",
        "ni_agd_contrast", ni_agd_contrast);
      current_statement__ = 385;
      context__.validate_dims("data initialization", "agd_contrast_trt_b",
        "int", std::vector<size_t>{static_cast<size_t>(ni_agd_contrast)});
      agd_contrast_trt_b = std::vector<int>(ni_agd_contrast,
                             std::numeric_limits<int>::min());
      current_statement__ = 385;
      agd_contrast_trt_b = context__.vals_i("agd_contrast_trt_b");
      current_statement__ = 385;
      stan::math::check_greater_or_equal(function__, "agd_contrast_trt_b",
        agd_contrast_trt_b, 1);
      current_statement__ = 386;
      context__.validate_dims("data initialization", "nt", "int",
        std::vector<size_t>{});
      nt = std::numeric_limits<int>::min();
      current_statement__ = 386;
      nt = context__.vals_i("nt")[(1 - 1)];
      current_statement__ = 386;
      stan::math::check_greater_or_equal(function__, "nt", nt, 1);
      current_statement__ = 387;
      context__.validate_dims("data initialization", "nX", "int",
        std::vector<size_t>{});
      nX = std::numeric_limits<int>::min();
      current_statement__ = 387;
      nX = context__.vals_i("nX")[(1 - 1)];
      current_statement__ = 387;
      stan::math::check_greater_or_equal(function__, "nX", nX, 0);
      current_statement__ = 388;
      context__.validate_dims("data initialization", "nchains", "int",
        std::vector<size_t>{});
      nchains = std::numeric_limits<int>::min();
      current_statement__ = 388;
      nchains = context__.vals_i("nchains")[(1 - 1)];
      current_statement__ = 388;
      stan::math::check_greater_or_equal(function__, "nchains", nchains, 1);
      current_statement__ = 389;
      context__.validate_dims("data initialization", "CHAIN_ID", "int",
        std::vector<size_t>{});
      CHAIN_ID = std::numeric_limits<int>::min();
      current_statement__ = 389;
      CHAIN_ID = context__.vals_i("CHAIN_ID")[(1 - 1)];
      current_statement__ = 389;
      stan::math::check_greater_or_equal(function__, "CHAIN_ID", CHAIN_ID, 1);
      current_statement__ = 389;
      stan::math::check_less_or_equal(function__, "CHAIN_ID", CHAIN_ID,
        nchains);
      current_statement__ = 390;
      stan::math::validate_non_negative_index("nint_vec", "nchains", nchains);
      current_statement__ = 391;
      context__.validate_dims("data initialization", "nint_vec", "int",
        std::vector<size_t>{static_cast<size_t>(nchains)});
      nint_vec = std::vector<int>(nchains, std::numeric_limits<int>::min());
      current_statement__ = 391;
      nint_vec = context__.vals_i("nint_vec");
      current_statement__ = 391;
      stan::math::check_greater_or_equal(function__, "nint_vec", nint_vec, 1);
      current_statement__ = 392;
      context__.validate_dims("data initialization", "nint_max", "int",
        std::vector<size_t>{});
      nint_max = std::numeric_limits<int>::min();
      current_statement__ = 392;
      nint_max = context__.vals_i("nint_max")[(1 - 1)];
      current_statement__ = 392;
      stan::math::check_greater_or_equal(function__, "nint_max", nint_max, 1);
      current_statement__ = 393;
      context__.validate_dims("data initialization", "int_thin", "int",
        std::vector<size_t>{});
      int_thin = std::numeric_limits<int>::min();
      current_statement__ = 393;
      int_thin = context__.vals_i("int_thin")[(1 - 1)];
      current_statement__ = 393;
      stan::math::check_greater_or_equal(function__, "int_thin", int_thin, 0);
      current_statement__ = 394;
      context__.validate_dims("data initialization", "link", "int",
        std::vector<size_t>{});
      link = std::numeric_limits<int>::min();
      current_statement__ = 394;
      link = context__.vals_i("link")[(1 - 1)];
      current_statement__ = 394;
      stan::math::check_greater_or_equal(function__, "link", link, 1);
      current_statement__ = 395;
      stan::math::validate_non_negative_index("agd_contrast_y",
        "ni_agd_contrast", ni_agd_contrast);
      current_statement__ = 396;
      context__.validate_dims("data initialization", "agd_contrast_y",
        "double", std::vector<size_t>{static_cast<size_t>(ni_agd_contrast)});
      agd_contrast_y_data__ = Eigen::Matrix<double,-1,1>::Constant(ni_agd_contrast,
                                std::numeric_limits<double>::quiet_NaN());
      new (&agd_contrast_y)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(agd_contrast_y_data__.data(),
        ni_agd_contrast);
      {
        std::vector<local_scalar_t__> agd_contrast_y_flat__;
        current_statement__ = 396;
        agd_contrast_y_flat__ = context__.vals_r("agd_contrast_y");
        current_statement__ = 396;
        pos__ = 1;
        current_statement__ = 396;
        for (int sym1__ = 1; sym1__ <= ni_agd_contrast; ++sym1__) {
          current_statement__ = 396;
          stan::model::assign(agd_contrast_y, agd_contrast_y_flat__[(pos__ -
            1)], "assigning variable agd_contrast_y",
            stan::model::index_uni(sym1__));
          current_statement__ = 396;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 397;
      stan::math::validate_non_negative_index("agd_contrast_Sigma",
        "ni_agd_contrast ? ni_agd_contrast : 1",
        (ni_agd_contrast ? ni_agd_contrast : 1));
      current_statement__ = 397;
      stan::math::validate_non_negative_index("agd_contrast_Sigma",
        "ni_agd_contrast ? ni_agd_contrast : 1",
        (ni_agd_contrast ? ni_agd_contrast : 1));
      current_statement__ = 398;
      context__.validate_dims("data initialization", "agd_contrast_Sigma",
        "double",
        std::vector<size_t>{static_cast<size_t>(
                              (ni_agd_contrast ? ni_agd_contrast : 1)),
          static_cast<size_t>((ni_agd_contrast ? ni_agd_contrast : 1))});
      agd_contrast_Sigma_data__ = Eigen::Matrix<double,-1,-1>::Constant((ni_agd_contrast ? ni_agd_contrast : 1),
                                    (ni_agd_contrast ? ni_agd_contrast : 1),
                                    std::numeric_limits<double>::quiet_NaN());
      new (&agd_contrast_Sigma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(agd_contrast_Sigma_data__.data(),
        (ni_agd_contrast ? ni_agd_contrast : 1),
        (ni_agd_contrast ? ni_agd_contrast : 1));
      {
        std::vector<local_scalar_t__> agd_contrast_Sigma_flat__;
        current_statement__ = 398;
        agd_contrast_Sigma_flat__ = context__.vals_r("agd_contrast_Sigma");
        current_statement__ = 398;
        pos__ = 1;
        current_statement__ = 398;
        for (int sym1__ = 1; sym1__ <=
             (ni_agd_contrast ? ni_agd_contrast : 1); ++sym1__) {
          current_statement__ = 398;
          for (int sym2__ = 1; sym2__ <=
               (ni_agd_contrast ? ni_agd_contrast : 1); ++sym2__) {
            current_statement__ = 398;
            stan::model::assign(agd_contrast_Sigma,
              agd_contrast_Sigma_flat__[(pos__ - 1)],
              "assigning variable agd_contrast_Sigma",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 398;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 398;
      stan::math::check_cov_matrix(function__, "agd_contrast_Sigma",
        agd_contrast_Sigma);
      current_statement__ = 399;
      context__.validate_dims("data initialization", "QR", "int",
        std::vector<size_t>{});
      QR = std::numeric_limits<int>::min();
      current_statement__ = 399;
      QR = context__.vals_i("QR")[(1 - 1)];
      current_statement__ = 399;
      stan::math::check_greater_or_equal(function__, "QR", QR, 0);
      current_statement__ = 399;
      stan::math::check_less_or_equal(function__, "QR", QR, 1);
      current_statement__ = 400;
      stan::math::validate_non_negative_index("X",
        "ni_ipd + nint_max * (ni_agd_arm + ni_agd_contrast)", (ni_ipd +
        (nint_max * (ni_agd_arm + ni_agd_contrast))));
      current_statement__ = 401;
      stan::math::validate_non_negative_index("X", "nX", nX);
      current_statement__ = 402;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>((ni_ipd + (nint_max *
                              (ni_agd_arm + ni_agd_contrast)))),
          static_cast<size_t>(nX)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant((ni_ipd + (nint_max *
                   (ni_agd_arm + ni_agd_contrast))), nX,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(),
        (ni_ipd + (nint_max * (ni_agd_arm + ni_agd_contrast))), nX);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 402;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 402;
        pos__ = 1;
        current_statement__ = 402;
        for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
          current_statement__ = 402;
          for (int sym2__ = 1; sym2__ <= (ni_ipd + (nint_max * (ni_agd_arm +
               ni_agd_contrast))); ++sym2__) {
            current_statement__ = 402;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 402;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 403;
      stan::math::validate_non_negative_index("R_inv", "QR ? nX : 0",
        (QR ? nX : 0));
      current_statement__ = 404;
      stan::math::validate_non_negative_index("R_inv", "QR ? nX : 0",
        (QR ? nX : 0));
      current_statement__ = 405;
      context__.validate_dims("data initialization", "R_inv", "double",
        std::vector<size_t>{static_cast<size_t>((QR ? nX : 0)),
          static_cast<size_t>((QR ? nX : 0))});
      R_inv_data__ = Eigen::Matrix<double,-1,-1>::Constant((QR ? nX : 0),
                       (QR ? nX : 0),
                       std::numeric_limits<double>::quiet_NaN());
      new (&R_inv)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(R_inv_data__.data(),
        (QR ? nX : 0), (QR ? nX : 0));
      {
        std::vector<local_scalar_t__> R_inv_flat__;
        current_statement__ = 405;
        R_inv_flat__ = context__.vals_r("R_inv");
        current_statement__ = 405;
        pos__ = 1;
        current_statement__ = 405;
        for (int sym1__ = 1; sym1__ <= (QR ? nX : 0); ++sym1__) {
          current_statement__ = 405;
          for (int sym2__ = 1; sym2__ <= (QR ? nX : 0); ++sym2__) {
            current_statement__ = 405;
            stan::model::assign(R_inv, R_inv_flat__[(pos__ - 1)],
              "assigning variable R_inv", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 405;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 406;
      context__.validate_dims("data initialization", "has_offset", "int",
        std::vector<size_t>{});
      has_offset = std::numeric_limits<int>::min();
      current_statement__ = 406;
      has_offset = context__.vals_i("has_offset")[(1 - 1)];
      current_statement__ = 406;
      stan::math::check_greater_or_equal(function__, "has_offset",
        has_offset, 0);
      current_statement__ = 406;
      stan::math::check_less_or_equal(function__, "has_offset", has_offset, 1);
      current_statement__ = 407;
      stan::math::validate_non_negative_index("offsets",
        "has_offset ? ni_ipd + nint_max * (ni_agd_arm + ni_agd_contrast) : 0",
        (has_offset ? (ni_ipd + (nint_max * (ni_agd_arm +
        ni_agd_contrast))) : 0));
      current_statement__ = 408;
      context__.validate_dims("data initialization", "offsets", "double",
        std::vector<size_t>{static_cast<size_t>((has_offset ? (ni_ipd +
                              (nint_max * (ni_agd_arm +
                              ni_agd_contrast))) : 0))});
      offsets_data__ = Eigen::Matrix<double,-1,1>::Constant((has_offset ? (ni_ipd
                         + (nint_max * (ni_agd_arm + ni_agd_contrast))) : 0),
                         std::numeric_limits<double>::quiet_NaN());
      new (&offsets)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(offsets_data__.data(),
        (has_offset ? (ni_ipd + (nint_max * (ni_agd_arm +
        ni_agd_contrast))) : 0));
      {
        std::vector<local_scalar_t__> offsets_flat__;
        current_statement__ = 408;
        offsets_flat__ = context__.vals_r("offsets");
        current_statement__ = 408;
        pos__ = 1;
        current_statement__ = 408;
        for (int sym1__ = 1; sym1__ <= (has_offset ? (ni_ipd + (nint_max *
             (ni_agd_arm + ni_agd_contrast))) : 0); ++sym1__) {
          current_statement__ = 408;
          stan::model::assign(offsets, offsets_flat__[(pos__ - 1)],
            "assigning variable offsets", stan::model::index_uni(sym1__));
          current_statement__ = 408;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 409;
      context__.validate_dims("data initialization", "RE", "int",
        std::vector<size_t>{});
      RE = std::numeric_limits<int>::min();
      current_statement__ = 409;
      RE = context__.vals_i("RE")[(1 - 1)];
      current_statement__ = 409;
      stan::math::check_greater_or_equal(function__, "RE", RE, 0);
      current_statement__ = 409;
      stan::math::check_less_or_equal(function__, "RE", RE, 1);
      current_statement__ = 410;
      stan::math::validate_non_negative_index("which_RE",
        "RE ? narm_ipd + narm_agd_arm + ni_agd_contrast : 0",
        (RE ? ((narm_ipd + narm_agd_arm) + ni_agd_contrast) : 0));
      current_statement__ = 411;
      context__.validate_dims("data initialization", "which_RE", "int",
        std::vector<size_t>{static_cast<size_t>((RE ? ((narm_ipd +
                              narm_agd_arm) + ni_agd_contrast) : 0))});
      which_RE = std::vector<int>((RE ? ((narm_ipd + narm_agd_arm) +
                   ni_agd_contrast) : 0), std::numeric_limits<int>::min());
      current_statement__ = 411;
      which_RE = context__.vals_i("which_RE");
      current_statement__ = 411;
      stan::math::check_greater_or_equal(function__, "which_RE", which_RE, 0);
      current_statement__ = 412;
      stan::math::validate_non_negative_index("RE_cor",
        "RE ? max(which_RE) : 1", (RE ? stan::math::max(which_RE) : 1));
      current_statement__ = 412;
      stan::math::validate_non_negative_index("RE_cor",
        "RE ? max(which_RE) : 1", (RE ? stan::math::max(which_RE) : 1));
      current_statement__ = 413;
      context__.validate_dims("data initialization", "RE_cor", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (RE ? stan::math::max(which_RE) : 1)),
          static_cast<size_t>((RE ? stan::math::max(which_RE) : 1))});
      RE_cor_data__ = Eigen::Matrix<double,-1,-1>::Constant((RE ? stan::math::max(
                                                                    which_RE) : 1),
                        (RE ? stan::math::max(which_RE) : 1),
                        std::numeric_limits<double>::quiet_NaN());
      new (&RE_cor)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(RE_cor_data__.data(),
        (RE ? stan::math::max(which_RE) : 1),
        (RE ? stan::math::max(which_RE) : 1));
      {
        std::vector<local_scalar_t__> RE_cor_flat__;
        current_statement__ = 413;
        RE_cor_flat__ = context__.vals_r("RE_cor");
        current_statement__ = 413;
        pos__ = 1;
        current_statement__ = 413;
        for (int sym1__ = 1; sym1__ <=
             (RE ? stan::math::max(which_RE) : 1); ++sym1__) {
          current_statement__ = 413;
          for (int sym2__ = 1; sym2__ <=
               (RE ? stan::math::max(which_RE) : 1); ++sym2__) {
            current_statement__ = 413;
            stan::model::assign(RE_cor, RE_cor_flat__[(pos__ - 1)],
              "assigning variable RE_cor", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 413;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 413;
      stan::math::check_corr_matrix(function__, "RE_cor", RE_cor);
      current_statement__ = 414;
      context__.validate_dims("data initialization", "nodesplit", "int",
        std::vector<size_t>{});
      nodesplit = std::numeric_limits<int>::min();
      current_statement__ = 414;
      nodesplit = context__.vals_i("nodesplit")[(1 - 1)];
      current_statement__ = 414;
      stan::math::check_greater_or_equal(function__, "nodesplit", nodesplit,
        0);
      current_statement__ = 414;
      stan::math::check_less_or_equal(function__, "nodesplit", nodesplit, 1);
      current_statement__ = 415;
      context__.validate_dims("data initialization", "prior_intercept_dist",
        "int", std::vector<size_t>{});
      prior_intercept_dist = std::numeric_limits<int>::min();
      current_statement__ = 415;
      prior_intercept_dist = context__.vals_i("prior_intercept_dist")[(1 -
        1)];
      current_statement__ = 415;
      stan::math::check_greater_or_equal(function__, "prior_intercept_dist",
        prior_intercept_dist, 0);
      current_statement__ = 415;
      stan::math::check_less_or_equal(function__, "prior_intercept_dist",
        prior_intercept_dist, 3);
      current_statement__ = 416;
      context__.validate_dims("data initialization",
        "prior_intercept_location", "double", std::vector<size_t>{});
      prior_intercept_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 416;
      prior_intercept_location = context__.vals_r("prior_intercept_location")[(1
        - 1)];
      current_statement__ = 417;
      context__.validate_dims("data initialization", "prior_intercept_scale",
        "double", std::vector<size_t>{});
      prior_intercept_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 417;
      prior_intercept_scale = context__.vals_r("prior_intercept_scale")[(1 -
        1)];
      current_statement__ = 417;
      stan::math::check_greater_or_equal(function__, "prior_intercept_scale",
        prior_intercept_scale, 0);
      current_statement__ = 418;
      context__.validate_dims("data initialization", "prior_intercept_df",
        "double", std::vector<size_t>{});
      prior_intercept_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 418;
      prior_intercept_df = context__.vals_r("prior_intercept_df")[(1 - 1)];
      current_statement__ = 418;
      stan::math::check_greater_or_equal(function__, "prior_intercept_df",
        prior_intercept_df, 0);
      current_statement__ = 419;
      context__.validate_dims("data initialization", "prior_trt_dist", "int",
        std::vector<size_t>{});
      prior_trt_dist = std::numeric_limits<int>::min();
      current_statement__ = 419;
      prior_trt_dist = context__.vals_i("prior_trt_dist")[(1 - 1)];
      current_statement__ = 419;
      stan::math::check_greater_or_equal(function__, "prior_trt_dist",
        prior_trt_dist, 0);
      current_statement__ = 419;
      stan::math::check_less_or_equal(function__, "prior_trt_dist",
        prior_trt_dist, 3);
      current_statement__ = 420;
      context__.validate_dims("data initialization", "prior_trt_location",
        "double", std::vector<size_t>{});
      prior_trt_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 420;
      prior_trt_location = context__.vals_r("prior_trt_location")[(1 - 1)];
      current_statement__ = 421;
      context__.validate_dims("data initialization", "prior_trt_scale",
        "double", std::vector<size_t>{});
      prior_trt_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 421;
      prior_trt_scale = context__.vals_r("prior_trt_scale")[(1 - 1)];
      current_statement__ = 421;
      stan::math::check_greater_or_equal(function__, "prior_trt_scale",
        prior_trt_scale, 0);
      current_statement__ = 422;
      context__.validate_dims("data initialization", "prior_trt_df",
        "double", std::vector<size_t>{});
      prior_trt_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 422;
      prior_trt_df = context__.vals_r("prior_trt_df")[(1 - 1)];
      current_statement__ = 422;
      stan::math::check_greater_or_equal(function__, "prior_trt_df",
        prior_trt_df, 0);
      current_statement__ = 423;
      context__.validate_dims("data initialization", "prior_het_dist", "int",
        std::vector<size_t>{});
      prior_het_dist = std::numeric_limits<int>::min();
      current_statement__ = 423;
      prior_het_dist = context__.vals_i("prior_het_dist")[(1 - 1)];
      current_statement__ = 423;
      stan::math::check_greater_or_equal(function__, "prior_het_dist",
        prior_het_dist, 0);
      current_statement__ = 423;
      stan::math::check_less_or_equal(function__, "prior_het_dist",
        prior_het_dist, 6);
      current_statement__ = 424;
      context__.validate_dims("data initialization", "prior_het_type", "int",
        std::vector<size_t>{});
      prior_het_type = std::numeric_limits<int>::min();
      current_statement__ = 424;
      prior_het_type = context__.vals_i("prior_het_type")[(1 - 1)];
      current_statement__ = 424;
      stan::math::check_greater_or_equal(function__, "prior_het_type",
        prior_het_type, 1);
      current_statement__ = 424;
      stan::math::check_less_or_equal(function__, "prior_het_type",
        prior_het_type, 3);
      current_statement__ = 425;
      context__.validate_dims("data initialization", "prior_het_location",
        "double", std::vector<size_t>{});
      prior_het_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 425;
      prior_het_location = context__.vals_r("prior_het_location")[(1 - 1)];
      current_statement__ = 426;
      context__.validate_dims("data initialization", "prior_het_scale",
        "double", std::vector<size_t>{});
      prior_het_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 426;
      prior_het_scale = context__.vals_r("prior_het_scale")[(1 - 1)];
      current_statement__ = 426;
      stan::math::check_greater_or_equal(function__, "prior_het_scale",
        prior_het_scale, 0);
      current_statement__ = 427;
      context__.validate_dims("data initialization", "prior_het_df",
        "double", std::vector<size_t>{});
      prior_het_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 427;
      prior_het_df = context__.vals_r("prior_het_df")[(1 - 1)];
      current_statement__ = 427;
      stan::math::check_greater_or_equal(function__, "prior_het_df",
        prior_het_df, 0);
      current_statement__ = 428;
      context__.validate_dims("data initialization", "prior_reg_dist", "int",
        std::vector<size_t>{});
      prior_reg_dist = std::numeric_limits<int>::min();
      current_statement__ = 428;
      prior_reg_dist = context__.vals_i("prior_reg_dist")[(1 - 1)];
      current_statement__ = 428;
      stan::math::check_greater_or_equal(function__, "prior_reg_dist",
        prior_reg_dist, 0);
      current_statement__ = 428;
      stan::math::check_less_or_equal(function__, "prior_reg_dist",
        prior_reg_dist, 3);
      current_statement__ = 429;
      context__.validate_dims("data initialization", "prior_reg_location",
        "double", std::vector<size_t>{});
      prior_reg_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 429;
      prior_reg_location = context__.vals_r("prior_reg_location")[(1 - 1)];
      current_statement__ = 430;
      context__.validate_dims("data initialization", "prior_reg_scale",
        "double", std::vector<size_t>{});
      prior_reg_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 430;
      prior_reg_scale = context__.vals_r("prior_reg_scale")[(1 - 1)];
      current_statement__ = 430;
      stan::math::check_greater_or_equal(function__, "prior_reg_scale",
        prior_reg_scale, 0);
      current_statement__ = 431;
      context__.validate_dims("data initialization", "prior_reg_df",
        "double", std::vector<size_t>{});
      prior_reg_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 431;
      prior_reg_df = context__.vals_r("prior_reg_df")[(1 - 1)];
      current_statement__ = 431;
      stan::math::check_greater_or_equal(function__, "prior_reg_df",
        prior_reg_df, 0);
      current_statement__ = 432;
      context__.validate_dims("data initialization", "class_effects", "int",
        std::vector<size_t>{});
      class_effects = std::numeric_limits<int>::min();
      current_statement__ = 432;
      class_effects = context__.vals_i("class_effects")[(1 - 1)];
      current_statement__ = 432;
      stan::math::check_greater_or_equal(function__, "class_effects",
        class_effects, 0);
      current_statement__ = 432;
      stan::math::check_less_or_equal(function__, "class_effects",
        class_effects, 1);
      current_statement__ = 433;
      stan::math::validate_non_negative_index("which_CE",
        "class_effects ? nt - 1 : 0", (class_effects ? (nt - 1) : 0));
      current_statement__ = 434;
      context__.validate_dims("data initialization", "which_CE", "int",
        std::vector<size_t>{static_cast<size_t>((class_effects ? (nt -
                              1) : 0))});
      which_CE = std::vector<int>((class_effects ? (nt - 1) : 0),
                   std::numeric_limits<int>::min());
      current_statement__ = 434;
      which_CE = context__.vals_i("which_CE");
      current_statement__ = 434;
      stan::math::check_greater_or_equal(function__, "which_CE", which_CE, 0);
      current_statement__ = 435;
      stan::math::validate_non_negative_index("which_CE_sd",
        "class_effects ? nt - 1 : 0", (class_effects ? (nt - 1) : 0));
      current_statement__ = 436;
      context__.validate_dims("data initialization", "which_CE_sd", "int",
        std::vector<size_t>{static_cast<size_t>((class_effects ? (nt -
                              1) : 0))});
      which_CE_sd = std::vector<int>((class_effects ? (nt - 1) : 0),
                      std::numeric_limits<int>::min());
      current_statement__ = 436;
      which_CE_sd = context__.vals_i("which_CE_sd");
      current_statement__ = 436;
      stan::math::check_greater_or_equal(function__, "which_CE_sd",
        which_CE_sd, 0);
      current_statement__ = 437;
      context__.validate_dims("data initialization", "prior_class_mean_dist",
        "int", std::vector<size_t>{});
      prior_class_mean_dist = std::numeric_limits<int>::min();
      current_statement__ = 437;
      prior_class_mean_dist = context__.vals_i("prior_class_mean_dist")[(1 -
        1)];
      current_statement__ = 437;
      stan::math::check_greater_or_equal(function__, "prior_class_mean_dist",
        prior_class_mean_dist, 0);
      current_statement__ = 437;
      stan::math::check_less_or_equal(function__, "prior_class_mean_dist",
        prior_class_mean_dist, 3);
      current_statement__ = 438;
      context__.validate_dims("data initialization",
        "prior_class_mean_location", "double", std::vector<size_t>{});
      prior_class_mean_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 438;
      prior_class_mean_location = context__.vals_r("prior_class_mean_location")[(1
        - 1)];
      current_statement__ = 439;
      context__.validate_dims("data initialization",
        "prior_class_mean_scale", "double", std::vector<size_t>{});
      prior_class_mean_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 439;
      prior_class_mean_scale = context__.vals_r("prior_class_mean_scale")[(1
        - 1)];
      current_statement__ = 439;
      stan::math::check_greater_or_equal(function__,
        "prior_class_mean_scale", prior_class_mean_scale, 0);
      current_statement__ = 440;
      context__.validate_dims("data initialization", "prior_class_mean_df",
        "double", std::vector<size_t>{});
      prior_class_mean_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 440;
      prior_class_mean_df = context__.vals_r("prior_class_mean_df")[(1 - 1)];
      current_statement__ = 440;
      stan::math::check_greater_or_equal(function__, "prior_class_mean_df",
        prior_class_mean_df, 0);
      current_statement__ = 441;
      context__.validate_dims("data initialization", "prior_class_sd_dist",
        "int", std::vector<size_t>{});
      prior_class_sd_dist = std::numeric_limits<int>::min();
      current_statement__ = 441;
      prior_class_sd_dist = context__.vals_i("prior_class_sd_dist")[(1 - 1)];
      current_statement__ = 441;
      stan::math::check_greater_or_equal(function__, "prior_class_sd_dist",
        prior_class_sd_dist, 0);
      current_statement__ = 441;
      stan::math::check_less_or_equal(function__, "prior_class_sd_dist",
        prior_class_sd_dist, 6);
      current_statement__ = 442;
      context__.validate_dims("data initialization",
        "prior_class_sd_location", "double", std::vector<size_t>{});
      prior_class_sd_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 442;
      prior_class_sd_location = context__.vals_r("prior_class_sd_location")[(1
        - 1)];
      current_statement__ = 443;
      context__.validate_dims("data initialization", "prior_class_sd_scale",
        "double", std::vector<size_t>{});
      prior_class_sd_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 443;
      prior_class_sd_scale = context__.vals_r("prior_class_sd_scale")[(1 -
        1)];
      current_statement__ = 443;
      stan::math::check_greater_or_equal(function__, "prior_class_sd_scale",
        prior_class_sd_scale, 0);
      current_statement__ = 444;
      context__.validate_dims("data initialization", "prior_class_sd_df",
        "double", std::vector<size_t>{});
      prior_class_sd_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 444;
      prior_class_sd_df = context__.vals_r("prior_class_sd_df")[(1 - 1)];
      current_statement__ = 444;
      stan::math::check_greater_or_equal(function__, "prior_class_sd_df",
        prior_class_sd_df, 0);
      current_statement__ = 445;
      context__.validate_dims("data initialization", "n_scoef", "int",
        std::vector<size_t>{});
      n_scoef = std::numeric_limits<int>::min();
      current_statement__ = 445;
      n_scoef = context__.vals_i("n_scoef")[(1 - 1)];
      current_statement__ = 445;
      stan::math::check_greater_or_equal(function__, "n_scoef", n_scoef, 2);
      current_statement__ = 446;
      stan::math::validate_non_negative_index("agd_arm_arm", "ni_agd_arm",
        ni_agd_arm);
      current_statement__ = 447;
      context__.validate_dims("data initialization", "agd_arm_arm", "int",
        std::vector<size_t>{static_cast<size_t>(ni_agd_arm)});
      agd_arm_arm = std::vector<int>(ni_agd_arm,
                      std::numeric_limits<int>::min());
      current_statement__ = 447;
      agd_arm_arm = context__.vals_i("agd_arm_arm");
      current_statement__ = 447;
      stan::math::check_greater_or_equal(function__, "agd_arm_arm",
        agd_arm_arm, 1);
      current_statement__ = 448;
      stan::math::validate_non_negative_index("ipd_time", "ni_ipd", ni_ipd);
      current_statement__ = 449;
      stan::math::validate_non_negative_index("ipd_time", "n_scoef", n_scoef);
      current_statement__ = 450;
      context__.validate_dims("data initialization", "ipd_time", "double",
        std::vector<size_t>{static_cast<size_t>(ni_ipd),
          static_cast<size_t>(n_scoef)});
      ipd_time_data__ = Eigen::Matrix<double,-1,-1>::Constant(ni_ipd,
                          n_scoef, std::numeric_limits<double>::quiet_NaN());
      new (&ipd_time)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(ipd_time_data__.data(),
        ni_ipd, n_scoef);
      {
        std::vector<local_scalar_t__> ipd_time_flat__;
        current_statement__ = 450;
        ipd_time_flat__ = context__.vals_r("ipd_time");
        current_statement__ = 450;
        pos__ = 1;
        current_statement__ = 450;
        for (int sym1__ = 1; sym1__ <= n_scoef; ++sym1__) {
          current_statement__ = 450;
          for (int sym2__ = 1; sym2__ <= ni_ipd; ++sym2__) {
            current_statement__ = 450;
            stan::model::assign(ipd_time, ipd_time_flat__[(pos__ - 1)],
              "assigning variable ipd_time", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 450;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 451;
      stan::math::validate_non_negative_index("ipd_itime", "ni_ipd", ni_ipd);
      current_statement__ = 452;
      stan::math::validate_non_negative_index("ipd_itime", "n_scoef", n_scoef);
      current_statement__ = 453;
      context__.validate_dims("data initialization", "ipd_itime", "double",
        std::vector<size_t>{static_cast<size_t>(ni_ipd),
          static_cast<size_t>(n_scoef)});
      ipd_itime_data__ = Eigen::Matrix<double,-1,-1>::Constant(ni_ipd,
                           n_scoef, std::numeric_limits<double>::quiet_NaN());
      new (&ipd_itime)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(ipd_itime_data__.data(),
        ni_ipd, n_scoef);
      {
        std::vector<local_scalar_t__> ipd_itime_flat__;
        current_statement__ = 453;
        ipd_itime_flat__ = context__.vals_r("ipd_itime");
        current_statement__ = 453;
        pos__ = 1;
        current_statement__ = 453;
        for (int sym1__ = 1; sym1__ <= n_scoef; ++sym1__) {
          current_statement__ = 453;
          for (int sym2__ = 1; sym2__ <= ni_ipd; ++sym2__) {
            current_statement__ = 453;
            stan::model::assign(ipd_itime, ipd_itime_flat__[(pos__ - 1)],
              "assigning variable ipd_itime", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 453;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 454;
      stan::math::validate_non_negative_index("ipd_start_itime", "ni_ipd",
        ni_ipd);
      current_statement__ = 455;
      stan::math::validate_non_negative_index("ipd_start_itime", "n_scoef",
        n_scoef);
      current_statement__ = 456;
      context__.validate_dims("data initialization", "ipd_start_itime",
        "double",
        std::vector<size_t>{static_cast<size_t>(ni_ipd),
          static_cast<size_t>(n_scoef)});
      ipd_start_itime_data__ = Eigen::Matrix<double,-1,-1>::Constant(ni_ipd,
                                 n_scoef,
                                 std::numeric_limits<double>::quiet_NaN());
      new (&ipd_start_itime)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(ipd_start_itime_data__.data(),
        ni_ipd, n_scoef);
      {
        std::vector<local_scalar_t__> ipd_start_itime_flat__;
        current_statement__ = 456;
        ipd_start_itime_flat__ = context__.vals_r("ipd_start_itime");
        current_statement__ = 456;
        pos__ = 1;
        current_statement__ = 456;
        for (int sym1__ = 1; sym1__ <= n_scoef; ++sym1__) {
          current_statement__ = 456;
          for (int sym2__ = 1; sym2__ <= ni_ipd; ++sym2__) {
            current_statement__ = 456;
            stan::model::assign(ipd_start_itime,
              ipd_start_itime_flat__[(pos__ - 1)],
              "assigning variable ipd_start_itime",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 456;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 457;
      stan::math::validate_non_negative_index("ipd_delay_itime", "ni_ipd",
        ni_ipd);
      current_statement__ = 458;
      stan::math::validate_non_negative_index("ipd_delay_itime", "n_scoef",
        n_scoef);
      current_statement__ = 459;
      context__.validate_dims("data initialization", "ipd_delay_itime",
        "double",
        std::vector<size_t>{static_cast<size_t>(ni_ipd),
          static_cast<size_t>(n_scoef)});
      ipd_delay_itime_data__ = Eigen::Matrix<double,-1,-1>::Constant(ni_ipd,
                                 n_scoef,
                                 std::numeric_limits<double>::quiet_NaN());
      new (&ipd_delay_itime)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(ipd_delay_itime_data__.data(),
        ni_ipd, n_scoef);
      {
        std::vector<local_scalar_t__> ipd_delay_itime_flat__;
        current_statement__ = 459;
        ipd_delay_itime_flat__ = context__.vals_r("ipd_delay_itime");
        current_statement__ = 459;
        pos__ = 1;
        current_statement__ = 459;
        for (int sym1__ = 1; sym1__ <= n_scoef; ++sym1__) {
          current_statement__ = 459;
          for (int sym2__ = 1; sym2__ <= ni_ipd; ++sym2__) {
            current_statement__ = 459;
            stan::model::assign(ipd_delay_itime,
              ipd_delay_itime_flat__[(pos__ - 1)],
              "assigning variable ipd_delay_itime",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 459;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 460;
      stan::math::validate_non_negative_index("ipd_delayed", "ni_ipd", ni_ipd);
      current_statement__ = 461;
      context__.validate_dims("data initialization", "ipd_delayed", "int",
        std::vector<size_t>{static_cast<size_t>(ni_ipd)});
      ipd_delayed = std::vector<int>(ni_ipd, std::numeric_limits<int>::min());
      current_statement__ = 461;
      ipd_delayed = context__.vals_i("ipd_delayed");
      current_statement__ = 461;
      stan::math::check_greater_or_equal(function__, "ipd_delayed",
        ipd_delayed, 0);
      current_statement__ = 461;
      stan::math::check_less_or_equal(function__, "ipd_delayed", ipd_delayed,
        1);
      current_statement__ = 462;
      stan::math::validate_non_negative_index("ipd_status", "ni_ipd", ni_ipd);
      current_statement__ = 463;
      context__.validate_dims("data initialization", "ipd_status", "int",
        std::vector<size_t>{static_cast<size_t>(ni_ipd)});
      ipd_status = std::vector<int>(ni_ipd, std::numeric_limits<int>::min());
      current_statement__ = 463;
      ipd_status = context__.vals_i("ipd_status");
      current_statement__ = 463;
      stan::math::check_greater_or_equal(function__, "ipd_status",
        ipd_status, 0);
      current_statement__ = 463;
      stan::math::check_less_or_equal(function__, "ipd_status", ipd_status, 3);
      current_statement__ = 464;
      stan::math::validate_non_negative_index("agd_arm_time", "ni_agd_arm",
        ni_agd_arm);
      current_statement__ = 465;
      stan::math::validate_non_negative_index("agd_arm_time", "n_scoef",
        n_scoef);
      current_statement__ = 466;
      context__.validate_dims("data initialization", "agd_arm_time",
        "double",
        std::vector<size_t>{static_cast<size_t>(ni_agd_arm),
          static_cast<size_t>(n_scoef)});
      agd_arm_time_data__ = Eigen::Matrix<double,-1,-1>::Constant(ni_agd_arm,
                              n_scoef,
                              std::numeric_limits<double>::quiet_NaN());
      new (&agd_arm_time)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(agd_arm_time_data__.data(),
        ni_agd_arm, n_scoef);
      {
        std::vector<local_scalar_t__> agd_arm_time_flat__;
        current_statement__ = 466;
        agd_arm_time_flat__ = context__.vals_r("agd_arm_time");
        current_statement__ = 466;
        pos__ = 1;
        current_statement__ = 466;
        for (int sym1__ = 1; sym1__ <= n_scoef; ++sym1__) {
          current_statement__ = 466;
          for (int sym2__ = 1; sym2__ <= ni_agd_arm; ++sym2__) {
            current_statement__ = 466;
            stan::model::assign(agd_arm_time, agd_arm_time_flat__[(pos__ -
              1)], "assigning variable agd_arm_time",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 466;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 467;
      stan::math::validate_non_negative_index("agd_arm_itime", "ni_agd_arm",
        ni_agd_arm);
      current_statement__ = 468;
      stan::math::validate_non_negative_index("agd_arm_itime", "n_scoef",
        n_scoef);
      current_statement__ = 469;
      context__.validate_dims("data initialization", "agd_arm_itime",
        "double",
        std::vector<size_t>{static_cast<size_t>(ni_agd_arm),
          static_cast<size_t>(n_scoef)});
      agd_arm_itime_data__ = Eigen::Matrix<double,-1,-1>::Constant(ni_agd_arm,
                               n_scoef,
                               std::numeric_limits<double>::quiet_NaN());
      new (&agd_arm_itime)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(agd_arm_itime_data__.data(),
        ni_agd_arm, n_scoef);
      {
        std::vector<local_scalar_t__> agd_arm_itime_flat__;
        current_statement__ = 469;
        agd_arm_itime_flat__ = context__.vals_r("agd_arm_itime");
        current_statement__ = 469;
        pos__ = 1;
        current_statement__ = 469;
        for (int sym1__ = 1; sym1__ <= n_scoef; ++sym1__) {
          current_statement__ = 469;
          for (int sym2__ = 1; sym2__ <= ni_agd_arm; ++sym2__) {
            current_statement__ = 469;
            stan::model::assign(agd_arm_itime, agd_arm_itime_flat__[(pos__ -
              1)], "assigning variable agd_arm_itime",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 469;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 470;
      stan::math::validate_non_negative_index("agd_arm_start_itime",
        "ni_agd_arm", ni_agd_arm);
      current_statement__ = 471;
      stan::math::validate_non_negative_index("agd_arm_start_itime",
        "n_scoef", n_scoef);
      current_statement__ = 472;
      context__.validate_dims("data initialization", "agd_arm_start_itime",
        "double",
        std::vector<size_t>{static_cast<size_t>(ni_agd_arm),
          static_cast<size_t>(n_scoef)});
      agd_arm_start_itime_data__ = Eigen::Matrix<double,-1,-1>::Constant(ni_agd_arm,
                                     n_scoef,
                                     std::numeric_limits<double>::quiet_NaN());
      new (&agd_arm_start_itime)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(agd_arm_start_itime_data__.data(),
        ni_agd_arm, n_scoef);
      {
        std::vector<local_scalar_t__> agd_arm_start_itime_flat__;
        current_statement__ = 472;
        agd_arm_start_itime_flat__ = context__.vals_r("agd_arm_start_itime");
        current_statement__ = 472;
        pos__ = 1;
        current_statement__ = 472;
        for (int sym1__ = 1; sym1__ <= n_scoef; ++sym1__) {
          current_statement__ = 472;
          for (int sym2__ = 1; sym2__ <= ni_agd_arm; ++sym2__) {
            current_statement__ = 472;
            stan::model::assign(agd_arm_start_itime,
              agd_arm_start_itime_flat__[(pos__ - 1)],
              "assigning variable agd_arm_start_itime",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 472;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 473;
      stan::math::validate_non_negative_index("agd_arm_delay_itime",
        "ni_agd_arm", ni_agd_arm);
      current_statement__ = 474;
      stan::math::validate_non_negative_index("agd_arm_delay_itime",
        "n_scoef", n_scoef);
      current_statement__ = 475;
      context__.validate_dims("data initialization", "agd_arm_delay_itime",
        "double",
        std::vector<size_t>{static_cast<size_t>(ni_agd_arm),
          static_cast<size_t>(n_scoef)});
      agd_arm_delay_itime_data__ = Eigen::Matrix<double,-1,-1>::Constant(ni_agd_arm,
                                     n_scoef,
                                     std::numeric_limits<double>::quiet_NaN());
      new (&agd_arm_delay_itime)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(agd_arm_delay_itime_data__.data(),
        ni_agd_arm, n_scoef);
      {
        std::vector<local_scalar_t__> agd_arm_delay_itime_flat__;
        current_statement__ = 475;
        agd_arm_delay_itime_flat__ = context__.vals_r("agd_arm_delay_itime");
        current_statement__ = 475;
        pos__ = 1;
        current_statement__ = 475;
        for (int sym1__ = 1; sym1__ <= n_scoef; ++sym1__) {
          current_statement__ = 475;
          for (int sym2__ = 1; sym2__ <= ni_agd_arm; ++sym2__) {
            current_statement__ = 475;
            stan::model::assign(agd_arm_delay_itime,
              agd_arm_delay_itime_flat__[(pos__ - 1)],
              "assigning variable agd_arm_delay_itime",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 475;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 476;
      stan::math::validate_non_negative_index("agd_arm_delayed",
        "ni_agd_arm", ni_agd_arm);
      current_statement__ = 477;
      context__.validate_dims("data initialization", "agd_arm_delayed",
        "int", std::vector<size_t>{static_cast<size_t>(ni_agd_arm)});
      agd_arm_delayed = std::vector<int>(ni_agd_arm,
                          std::numeric_limits<int>::min());
      current_statement__ = 477;
      agd_arm_delayed = context__.vals_i("agd_arm_delayed");
      current_statement__ = 477;
      stan::math::check_greater_or_equal(function__, "agd_arm_delayed",
        agd_arm_delayed, 0);
      current_statement__ = 477;
      stan::math::check_less_or_equal(function__, "agd_arm_delayed",
        agd_arm_delayed, 1);
      current_statement__ = 478;
      stan::math::validate_non_negative_index("agd_arm_status", "ni_agd_arm",
        ni_agd_arm);
      current_statement__ = 479;
      context__.validate_dims("data initialization", "agd_arm_status", "int",
        std::vector<size_t>{static_cast<size_t>(ni_agd_arm)});
      agd_arm_status = std::vector<int>(ni_agd_arm,
                         std::numeric_limits<int>::min());
      current_statement__ = 479;
      agd_arm_status = context__.vals_i("agd_arm_status");
      current_statement__ = 479;
      stan::math::check_greater_or_equal(function__, "agd_arm_status",
        agd_arm_status, 0);
      current_statement__ = 479;
      stan::math::check_less_or_equal(function__, "agd_arm_status",
        agd_arm_status, 3);
      current_statement__ = 480;
      context__.validate_dims("data initialization", "aux_int", "int",
        std::vector<size_t>{});
      aux_int = std::numeric_limits<int>::min();
      current_statement__ = 480;
      aux_int = context__.vals_i("aux_int")[(1 - 1)];
      current_statement__ = 480;
      stan::math::check_greater_or_equal(function__, "aux_int", aux_int, 0);
      current_statement__ = 480;
      stan::math::check_less_or_equal(function__, "aux_int", aux_int, 1);
      current_statement__ = 481;
      stan::math::validate_non_negative_index("aux_id",
        "ni_ipd + ni_agd_arm * (aux_int ? nint_max : 1)", (ni_ipd +
        (ni_agd_arm * (aux_int ? nint_max : 1))));
      current_statement__ = 482;
      context__.validate_dims("data initialization", "aux_id", "int",
        std::vector<size_t>{static_cast<size_t>((ni_ipd + (ni_agd_arm *
                              (aux_int ? nint_max : 1))))});
      aux_id = std::vector<int>((ni_ipd + (ni_agd_arm *
                 (aux_int ? nint_max : 1))), std::numeric_limits<int>::min());
      current_statement__ = 482;
      aux_id = context__.vals_i("aux_id");
      current_statement__ = 482;
      stan::math::check_greater_or_equal(function__, "aux_id", aux_id, 1);
      current_statement__ = 483;
      stan::math::validate_non_negative_index("aux_group",
        "ni_ipd + ni_agd_arm * (aux_int ? nint_max : 1)", (ni_ipd +
        (ni_agd_arm * (aux_int ? nint_max : 1))));
      current_statement__ = 484;
      context__.validate_dims("data initialization", "aux_group", "int",
        std::vector<size_t>{static_cast<size_t>((ni_ipd + (ni_agd_arm *
                              (aux_int ? nint_max : 1))))});
      aux_group = std::vector<int>((ni_ipd + (ni_agd_arm *
                    (aux_int ? nint_max : 1))),
                    std::numeric_limits<int>::min());
      current_statement__ = 484;
      aux_group = context__.vals_i("aux_group");
      current_statement__ = 484;
      stan::math::check_greater_or_equal(function__, "aux_group", aux_group,
        1);
      current_statement__ = 485;
      context__.validate_dims("data initialization", "nX_aux", "int",
        std::vector<size_t>{});
      nX_aux = std::numeric_limits<int>::min();
      current_statement__ = 485;
      nX_aux = context__.vals_i("nX_aux")[(1 - 1)];
      current_statement__ = 485;
      stan::math::check_greater_or_equal(function__, "nX_aux", nX_aux, 0);
      current_statement__ = 486;
      stan::math::validate_non_negative_index("X_aux",
        "ni_ipd + (aux_int ? nint_max : 1) * ni_agd_arm", (ni_ipd +
        ((aux_int ? nint_max : 1) * ni_agd_arm)));
      current_statement__ = 487;
      stan::math::validate_non_negative_index("X_aux", "nX_aux", nX_aux);
      current_statement__ = 488;
      context__.validate_dims("data initialization", "X_aux", "double",
        std::vector<size_t>{static_cast<size_t>((ni_ipd +
                              ((aux_int ? nint_max : 1) * ni_agd_arm))),
          static_cast<size_t>(nX_aux)});
      X_aux_data__ = Eigen::Matrix<double,-1,-1>::Constant((ni_ipd +
                       ((aux_int ? nint_max : 1) * ni_agd_arm)), nX_aux,
                       std::numeric_limits<double>::quiet_NaN());
      new (&X_aux)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_aux_data__.data(), (ni_ipd
        + ((aux_int ? nint_max : 1) * ni_agd_arm)), nX_aux);
      {
        std::vector<local_scalar_t__> X_aux_flat__;
        current_statement__ = 488;
        X_aux_flat__ = context__.vals_r("X_aux");
        current_statement__ = 488;
        pos__ = 1;
        current_statement__ = 488;
        for (int sym1__ = 1; sym1__ <= nX_aux; ++sym1__) {
          current_statement__ = 488;
          for (int sym2__ = 1; sym2__ <= (ni_ipd + ((aux_int ? nint_max : 1)
               * ni_agd_arm)); ++sym2__) {
            current_statement__ = 488;
            stan::model::assign(X_aux, X_aux_flat__[(pos__ - 1)],
              "assigning variable X_aux", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 488;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 489;
      context__.validate_dims("data initialization", "aux_reg_trt", "int",
        std::vector<size_t>{});
      aux_reg_trt = std::numeric_limits<int>::min();
      current_statement__ = 489;
      aux_reg_trt = context__.vals_i("aux_reg_trt")[(1 - 1)];
      current_statement__ = 489;
      stan::math::check_greater_or_equal(function__, "aux_reg_trt",
        aux_reg_trt, 0);
      current_statement__ = 489;
      stan::math::check_less_or_equal(function__, "aux_reg_trt", aux_reg_trt,
        1);
      current_statement__ = 490;
      context__.validate_dims("data initialization", "prior_hyper_dist",
        "int", std::vector<size_t>{});
      prior_hyper_dist = std::numeric_limits<int>::min();
      current_statement__ = 490;
      prior_hyper_dist = context__.vals_i("prior_hyper_dist")[(1 - 1)];
      current_statement__ = 490;
      stan::math::check_greater_or_equal(function__, "prior_hyper_dist",
        prior_hyper_dist, 0);
      current_statement__ = 490;
      stan::math::check_less_or_equal(function__, "prior_hyper_dist",
        prior_hyper_dist, 6);
      current_statement__ = 491;
      context__.validate_dims("data initialization", "prior_hyper_location",
        "double", std::vector<size_t>{});
      prior_hyper_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 491;
      prior_hyper_location = context__.vals_r("prior_hyper_location")[(1 -
        1)];
      current_statement__ = 491;
      stan::math::check_greater_or_equal(function__, "prior_hyper_location",
        prior_hyper_location, 0);
      current_statement__ = 492;
      context__.validate_dims("data initialization", "prior_hyper_scale",
        "double", std::vector<size_t>{});
      prior_hyper_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 492;
      prior_hyper_scale = context__.vals_r("prior_hyper_scale")[(1 - 1)];
      current_statement__ = 492;
      stan::math::check_greater_or_equal(function__, "prior_hyper_scale",
        prior_hyper_scale, 0);
      current_statement__ = 493;
      context__.validate_dims("data initialization", "prior_hyper_df",
        "double", std::vector<size_t>{});
      prior_hyper_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 493;
      prior_hyper_df = context__.vals_r("prior_hyper_df")[(1 - 1)];
      current_statement__ = 493;
      stan::math::check_greater_or_equal(function__, "prior_hyper_df",
        prior_hyper_df, 0);
      current_statement__ = 494;
      stan::math::validate_non_negative_index("prior_aux_location",
        "nX_aux ? 1 : max(aux_id)", (nX_aux ? 1 : stan::math::max(aux_id)));
      current_statement__ = 495;
      stan::math::validate_non_negative_index("prior_aux_location",
        "n_scoef - 1", (n_scoef - 1));
      current_statement__ = 496;
      context__.validate_dims("data initialization", "prior_aux_location",
        "double",
        std::vector<size_t>{static_cast<size_t>(
                              (nX_aux ? 1 : stan::math::max(aux_id))),
          static_cast<size_t>((n_scoef - 1))});
      prior_aux_location = std::vector<Eigen::Matrix<double,-1,1>>((nX_aux ? 1 : 
                             stan::math::max(aux_id)),
                             Eigen::Matrix<double,-1,1>::Constant((n_scoef -
                               1), std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> prior_aux_location_flat__;
        current_statement__ = 496;
        prior_aux_location_flat__ = context__.vals_r("prior_aux_location");
        current_statement__ = 496;
        pos__ = 1;
        current_statement__ = 496;
        for (int sym1__ = 1; sym1__ <= (n_scoef - 1); ++sym1__) {
          current_statement__ = 496;
          for (int sym2__ = 1; sym2__ <=
               (nX_aux ? 1 : stan::math::max(aux_id)); ++sym2__) {
            current_statement__ = 496;
            stan::model::assign(prior_aux_location,
              prior_aux_location_flat__[(pos__ - 1)],
              "assigning variable prior_aux_location",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 496;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 497;
      stan::math::validate_non_negative_index("lscoef_weight",
        "nX_aux ? 1 : max(aux_id)", (nX_aux ? 1 : stan::math::max(aux_id)));
      current_statement__ = 498;
      stan::math::validate_non_negative_index("lscoef_weight", "n_scoef - 1",
        (n_scoef - 1));
      current_statement__ = 499;
      context__.validate_dims("data initialization", "lscoef_weight",
        "double",
        std::vector<size_t>{static_cast<size_t>(
                              (nX_aux ? 1 : stan::math::max(aux_id))),
          static_cast<size_t>((n_scoef - 1))});
      lscoef_weight = std::vector<Eigen::Matrix<double,-1,1>>((nX_aux ? 1 : 
                        stan::math::max(aux_id)),
                        Eigen::Matrix<double,-1,1>::Constant((n_scoef - 1),
                          std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> lscoef_weight_flat__;
        current_statement__ = 499;
        lscoef_weight_flat__ = context__.vals_r("lscoef_weight");
        current_statement__ = 499;
        pos__ = 1;
        current_statement__ = 499;
        for (int sym1__ = 1; sym1__ <= (n_scoef - 1); ++sym1__) {
          current_statement__ = 499;
          for (int sym2__ = 1; sym2__ <=
               (nX_aux ? 1 : stan::math::max(aux_id)); ++sym2__) {
            current_statement__ = 499;
            stan::model::assign(lscoef_weight, lscoef_weight_flat__[(pos__ -
              1)], "assigning variable lscoef_weight",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 499;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 500;
      context__.validate_dims("data initialization", "prior_reg_hyper_dist",
        "int", std::vector<size_t>{});
      prior_reg_hyper_dist = std::numeric_limits<int>::min();
      current_statement__ = 500;
      prior_reg_hyper_dist = context__.vals_i("prior_reg_hyper_dist")[(1 -
        1)];
      current_statement__ = 500;
      stan::math::check_greater_or_equal(function__, "prior_reg_hyper_dist",
        prior_reg_hyper_dist, 0);
      current_statement__ = 500;
      stan::math::check_less_or_equal(function__, "prior_reg_hyper_dist",
        prior_reg_hyper_dist, 6);
      current_statement__ = 501;
      context__.validate_dims("data initialization",
        "prior_reg_hyper_location", "double", std::vector<size_t>{});
      prior_reg_hyper_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 501;
      prior_reg_hyper_location = context__.vals_r("prior_reg_hyper_location")[(1
        - 1)];
      current_statement__ = 501;
      stan::math::check_greater_or_equal(function__,
        "prior_reg_hyper_location", prior_reg_hyper_location, 0);
      current_statement__ = 502;
      context__.validate_dims("data initialization", "prior_reg_hyper_scale",
        "double", std::vector<size_t>{});
      prior_reg_hyper_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 502;
      prior_reg_hyper_scale = context__.vals_r("prior_reg_hyper_scale")[(1 -
        1)];
      current_statement__ = 502;
      stan::math::check_greater_or_equal(function__, "prior_reg_hyper_scale",
        prior_reg_hyper_scale, 0);
      current_statement__ = 503;
      context__.validate_dims("data initialization", "prior_reg_hyper_df",
        "double", std::vector<size_t>{});
      prior_reg_hyper_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 503;
      prior_reg_hyper_df = context__.vals_r("prior_reg_hyper_df")[(1 - 1)];
      current_statement__ = 503;
      stan::math::check_greater_or_equal(function__, "prior_reg_hyper_df",
        prior_reg_hyper_df, 0);
      current_statement__ = 504;
      n_aux = std::numeric_limits<int>::min();
      current_statement__ = 504;
      n_aux = stan::math::max(aux_id);
      current_statement__ = 505;
      n_aux_group = std::numeric_limits<int>::min();
      current_statement__ = 505;
      n_aux_group = stan::math::max(aux_group);
      current_statement__ = 506;
      stan::math::validate_non_negative_index("aux_id_ipd", "ni_ipd", ni_ipd);
      current_statement__ = 507;
      aux_id_ipd = std::vector<int>(ni_ipd, std::numeric_limits<int>::min());
      current_statement__ = 507;
      stan::model::assign(aux_id_ipd,
        stan::model::rvalue(aux_id, "aux_id",
          stan::model::index_min_max(1, ni_ipd)),
        "assigning variable aux_id_ipd");
      current_statement__ = 508;
      stan::math::validate_non_negative_index("aux_id_agd_arm",
        "ni_agd_arm * (aux_int ? nint_max : 1)", (ni_agd_arm *
        (aux_int ? nint_max : 1)));
      current_statement__ = 509;
      aux_id_agd_arm = std::vector<int>((ni_agd_arm *
                         (aux_int ? nint_max : 1)),
                         std::numeric_limits<int>::min());
      current_statement__ = 509;
      stan::model::assign(aux_id_agd_arm,
        stan::model::rvalue(aux_id, "aux_id",
          stan::model::index_min_max((ni_ipd + 1), (ni_ipd + (ni_agd_arm *
            (aux_int ? nint_max : 1))))), "assigning variable aux_id_agd_arm");
      current_statement__ = 510;
      stan::math::validate_non_negative_index("aux_group_ipd", "ni_ipd",
        ni_ipd);
      current_statement__ = 511;
      aux_group_ipd = std::vector<int>(ni_ipd,
                        std::numeric_limits<int>::min());
      current_statement__ = 511;
      stan::model::assign(aux_group_ipd,
        stan::model::rvalue(aux_group, "aux_group",
          stan::model::index_min_max(1, ni_ipd)),
        "assigning variable aux_group_ipd");
      current_statement__ = 512;
      stan::math::validate_non_negative_index("aux_group_agd_arm",
        "ni_agd_arm * (aux_int ? nint_max : 1)", (ni_agd_arm *
        (aux_int ? nint_max : 1)));
      current_statement__ = 513;
      aux_group_agd_arm = std::vector<int>((ni_agd_arm *
                            (aux_int ? nint_max : 1)),
                            std::numeric_limits<int>::min());
      current_statement__ = 513;
      stan::model::assign(aux_group_agd_arm,
        stan::model::rvalue(aux_group, "aux_group",
          stan::model::index_min_max((ni_ipd + 1), (ni_ipd + (ni_agd_arm *
            (aux_int ? nint_max : 1))))),
        "assigning variable aux_group_agd_arm");
      current_statement__ = 514;
      stan::math::validate_non_negative_index("ni_aux_group_ipd",
        "aux_int == 0 ? n_aux_group : 0",
        (stan::math::logical_eq(aux_int, 0) ? n_aux_group : 0));
      current_statement__ = 515;
      ni_aux_group_ipd = std::vector<int>((stan::math::logical_eq(aux_int, 0) ? n_aux_group : 0),
                           std::numeric_limits<int>::min());
      current_statement__ = 515;
      stan::model::assign(ni_aux_group_ipd,
        nwhich_all(aux_group_ipd, n_aux_group, pstream__),
        "assigning variable ni_aux_group_ipd");
      current_statement__ = 516;
      stan::math::validate_non_negative_index("wi_aux_group_ipd",
        "aux_int == 0 ? n_aux_group : 0",
        (stan::math::logical_eq(aux_int, 0) ? n_aux_group : 0));
      current_statement__ = 517;
      stan::math::validate_non_negative_index("wi_aux_group_ipd",
        "max(ni_aux_group_ipd)", stan::math::max(ni_aux_group_ipd));
      current_statement__ = 518;
      wi_aux_group_ipd = std::vector<std::vector<int>>((stan::math::logical_eq(
                                                          aux_int, 0) ? n_aux_group : 0),
                           std::vector<int>(stan::math::max(ni_aux_group_ipd),
                             std::numeric_limits<int>::min()));
      current_statement__ = 519;
      stan::math::validate_non_negative_index("ni_aux_group_agd_arm",
        "aux_int == 0 ? n_aux_group : 0",
        (stan::math::logical_eq(aux_int, 0) ? n_aux_group : 0));
      current_statement__ = 520;
      ni_aux_group_agd_arm = std::vector<int>((stan::math::logical_eq(
                                                 aux_int, 0) ? n_aux_group : 0),
                               std::numeric_limits<int>::min());
      current_statement__ = 520;
      stan::model::assign(ni_aux_group_agd_arm,
        nwhich_all(aux_group_agd_arm, n_aux_group, pstream__),
        "assigning variable ni_aux_group_agd_arm");
      current_statement__ = 521;
      stan::math::validate_non_negative_index("wi_aux_group_agd_arm",
        "aux_int == 0 ? n_aux_group : 0",
        (stan::math::logical_eq(aux_int, 0) ? n_aux_group : 0));
      current_statement__ = 522;
      stan::math::validate_non_negative_index("wi_aux_group_agd_arm",
        "max(ni_aux_group_agd_arm)", stan::math::max(ni_aux_group_agd_arm));
      current_statement__ = 523;
      wi_aux_group_agd_arm = std::vector<std::vector<int>>((stan::math::logical_eq(
                                                              aux_int, 0) ? n_aux_group : 0),
                               std::vector<int>(stan::math::max(
                                                  ni_aux_group_agd_arm),
                                 std::numeric_limits<int>::min()));
      current_statement__ = 524;
      stan::math::validate_non_negative_index("Xauxdummy", "nX_aux", nX_aux);
      current_statement__ = 525;
      Xauxdummy_data__ = Eigen::Matrix<double,-1,-1>::Constant(0, nX_aux,
                           std::numeric_limits<double>::quiet_NaN());
      new (&Xauxdummy)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(Xauxdummy_data__.data(), 0,
        nX_aux);
      current_statement__ = 526;
      stan::math::validate_non_negative_index("X_aux_ipd", "ni_ipd", ni_ipd);
      current_statement__ = 527;
      stan::math::validate_non_negative_index("X_aux_ipd", "nX_aux", nX_aux);
      current_statement__ = 528;
      X_aux_ipd_data__ = Eigen::Matrix<double,-1,-1>::Constant(ni_ipd,
                           nX_aux, std::numeric_limits<double>::quiet_NaN());
      new (&X_aux_ipd)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_aux_ipd_data__.data(),
        ni_ipd, nX_aux);
      current_statement__ = 528;
      stan::model::assign(X_aux_ipd,
        (ni_ipd ? stan::math::eval(
                    stan::model::rvalue(X_aux, "X_aux",
                      stan::model::index_min_max(1, ni_ipd))) : stan::math::eval(
                                                                  Xauxdummy)),
        "assigning variable X_aux_ipd");
      current_statement__ = 529;
      stan::math::validate_non_negative_index("X_aux_agd_arm",
        "(aux_int ? nint_max : 1) * ni_agd_arm", ((aux_int ? nint_max : 1) *
        ni_agd_arm));
      current_statement__ = 530;
      stan::math::validate_non_negative_index("X_aux_agd_arm", "nX_aux",
        nX_aux);
      current_statement__ = 531;
      X_aux_agd_arm_data__ = Eigen::Matrix<double,-1,-1>::Constant(((aux_int ? nint_max : 1)
                               * ni_agd_arm), nX_aux,
                               std::numeric_limits<double>::quiet_NaN());
      new (&X_aux_agd_arm)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_aux_agd_arm_data__.data(),
        ((aux_int ? nint_max : 1) * ni_agd_arm), nX_aux);
      current_statement__ = 531;
      stan::model::assign(X_aux_agd_arm,
        (ni_agd_arm ? stan::math::eval(
                        stan::model::rvalue(X_aux, "X_aux",
                          stan::model::index_min_max((ni_ipd + 1), (ni_ipd +
                            ((aux_int ? nint_max : 1) * ni_agd_arm))))) : 
        stan::math::eval(Xauxdummy)), "assigning variable X_aux_agd_arm");
      current_statement__ = 532;
      stan::math::validate_non_negative_index("sigma_beta_L",
        "aux_reg_trt ? nt : 0", (aux_reg_trt ? nt : 0));
      current_statement__ = 532;
      stan::math::validate_non_negative_index("sigma_beta_L",
        "aux_reg_trt ? nt : 0", (aux_reg_trt ? nt : 0));
      current_statement__ = 533;
      sigma_beta_L_data__ = Eigen::Matrix<double,-1,-1>::Constant((aux_reg_trt ? nt : 0),
                              (aux_reg_trt ? nt : 0),
                              std::numeric_limits<double>::quiet_NaN());
      new (&sigma_beta_L)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(sigma_beta_L_data__.data(),
        (aux_reg_trt ? nt : 0), (aux_reg_trt ? nt : 0));
      current_statement__ = 534;
      nint = std::numeric_limits<int>::min();
      current_statement__ = 534;
      nint = stan::model::rvalue(nint_vec, "nint_vec",
               stan::model::index_uni(CHAIN_ID));
      current_statement__ = 535;
      n_delta = std::numeric_limits<int>::min();
      current_statement__ = 535;
      n_delta = (RE ? stan::math::max(which_RE) : 0);
      current_statement__ = 536;
      stan::math::validate_non_negative_index("RE_mu", "n_delta", n_delta);
      current_statement__ = 537;
      RE_mu_data__ = Eigen::Matrix<double,-1,1>::Constant(n_delta,
                       std::numeric_limits<double>::quiet_NaN());
      new (&RE_mu)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(RE_mu_data__.data(), n_delta);
      current_statement__ = 537;
      stan::model::assign(RE_mu, stan::math::rep_vector(0, n_delta),
        "assigning variable RE_mu");
      current_statement__ = 538;
      REdummy_data__ = Eigen::Matrix<double,-1,-1>::Constant(0, 0,
                         std::numeric_limits<double>::quiet_NaN());
      new (&REdummy)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(REdummy_data__.data(), 0, 0);
      current_statement__ = 539;
      stan::math::validate_non_negative_index("RE_L", "n_delta", n_delta);
      current_statement__ = 539;
      stan::math::validate_non_negative_index("RE_L", "n_delta", n_delta);
      current_statement__ = 540;
      RE_L_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_delta, n_delta,
                      std::numeric_limits<double>::quiet_NaN());
      new (&RE_L) Eigen::Map<Eigen::Matrix<double,-1,-1>>(RE_L_data__.data(),
        n_delta, n_delta);
      current_statement__ = 540;
      stan::model::assign(RE_L,
        (n_delta ? stan::math::eval(stan::math::cholesky_decompose(RE_cor)) : 
        stan::math::eval(REdummy)), "assigning variable RE_L");
      current_statement__ = 541;
      wdummy_data__ = Eigen::Matrix<double,-1,1>::Constant(0,
                        std::numeric_limits<double>::quiet_NaN());
      new (&wdummy)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(wdummy_data__.data(), 0);
      current_statement__ = 542;
      vudummy = std::vector<int>(0, std::numeric_limits<int>::min());
      current_statement__ = 543;
      RE_L_nz = std::numeric_limits<int>::min();
      current_statement__ = 543;
      RE_L_nz = count_nonzero(RE_L, pstream__);
      current_statement__ = 544;
      RE_sparse = std::numeric_limits<int>::min();
      current_statement__ = 544;
      RE_sparse = stan::math::logical_lte(((RE_L_nz * 1.0) /
                    stan::math::num_elements(RE_L)), 0.1);
      current_statement__ = 545;
      stan::math::validate_non_negative_index("RE_L_w",
        "RE_sparse ? RE_L_nz : 0", (RE_sparse ? RE_L_nz : 0));
      current_statement__ = 546;
      RE_L_w_data__ = Eigen::Matrix<double,-1,1>::Constant((RE_sparse ? RE_L_nz : 0),
                        std::numeric_limits<double>::quiet_NaN());
      new (&RE_L_w)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(RE_L_w_data__.data(),
        (RE_sparse ? RE_L_nz : 0));
      current_statement__ = 546;
      stan::model::assign(RE_L_w,
        (RE_sparse ? stan::math::eval(stan::math::csr_extract_w(RE_L)) : 
        stan::math::eval(wdummy)), "assigning variable RE_L_w");
      current_statement__ = 547;
      stan::math::validate_non_negative_index("RE_L_v",
        "RE_sparse ? RE_L_nz : 0", (RE_sparse ? RE_L_nz : 0));
      current_statement__ = 548;
      RE_L_v = std::vector<int>((RE_sparse ? RE_L_nz : 0),
                 std::numeric_limits<int>::min());
      current_statement__ = 548;
      stan::model::assign(RE_L_v,
        (RE_sparse ? stan::math::csr_extract_v(RE_L) : vudummy),
        "assigning variable RE_L_v");
      current_statement__ = 549;
      stan::math::validate_non_negative_index("RE_L_u",
        "RE_sparse ? n_delta + 1 : 0", (RE_sparse ? (n_delta + 1) : 0));
      current_statement__ = 550;
      RE_L_u = std::vector<int>((RE_sparse ? (n_delta + 1) : 0),
                 std::numeric_limits<int>::min());
      current_statement__ = 550;
      stan::model::assign(RE_L_u,
        (RE_sparse ? stan::math::csr_extract_u(RE_L) : vudummy),
        "assigning variable RE_L_u");
      current_statement__ = 551;
      totns = std::numeric_limits<int>::min();
      current_statement__ = 551;
      totns = (ns_ipd + ns_agd_arm);
      current_statement__ = 552;
      stan::math::validate_non_negative_index("trt",
        "narm_ipd + narm_agd_arm + ni_agd_contrast", ((narm_ipd +
        narm_agd_arm) + ni_agd_contrast));
      current_statement__ = 553;
      trt = std::vector<int>(((narm_ipd + narm_agd_arm) + ni_agd_contrast),
              std::numeric_limits<int>::min());
      current_statement__ = 553;
      stan::model::assign(trt,
        stan::math::append_array(
          stan::math::append_array(ipd_trt, agd_arm_trt), agd_contrast_trt),
        "assigning variable trt");
      current_statement__ = 554;
      stan::math::validate_non_negative_index("Xdummy", "nX", nX);
      current_statement__ = 555;
      Xdummy_data__ = Eigen::Matrix<double,-1,-1>::Constant(0, nX,
                        std::numeric_limits<double>::quiet_NaN());
      new (&Xdummy)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(Xdummy_data__.data(), 0, nX);
      current_statement__ = 556;
      stan::math::validate_non_negative_index("X_ipd", "ni_ipd", ni_ipd);
      current_statement__ = 557;
      stan::math::validate_non_negative_index("X_ipd", "nX", nX);
      current_statement__ = 558;
      X_ipd_data__ = Eigen::Matrix<double,-1,-1>::Constant(ni_ipd, nX,
                       std::numeric_limits<double>::quiet_NaN());
      new (&X_ipd)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_ipd_data__.data(), ni_ipd,
        nX);
      current_statement__ = 558;
      stan::model::assign(X_ipd,
        (ni_ipd ? stan::math::eval(
                    stan::model::rvalue(X, "X",
                      stan::model::index_min_max(1, ni_ipd))) : stan::math::eval(
                                                                  Xdummy)),
        "assigning variable X_ipd");
      current_statement__ = 559;
      stan::math::validate_non_negative_index("X_agd_arm",
        "nint_max * ni_agd_arm", (nint_max * ni_agd_arm));
      current_statement__ = 560;
      stan::math::validate_non_negative_index("X_agd_arm", "nX", nX);
      current_statement__ = 561;
      X_agd_arm_data__ = Eigen::Matrix<double,-1,-1>::Constant((nint_max *
                           ni_agd_arm), nX,
                           std::numeric_limits<double>::quiet_NaN());
      new (&X_agd_arm)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_agd_arm_data__.data(),
        (nint_max * ni_agd_arm), nX);
      current_statement__ = 561;
      stan::model::assign(X_agd_arm,
        (ni_agd_arm ? stan::math::eval(
                        stan::model::rvalue(X, "X",
                          stan::model::index_min_max((ni_ipd + 1), (ni_ipd +
                            (nint_max * ni_agd_arm))))) : stan::math::eval(
                                                            Xdummy)),
        "assigning variable X_agd_arm");
      current_statement__ = 562;
      stan::math::validate_non_negative_index("X_agd_contrast",
        "nint_max * ni_agd_contrast", (nint_max * ni_agd_contrast));
      current_statement__ = 563;
      stan::math::validate_non_negative_index("X_agd_contrast", "nX", nX);
      current_statement__ = 564;
      X_agd_contrast_data__ = Eigen::Matrix<double,-1,-1>::Constant((nint_max
                                * ni_agd_contrast), nX,
                                std::numeric_limits<double>::quiet_NaN());
      new (&X_agd_contrast)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_agd_contrast_data__.data(),
        (nint_max * ni_agd_contrast), nX);
      current_statement__ = 564;
      stan::model::assign(X_agd_contrast,
        (ni_agd_contrast ? stan::math::eval(
                             stan::model::rvalue(X, "X",
                               stan::model::index_min_max(((ni_ipd +
                                 (nint_max * ni_agd_arm)) + 1), (ni_ipd +
                                 (nint_max * (ni_agd_arm + ni_agd_contrast)))))) : 
        stan::math::eval(Xdummy)), "assigning variable X_agd_contrast");
      current_statement__ = 565;
      odummy_data__ = Eigen::Matrix<double,-1,1>::Constant(0,
                        std::numeric_limits<double>::quiet_NaN());
      new (&odummy)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(odummy_data__.data(), 0);
      current_statement__ = 566;
      stan::math::validate_non_negative_index("offset_ipd",
        "has_offset && ni_ipd ? ni_ipd : 0",
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_ipd)) ? ni_ipd : 0));
      current_statement__ = 567;
      offset_ipd_data__ = Eigen::Matrix<double,-1,1>::Constant(((stan::math::primitive_value(
                                                                   has_offset)
                            &&
                            stan::math::primitive_value(ni_ipd)) ? ni_ipd : 0),
                            std::numeric_limits<double>::quiet_NaN());
      new (&offset_ipd)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(offset_ipd_data__.data(),
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_ipd)) ? ni_ipd : 0));
      current_statement__ = 567;
      stan::model::assign(offset_ipd,
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_ipd)) ? stan::math::eval(
                                                 stan::model::rvalue(offsets,
                                                   "offsets",
                                                   stan::model::index_min_max(
                                                     1, ni_ipd))) : stan::math::eval(
                                                                    odummy)),
        "assigning variable offset_ipd");
      current_statement__ = 568;
      stan::math::validate_non_negative_index("offset_agd_arm",
        "has_offset && ni_agd_arm ? nint_max * ni_agd_arm : 0",
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_arm)) ? (nint_max *
        ni_agd_arm) : 0));
      current_statement__ = 569;
      offset_agd_arm_data__ = Eigen::Matrix<double,-1,1>::Constant(((
                                stan::math::primitive_value(has_offset) &&
                                stan::math::primitive_value(ni_agd_arm)) ? (nint_max
                                * ni_agd_arm) : 0),
                                std::numeric_limits<double>::quiet_NaN());
      new (&offset_agd_arm)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(offset_agd_arm_data__.data(),
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_arm)) ? (nint_max *
        ni_agd_arm) : 0));
      current_statement__ = 569;
      stan::model::assign(offset_agd_arm,
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_arm)) ? stan::math::eval(
                                                     stan::model::rvalue(
                                                       offsets, "offsets",
                                                       stan::model::index_min_max(
                                                         (ni_ipd + 1),
                                                         (ni_ipd + (nint_max
                                                         * ni_agd_arm))))) : 
        stan::math::eval(odummy)), "assigning variable offset_agd_arm");
      current_statement__ = 570;
      stan::math::validate_non_negative_index("offset_agd_contrast",
        "has_offset && ni_agd_contrast ? nint_max * ni_agd_contrast : 0",
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_contrast)) ? (nint_max *
        ni_agd_contrast) : 0));
      current_statement__ = 571;
      offset_agd_contrast_data__ = Eigen::Matrix<double,-1,1>::Constant(((
                                     stan::math::primitive_value(has_offset)
                                     &&
                                     stan::math::primitive_value(
                                       ni_agd_contrast)) ? (nint_max *
                                     ni_agd_contrast) : 0),
                                     std::numeric_limits<double>::quiet_NaN());
      new (&offset_agd_contrast)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(offset_agd_contrast_data__.data(),
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_contrast)) ? (nint_max *
        ni_agd_contrast) : 0));
      current_statement__ = 571;
      stan::model::assign(offset_agd_contrast,
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_contrast)) ? stan::math::eval(
                                                          stan::model::rvalue(
                                                            offsets,
                                                            "offsets",
                                                            stan::model::index_min_max(
                                                              ((ni_ipd +
                                                              (nint_max *
                                                              ni_agd_arm)) +
                                                              1), (ni_ipd +
                                                              (nint_max *
                                                              (ni_agd_arm +
                                                              ni_agd_contrast)))))) : 
        stan::math::eval(odummy)), "assigning variable offset_agd_contrast");
      current_statement__ = 572;
      n_int_thin = std::numeric_limits<int>::min();
      current_statement__ = 572;
      n_int_thin = ((stan::math::primitive_value(
                       stan::math::logical_gt(nint_max, 1))
        &&
        stan::math::primitive_value(stan::math::logical_gt(int_thin, 0))) ? (nint
        / int_thin) : 0);
      current_statement__ = 573;
      stan::math::validate_non_negative_index("inv_Sigma",
        "ni_agd_contrast ? ni_agd_contrast : 1",
        (ni_agd_contrast ? ni_agd_contrast : 1));
      current_statement__ = 574;
      stan::math::validate_non_negative_index("inv_Sigma",
        "ni_agd_contrast ? ni_agd_contrast : 1",
        (ni_agd_contrast ? ni_agd_contrast : 1));
      current_statement__ = 575;
      inv_Sigma_data__ = Eigen::Matrix<double,-1,-1>::Constant((ni_agd_contrast ? ni_agd_contrast : 1),
                           (ni_agd_contrast ? ni_agd_contrast : 1),
                           std::numeric_limits<double>::quiet_NaN());
      new (&inv_Sigma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(inv_Sigma_data__.data(),
        (ni_agd_contrast ? ni_agd_contrast : 1),
        (ni_agd_contrast ? ni_agd_contrast : 1));
      current_statement__ = 575;
      stan::model::assign(inv_Sigma,
        stan::math::inverse_spd(agd_contrast_Sigma),
        "assigning variable inv_Sigma");
      current_statement__ = 576;
      stan::math::validate_non_negative_index("nc_agd_contrast",
        "ns_agd_contrast", ns_agd_contrast);
      current_statement__ = 577;
      nc_agd_contrast = std::vector<int>(ns_agd_contrast,
                          std::numeric_limits<int>::min());
      current_statement__ = 591;
      if (ns_agd_contrast) {
        int s = std::numeric_limits<int>::min();
        current_statement__ = 578;
        s = 1;
        int c = std::numeric_limits<int>::min();
        current_statement__ = 579;
        c = 1;
        current_statement__ = 588;
        for (int i = 1; i <= (ni_agd_contrast - 1); ++i) {
          current_statement__ = 586;
          if (stan::math::logical_eq(
                stan::model::rvalue(agd_contrast_Sigma, "agd_contrast_Sigma",
                  stan::model::index_uni(i), stan::model::index_uni((i + 1))),
                0)) {
            current_statement__ = 582;
            stan::model::assign(nc_agd_contrast, c,
              "assigning variable nc_agd_contrast", stan::model::index_uni(s));
            current_statement__ = 583;
            s = (s + 1);
            current_statement__ = 584;
            c = 1;
          } else {
            current_statement__ = 580;
            c = (c + 1);
          }
        }
        current_statement__ = 589;
        stan::model::assign(nc_agd_contrast, c,
          "assigning variable nc_agd_contrast", stan::model::index_uni(s));
      }
      current_statement__ = 592;
      n_class = std::numeric_limits<int>::min();
      current_statement__ = 592;
      n_class = (class_effects ? stan::math::max(which_CE) : 0);
      current_statement__ = 593;
      stan::math::validate_non_negative_index("which_class",
        "class_effects ? nt - 1 : 0", (class_effects ? (nt - 1) : 0));
      current_statement__ = 594;
      which_class = std::vector<int>((class_effects ? (nt - 1) : 0),
                      std::numeric_limits<int>::min());
      current_statement__ = 595;
      stan::math::validate_non_negative_index("which_class_sd",
        "class_effects ? n_class : 0", (class_effects ? n_class : 0));
      current_statement__ = 596;
      which_class_sd = std::vector<int>((class_effects ? n_class : 0),
                         std::numeric_limits<int>::min());
      current_statement__ = 597;
      n_class_trts = std::numeric_limits<int>::min();
      current_statement__ = 597;
      n_class_trts = stan::math::num_elements(which_gt0a(which_CE, pstream__));
      current_statement__ = 598;
      stan::math::validate_non_negative_index("which_class_trt",
        "n_class_trts", n_class_trts);
      current_statement__ = 599;
      which_class_trt = std::vector<int>(n_class_trts,
                          std::numeric_limits<int>::min());
      current_statement__ = 599;
      stan::model::assign(which_class_trt, which_gt0a(which_CE, pstream__),
        "assigning variable which_class_trt");
      current_statement__ = 609;
      if (class_effects) {
        current_statement__ = 607;
        for (int c = 1; c <= n_class; ++c) {
          current_statement__ = 605;
          for (int t = 1; t <= (nt - 1); ++t) {
            current_statement__ = 603;
            if (stan::math::logical_eq(
                  stan::model::rvalue(which_CE, "which_CE",
                    stan::model::index_uni(t)), c)) {
              current_statement__ = 600;
              stan::model::assign(which_class_sd,
                stan::model::rvalue(which_CE_sd, "which_CE_sd",
                  stan::model::index_uni(t)),
                "assigning variable which_class_sd",
                stan::model::index_uni(c));
              break;
            }
          }
        }
      }
      current_statement__ = 620;
      if (class_effects) {
        int count = std::numeric_limits<int>::min();
        current_statement__ = 610;
        count = 1;
        current_statement__ = 618;
        for (int t = 1; t <= (nt - 1); ++t) {
          current_statement__ = 616;
          if (stan::math::logical_gt(
                stan::model::rvalue(which_CE_sd, "which_CE_sd",
                  stan::model::index_uni(t)), 0)) {
            current_statement__ = 613;
            stan::model::assign(which_class, count,
              "assigning variable which_class", stan::model::index_uni(t));
            current_statement__ = 614;
            count = (count + 1);
          } else {
            current_statement__ = 611;
            stan::model::assign(which_class, 0,
              "assigning variable which_class", stan::model::index_uni(t));
          }
        }
      }
      current_statement__ = 627;
      if (stan::math::logical_eq(aux_int, 0)) {
        current_statement__ = 626;
        for (int i = 1; i <= n_aux_group; ++i) {
          current_statement__ = 622;
          if (stan::model::rvalue(ni_aux_group_ipd, "ni_aux_group_ipd",
                stan::model::index_uni(i))) {
            current_statement__ = 621;
            stan::model::assign(wi_aux_group_ipd,
              which(aux_group_ipd, i, pstream__),
              "assigning variable wi_aux_group_ipd",
              stan::model::index_uni(i),
              stan::model::index_min_max(1,
                stan::model::rvalue(ni_aux_group_ipd, "ni_aux_group_ipd",
                  stan::model::index_uni(i))));
          }
          current_statement__ = 624;
          if (stan::model::rvalue(ni_aux_group_agd_arm,
                "ni_aux_group_agd_arm", stan::model::index_uni(i))) {
            current_statement__ = 623;
            stan::model::assign(wi_aux_group_agd_arm,
              which(aux_group_agd_arm, i, pstream__),
              "assigning variable wi_aux_group_agd_arm",
              stan::model::index_uni(i),
              stan::model::index_min_max(1,
                stan::model::rvalue(ni_aux_group_agd_arm,
                  "ni_aux_group_agd_arm", stan::model::index_uni(i))));
          }
        }
      }
      current_statement__ = 629;
      if (aux_reg_trt) {
        current_statement__ = 628;
        stan::model::assign(sigma_beta_L,
          stan::math::cholesky_decompose(cs(0.5, nt, pstream__)),
          "assigning variable sigma_beta_L");
      }
      current_statement__ = 507;
      stan::math::check_greater_or_equal(function__, "aux_id_ipd",
        aux_id_ipd, 1);
      current_statement__ = 509;
      stan::math::check_greater_or_equal(function__, "aux_id_agd_arm",
        aux_id_agd_arm, 1);
      current_statement__ = 511;
      stan::math::check_greater_or_equal(function__, "aux_group_ipd",
        aux_group_ipd, 1);
      current_statement__ = 513;
      stan::math::check_greater_or_equal(function__, "aux_group_agd_arm",
        aux_group_agd_arm, 1);
      current_statement__ = 533;
      stan::math::check_cholesky_factor_corr(function__, "sigma_beta_L",
        sigma_beta_L);
      current_statement__ = 534;
      stan::math::check_greater_or_equal(function__, "nint", nint, 1);
      current_statement__ = 534;
      stan::math::check_less_or_equal(function__, "nint", nint, nint_max);
      current_statement__ = 535;
      stan::math::check_greater_or_equal(function__, "n_delta", n_delta, 0);
      current_statement__ = 540;
      stan::math::check_cholesky_factor_corr(function__, "RE_L", RE_L);
      current_statement__ = 553;
      stan::math::check_greater_or_equal(function__, "trt", trt, 1);
      current_statement__ = 592;
      stan::math::check_greater_or_equal(function__, "n_class", n_class, 0);
      current_statement__ = 594;
      stan::math::check_greater_or_equal(function__, "which_class",
        which_class, 0);
      current_statement__ = 596;
      stan::math::check_greater_or_equal(function__, "which_class_sd",
        which_class_sd, 0);
      current_statement__ = 597;
      stan::math::check_greater_or_equal(function__, "n_class_trts",
        n_class_trts, 0);
      current_statement__ = 630;
      stan::math::validate_non_negative_index("beta_tilde", "nX", nX);
      current_statement__ = 631;
      stan::math::validate_non_negative_index("u_delta", "n_delta", n_delta);
      current_statement__ = 632;
      tau_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 632;
      tau_1dim__ = (RE ? 1 : 0);
      current_statement__ = 632;
      stan::math::validate_non_negative_index("tau", "RE ? 1 : 0", tau_1dim__);
      current_statement__ = 633;
      class_mean_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 633;
      class_mean_1dim__ = (class_effects ? stan::math::max(which_CE) : 0);
      current_statement__ = 633;
      stan::math::validate_non_negative_index("class_mean",
        "class_effects ? max(which_CE) : 0", class_mean_1dim__);
      current_statement__ = 634;
      class_sd_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 634;
      class_sd_1dim__ = (class_effects ? stan::math::max(which_CE_sd) : 0);
      current_statement__ = 634;
      stan::math::validate_non_negative_index("class_sd",
        "class_effects ? max(which_CE_sd) : 0", class_sd_1dim__);
      current_statement__ = 635;
      z_class_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 635;
      z_class_1dim__ = (class_effects ? n_class_trts : 0);
      current_statement__ = 635;
      stan::math::validate_non_negative_index("z_class",
        "class_effects ? n_class_trts : 0", z_class_1dim__);
      current_statement__ = 636;
      stan::math::validate_non_negative_index("u_beta_aux", "nX_aux", nX_aux);
      current_statement__ = 637;
      u_beta_aux_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 637;
      u_beta_aux_2dim__ = (n_scoef - 1);
      current_statement__ = 637;
      stan::math::validate_non_negative_index("u_beta_aux", "n_scoef - 1",
        u_beta_aux_2dim__);
      current_statement__ = 638;
      sigma_beta_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 638;
      sigma_beta_1dim__ = (aux_reg_trt ? (nX_aux - (nt - 1)) : nX_aux);
      current_statement__ = 638;
      stan::math::validate_non_negative_index("sigma_beta",
        "aux_reg_trt ? nX_aux - (nt - 1) : nX_aux", sigma_beta_1dim__);
      current_statement__ = 639;
      stan::math::validate_non_negative_index("sigma", "n_aux", n_aux);
      current_statement__ = 640;
      stan::math::validate_non_negative_index("u_aux", "n_aux", n_aux);
      current_statement__ = 641;
      u_aux_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 641;
      u_aux_2dim__ = (n_scoef - 1);
      current_statement__ = 641;
      stan::math::validate_non_negative_index("u_aux", "n_scoef - 1",
        u_aux_2dim__);
      current_statement__ = 642;
      stan::math::validate_non_negative_index("log_L_ipd", "ni_ipd", ni_ipd);
      current_statement__ = 643;
      stan::math::validate_non_negative_index("log_L_agd_arm", "ni_agd_arm",
        ni_agd_arm);
      current_statement__ = 644;
      stan::math::validate_non_negative_index("lscoef", "n_aux", n_aux);
      current_statement__ = 645;
      lscoef_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 645;
      lscoef_2dim__ = (n_scoef - 1);
      current_statement__ = 645;
      stan::math::validate_non_negative_index("lscoef", "n_scoef - 1",
        lscoef_2dim__);
      current_statement__ = 646;
      scoef_temp_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 646;
      scoef_temp_1dim__ = (nX_aux ? 0 : n_aux);
      current_statement__ = 646;
      stan::math::validate_non_negative_index("scoef_temp",
        "nX_aux ? 0 : n_aux", scoef_temp_1dim__);
      current_statement__ = 647;
      stan::math::validate_non_negative_index("scoef_temp", "n_scoef",
        n_scoef);
      current_statement__ = 648;
      stan::math::validate_non_negative_index("beta_aux", "nX_aux", nX_aux);
      current_statement__ = 649;
      beta_aux_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 649;
      beta_aux_2dim__ = (n_scoef - 1);
      current_statement__ = 649;
      stan::math::validate_non_negative_index("beta_aux", "n_scoef - 1",
        beta_aux_2dim__);
      current_statement__ = 650;
      stan::math::validate_non_negative_index("eta_ipd", "ni_ipd", ni_ipd);
      current_statement__ = 651;
      stan::math::validate_non_negative_index("f_delta", "n_delta", n_delta);
      current_statement__ = 652;
      stan::math::validate_non_negative_index("allbeta", "nX", nX);
      current_statement__ = 653;
      stan::math::validate_non_negative_index("mu", "totns", totns);
      current_statement__ = 654;
      d_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 654;
      d_1dim__ = (nt - 1);
      current_statement__ = 654;
      stan::math::validate_non_negative_index("d", "nt - 1", d_1dim__);
      current_statement__ = 655;
      stan::math::validate_non_negative_index("omega", "nodesplit", nodesplit);
      current_statement__ = 656;
      beta_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 656;
      beta_1dim__ = (((nX - totns) - (nt - 1)) - nodesplit);
      current_statement__ = 656;
      stan::math::validate_non_negative_index("beta",
        "nX - totns - (nt - 1) - nodesplit", beta_1dim__);
      current_statement__ = 657;
      eta_agd_contrast_ii_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 657;
      eta_agd_contrast_ii_1dim__ = (stan::math::logical_gt(nint_max, 1) ? (nint
        * ni_agd_contrast) : 0);
      current_statement__ = 657;
      stan::math::validate_non_negative_index("eta_agd_contrast_ii",
        "nint_max > 1 ? nint * ni_agd_contrast : 0",
        eta_agd_contrast_ii_1dim__);
      current_statement__ = 658;
      stan::math::validate_non_negative_index("eta_agd_contrast_bar",
        "ni_agd_contrast", ni_agd_contrast);
      current_statement__ = 659;
      f_class_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 659;
      f_class_1dim__ = (class_effects ? stan::math::max(which_class) : 0);
      current_statement__ = 659;
      stan::math::validate_non_negative_index("f_class",
        "class_effects ? max(which_class) : 0", f_class_1dim__);
      current_statement__ = 660;
      stan::math::validate_non_negative_index("scoef", "n_aux", n_aux);
      current_statement__ = 661;
      stan::math::validate_non_negative_index("scoef", "n_scoef", n_scoef);
      current_statement__ = 662;
      d_aux_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 662;
      d_aux_1dim__ = (aux_reg_trt ? (nt - 1) : 0);
      current_statement__ = 662;
      stan::math::validate_non_negative_index("d_aux",
        "aux_reg_trt ? nt - 1 : 0", d_aux_1dim__);
      current_statement__ = 663;
      d_aux_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 663;
      d_aux_2dim__ = (n_scoef - 1);
      current_statement__ = 663;
      stan::math::validate_non_negative_index("d_aux", "n_scoef - 1",
        d_aux_2dim__);
      current_statement__ = 664;
      log_lik_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 664;
      log_lik_1dim__ = ((ni_ipd + ni_agd_arm) + ns_agd_contrast);
      current_statement__ = 664;
      stan::math::validate_non_negative_index("log_lik",
        "ni_ipd + ni_agd_arm + ns_agd_contrast", log_lik_1dim__);
      current_statement__ = 665;
      resdev_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 665;
      resdev_1dim__ = ((ni_ipd + ni_agd_arm) + ns_agd_contrast);
      current_statement__ = 665;
      stan::math::validate_non_negative_index("resdev",
        "ni_ipd + ni_agd_arm + ns_agd_contrast", resdev_1dim__);
      current_statement__ = 666;
      stan::math::validate_non_negative_index("fitted_agd_contrast",
        "ni_agd_contrast", ni_agd_contrast);
      current_statement__ = 667;
      theta_bar_cum_agd_contrast_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 667;
      theta_bar_cum_agd_contrast_1dim__ = (ni_agd_contrast * n_int_thin);
      current_statement__ = 667;
      stan::math::validate_non_negative_index("theta_bar_cum_agd_contrast",
        "ni_agd_contrast * n_int_thin", theta_bar_cum_agd_contrast_1dim__);
      current_statement__ = 668;
      stan::math::validate_non_negative_index("delta", "n_delta", n_delta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = nX + n_delta + tau_1dim__ + class_mean_1dim__ +
      class_sd_1dim__ + z_class_1dim__ + (nX_aux * u_beta_aux_2dim__) +
      sigma_beta_1dim__ + n_aux + (n_aux * u_aux_2dim__);
  }
  inline std::string model_name() const final {
    return "model_survival_mspline";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_survival_mspline_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta_tilde =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nX, DUMMY_VAR__);
      current_statement__ = 1;
      beta_tilde = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(nX);
      Eigen::Matrix<local_scalar_t__,-1,1> u_delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_delta, DUMMY_VAR__);
      current_statement__ = 2;
      u_delta = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_delta);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tau_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      tau = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
              tau_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> class_mean =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(class_mean_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      class_mean = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(class_mean_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> class_sd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(class_sd_1dim__,
          DUMMY_VAR__);
      current_statement__ = 5;
      class_sd = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   class_sd_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> z_class =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_class_1dim__,
          DUMMY_VAR__);
      current_statement__ = 6;
      z_class = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(z_class_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,-1> u_beta_aux =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nX_aux,
          u_beta_aux_2dim__, DUMMY_VAR__);
      current_statement__ = 7;
      u_beta_aux = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,-1>>(nX_aux,
                     u_beta_aux_2dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sigma_beta_1dim__,
          DUMMY_VAR__);
      current_statement__ = 8;
      sigma_beta = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     lp__, sigma_beta_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_aux, DUMMY_VAR__);
      current_statement__ = 9;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                n_aux);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> u_aux =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_aux,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(u_aux_2dim__,
            DUMMY_VAR__));
      current_statement__ = 10;
      u_aux = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(n_aux,
                u_aux_2dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> log_L_ipd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_ipd, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> log_L_agd_arm =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_agd_arm,
          DUMMY_VAR__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> lscoef =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_aux,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lscoef_2dim__,
            DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> scoef_temp =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(scoef_temp_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_scoef,
            DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_aux =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nX_aux,
          beta_aux_2dim__, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> eta_ipd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_ipd, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> f_delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_delta, DUMMY_VAR__);
      current_statement__ = 17;
      stan::model::assign(f_delta,
        (RE ? stan::math::eval(
                (RE_sparse ? stan::math::eval(
                               stan::math::multiply(
                                 stan::model::rvalue(tau, "tau",
                                   stan::model::index_uni(1)),
                                 stan::math::csr_matrix_times_vector(n_delta,
                                   n_delta, RE_L_w, RE_L_v, RE_L_u, u_delta))) : 
                stan::math::eval(
                  stan::math::multiply(
                    stan::math::multiply(
                      stan::model::rvalue(tau, "tau",
                        stan::model::index_uni(1)), RE_L), u_delta)))) : 
        stan::math::eval(u_delta)), "assigning variable f_delta");
      Eigen::Matrix<local_scalar_t__,-1,1> allbeta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nX, DUMMY_VAR__);
      current_statement__ = 18;
      stan::model::assign(allbeta,
        (QR ? stan::math::eval(stan::math::multiply(R_inv, beta_tilde)) : 
        stan::math::eval(beta_tilde)), "assigning variable allbeta");
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(totns, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> d =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d_1dim__, DUMMY_VAR__);
      current_statement__ = 20;
      stan::model::assign(d,
        stan::model::rvalue(allbeta, "allbeta",
          stan::model::index_min_max((totns + 1), ((totns + nt) - 1))),
        "assigning variable d");
      Eigen::Matrix<local_scalar_t__,-1,1> omega =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nodesplit,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_contrast_ii =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eta_agd_contrast_ii_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_contrast_bar =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_agd_contrast,
          DUMMY_VAR__);
      current_statement__ = 35;
      if (totns) {
        current_statement__ = 33;
        stan::model::assign(mu,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_min_max(1, totns)), "assigning variable mu");
      }
      current_statement__ = 38;
      if ((((nX - totns) - (nt - 1)) - nodesplit)) {
        current_statement__ = 36;
        stan::model::assign(beta,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_min(((totns + nt) + nodesplit))),
          "assigning variable beta");
      }
      current_statement__ = 41;
      if (nodesplit) {
        current_statement__ = 39;
        stan::model::assign(omega,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_uni((totns + nt))),
          "assigning variable omega", stan::model::index_uni(1));
      }
      current_statement__ = 55;
      if (ni_ipd) {
        current_statement__ = 53;
        if (RE) {
          current_statement__ = 44;
          stan::math::validate_non_negative_index("eta_ipd_noRE", "ni_ipd",
            ni_ipd);
          Eigen::Matrix<local_scalar_t__,-1,1> eta_ipd_noRE =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_ipd,
              DUMMY_VAR__);
          current_statement__ = 45;
          stan::model::assign(eta_ipd_noRE,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_ipd, beta_tilde),
                              offset_ipd)) : stan::math::eval(
                                               stan::math::multiply(X_ipd,
                                                 beta_tilde))),
            "assigning variable eta_ipd_noRE");
          current_statement__ = 50;
          for (int i = 1; i <= ni_ipd; ++i) {
            current_statement__ = 48;
            if (stan::model::rvalue(which_RE, "which_RE",
                  stan::model::index_uni(
                    stan::model::rvalue(ipd_arm, "ipd_arm",
                      stan::model::index_uni(i))))) {
              current_statement__ = 47;
              stan::model::assign(eta_ipd,
                (stan::model::rvalue(eta_ipd_noRE, "eta_ipd_noRE",
                   stan::model::index_uni(i)) +
                stan::model::rvalue(f_delta, "f_delta",
                  stan::model::index_uni(
                    stan::model::rvalue(which_RE, "which_RE",
                      stan::model::index_uni(
                        stan::model::rvalue(ipd_arm, "ipd_arm",
                          stan::model::index_uni(i))))))),
                "assigning variable eta_ipd", stan::model::index_uni(i));
            } else {
              current_statement__ = 46;
              stan::model::assign(eta_ipd,
                stan::model::rvalue(eta_ipd_noRE, "eta_ipd_noRE",
                  stan::model::index_uni(i)), "assigning variable eta_ipd",
                stan::model::index_uni(i));
            }
          }
        } else {
          current_statement__ = 42;
          stan::model::assign(eta_ipd,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_ipd, beta_tilde),
                              offset_ipd)) : stan::math::eval(
                                               stan::math::multiply(X_ipd,
                                                 beta_tilde))),
            "assigning variable eta_ipd");
        }
      }
      Eigen::Matrix<local_scalar_t__,-1,1> f_class =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(f_class_1dim__,
          DUMMY_VAR__);
      current_statement__ = 59;
      if (class_effects) {
        current_statement__ = 56;
        stan::model::assign(f_class,
          stan::math::add(
            stan::math::subtract(
              stan::model::rvalue(class_mean, "class_mean",
                stan::model::index_multi(
                  stan::model::rvalue(which_CE, "which_CE",
                    stan::model::index_multi(which_class_trt)))),
              stan::model::rvalue(d, "d",
                stan::model::index_multi(which_class_trt))),
            stan::math::elt_multiply(
              stan::model::rvalue(class_sd, "class_sd",
                stan::model::index_multi(
                  stan::model::rvalue(which_CE_sd, "which_CE_sd",
                    stan::model::index_multi(which_class_trt)))), z_class)),
          "assigning variable f_class");
        current_statement__ = 57;
        stan::model::assign(d,
          stan::math::add(
            stan::model::rvalue(class_mean, "class_mean",
              stan::model::index_multi(
                stan::model::rvalue(which_CE, "which_CE",
                  stan::model::index_multi(which_class_trt)))),
            stan::math::elt_multiply(
              stan::model::rvalue(class_sd, "class_sd",
                stan::model::index_multi(
                  stan::model::rvalue(which_CE_sd, "which_CE_sd",
                    stan::model::index_multi(which_class_trt)))), z_class)),
          "assigning variable d", stan::model::index_multi(which_class_trt));
      }
      current_statement__ = 66;
      if (class_effects) {
        current_statement__ = 64;
        for (int i = 1; i <= ni_ipd; ++i) {
          current_statement__ = 62;
          if ((stan::math::primitive_value(
                 stan::math::logical_gt(
                   stan::model::rvalue(ipd_trt, "ipd_trt",
                     stan::model::index_uni(
                       stan::model::rvalue(ipd_arm, "ipd_arm",
                         stan::model::index_uni(i)))), 1))
              &&
              stan::math::primitive_value(
                stan::model::rvalue(which_CE, "which_CE",
                  stan::model::index_uni(
                    (stan::model::rvalue(ipd_trt, "ipd_trt",
                       stan::model::index_uni(
                         stan::model::rvalue(ipd_arm, "ipd_arm",
                           stan::model::index_uni(i)))) - 1)))))) {
            current_statement__ = 60;
            stan::model::assign(eta_ipd,
              (stan::model::rvalue(eta_ipd, "eta_ipd",
                 stan::model::index_uni(i)) +
              stan::model::rvalue(f_class, "f_class",
                stan::model::index_uni(
                  stan::model::rvalue(which_class, "which_class",
                    stan::model::index_uni(
                      stan::model::rvalue(ipd_trt, "ipd_trt",
                        stan::model::index_uni(
                          (stan::model::rvalue(ipd_arm, "ipd_arm",
                             stan::model::index_uni(i)) - 1)))))))),
              "assigning variable eta_ipd", stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 121;
      if (ni_agd_contrast) {
        current_statement__ = 119;
        if (stan::math::logical_gt(nint_max, 1)) {
          current_statement__ = 89;
          stan::math::validate_non_negative_index("eta_agd_contrast_noRE",
            "nint_max * ni_agd_contrast", (nint_max * ni_agd_contrast));
          Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_contrast_noRE =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant((nint_max *
              ni_agd_contrast), DUMMY_VAR__);
          current_statement__ = 90;
          stan::model::assign(eta_agd_contrast_noRE,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_agd_contrast, beta_tilde),
                              offset_agd_contrast)) : stan::math::eval(
                                                        stan::math::multiply(
                                                          X_agd_contrast,
                                                          beta_tilde))),
            "assigning variable eta_agd_contrast_noRE");
          current_statement__ = 100;
          if (class_effects) {
            current_statement__ = 98;
            for (int i = 1; i <= ni_agd_arm; ++i) {
              current_statement__ = 93;
              if ((stan::math::primitive_value(
                     stan::math::logical_gt(
                       stan::model::rvalue(agd_contrast_trt,
                         "agd_contrast_trt", stan::model::index_uni(i)), 1))
                  &&
                  stan::math::primitive_value(
                    stan::model::rvalue(which_CE, "which_CE",
                      stan::model::index_uni(
                        (stan::model::rvalue(agd_contrast_trt,
                           "agd_contrast_trt", stan::model::index_uni(i)) -
                        1)))))) {
                current_statement__ = 91;
                stan::model::assign(eta_agd_contrast_noRE,
                  stan::math::add(
                    stan::model::deep_copy(
                      stan::model::rvalue(eta_agd_contrast_noRE,
                        "eta_agd_contrast_noRE",
                        stan::model::index_min_max((1 + ((i - 1) *
                          nint_max)), (((i - 1) * nint_max) + nint)))),
                    stan::model::rvalue(f_class, "f_class",
                      stan::model::index_uni(
                        stan::model::rvalue(which_class, "which_class",
                          stan::model::index_uni(
                            (stan::model::rvalue(agd_contrast_trt,
                               "agd_contrast_trt", stan::model::index_uni(i))
                            - 1)))))),
                  "assigning variable eta_agd_contrast_noRE",
                  stan::model::index_min_max((1 + ((i - 1) * nint_max)), (((i
                    - 1) * nint_max) + nint)));
              }
              current_statement__ = 96;
              if ((stan::math::primitive_value(
                     stan::math::logical_gt(
                       stan::model::rvalue(agd_contrast_trt_b,
                         "agd_contrast_trt_b", stan::model::index_uni(i)), 1))
                  &&
                  stan::math::primitive_value(
                    stan::model::rvalue(which_CE, "which_CE",
                      stan::model::index_uni(
                        (stan::model::rvalue(agd_contrast_trt_b,
                           "agd_contrast_trt_b", stan::model::index_uni(i)) -
                        1)))))) {
                current_statement__ = 94;
                stan::model::assign(eta_agd_contrast_noRE,
                  stan::math::subtract(
                    stan::model::deep_copy(
                      stan::model::rvalue(eta_agd_contrast_noRE,
                        "eta_agd_contrast_noRE",
                        stan::model::index_min_max((1 + ((i - 1) *
                          nint_max)), (((i - 1) * nint_max) + nint)))),
                    stan::model::rvalue(f_class, "f_class",
                      stan::model::index_uni(
                        stan::model::rvalue(which_class, "which_class",
                          stan::model::index_uni(
                            (stan::model::rvalue(agd_contrast_trt_b,
                               "agd_contrast_trt_b",
                               stan::model::index_uni(i)) - 1)))))),
                  "assigning variable eta_agd_contrast_noRE",
                  stan::model::index_min_max((1 + ((i - 1) * nint_max)), (((i
                    - 1) * nint_max) + nint)));
              }
            }
          }
          current_statement__ = 117;
          if (RE) {
            current_statement__ = 115;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 112;
              if (stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i)))) {
                current_statement__ = 111;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::math::add(
                    stan::model::rvalue(eta_agd_contrast_noRE,
                      "eta_agd_contrast_noRE",
                      stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                        (((i - 1) * nint_max) + nint))),
                    stan::model::rvalue(f_delta, "f_delta",
                      stan::model::index_uni(
                        stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni(((narm_ipd + narm_agd_arm) +
                            i)))))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              } else {
                current_statement__ = 110;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE",
                    stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                      (((i - 1) * nint_max) + nint))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              }
              current_statement__ = 113;
              stan::model::assign(eta_agd_contrast_bar,
                stan::math::mean(
                  stan::model::rvalue(eta_agd_contrast_ii,
                    "eta_agd_contrast_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)))), "assigning variable eta_agd_contrast_bar",
                stan::model::index_uni(i));
            }
          } else {
            current_statement__ = 105;
            if (stan::math::logical_eq(nint, nint_max)) {
              current_statement__ = 104;
              stan::model::assign(eta_agd_contrast_ii, eta_agd_contrast_noRE,
                "assigning variable eta_agd_contrast_ii");
            } else {
              current_statement__ = 103;
              for (int i = 1; i <= ni_agd_contrast; ++i) {
                current_statement__ = 101;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE",
                    stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                      (((i - 1) * nint_max) + nint))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              }
            }
            current_statement__ = 108;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 106;
              stan::model::assign(eta_agd_contrast_bar,
                stan::math::mean(
                  stan::model::rvalue(eta_agd_contrast_ii,
                    "eta_agd_contrast_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)))), "assigning variable eta_agd_contrast_bar",
                stan::model::index_uni(i));
            }
          }
        } else {
          current_statement__ = 77;
          if (RE) {
            current_statement__ = 69;
            stan::math::validate_non_negative_index("eta_agd_contrast_noRE",
              "nint * ni_agd_contrast", (nint * ni_agd_contrast));
            Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_contrast_noRE =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant((nint *
                ni_agd_contrast), DUMMY_VAR__);
            current_statement__ = 70;
            stan::model::assign(eta_agd_contrast_noRE,
              (has_offset ? stan::math::eval(
                              stan::math::add(
                                stan::math::multiply(X_agd_contrast,
                                  beta_tilde), offset_agd_contrast)) : 
              stan::math::eval(
                stan::math::multiply(X_agd_contrast, beta_tilde))),
              "assigning variable eta_agd_contrast_noRE");
            current_statement__ = 75;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 73;
              if (stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i)))) {
                current_statement__ = 72;
                stan::model::assign(eta_agd_contrast_bar,
                  (stan::model::rvalue(eta_agd_contrast_noRE,
                     "eta_agd_contrast_noRE", stan::model::index_uni(i)) +
                  stan::model::rvalue(f_delta, "f_delta",
                    stan::model::index_uni(
                      stan::model::rvalue(which_RE, "which_RE",
                        stan::model::index_uni(((narm_ipd + narm_agd_arm) +
                          i)))))), "assigning variable eta_agd_contrast_bar",
                  stan::model::index_uni(i));
              } else {
                current_statement__ = 71;
                stan::model::assign(eta_agd_contrast_bar,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE", stan::model::index_uni(i)),
                  "assigning variable eta_agd_contrast_bar",
                  stan::model::index_uni(i));
              }
            }
          } else {
            current_statement__ = 67;
            stan::model::assign(eta_agd_contrast_bar,
              (has_offset ? stan::math::eval(
                              stan::math::add(
                                stan::math::multiply(X_agd_contrast,
                                  beta_tilde), offset_agd_contrast)) : 
              stan::math::eval(
                stan::math::multiply(X_agd_contrast, beta_tilde))),
              "assigning variable eta_agd_contrast_bar");
          }
          current_statement__ = 87;
          if (class_effects) {
            current_statement__ = 85;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 80;
              if ((stan::math::primitive_value(
                     stan::math::logical_gt(
                       stan::model::rvalue(agd_contrast_trt,
                         "agd_contrast_trt", stan::model::index_uni(i)), 1))
                  &&
                  stan::math::primitive_value(
                    stan::model::rvalue(which_CE, "which_CE",
                      stan::model::index_uni(
                        (stan::model::rvalue(agd_contrast_trt,
                           "agd_contrast_trt", stan::model::index_uni(i)) -
                        1)))))) {
                current_statement__ = 78;
                stan::model::assign(eta_agd_contrast_bar,
                  (stan::model::rvalue(eta_agd_contrast_bar,
                     "eta_agd_contrast_bar", stan::model::index_uni(i)) +
                  stan::model::rvalue(f_class, "f_class",
                    stan::model::index_uni(
                      stan::model::rvalue(which_class, "which_class",
                        stan::model::index_uni(
                          (stan::model::rvalue(agd_contrast_trt,
                             "agd_contrast_trt", stan::model::index_uni(i)) -
                          1)))))), "assigning variable eta_agd_contrast_bar",
                  stan::model::index_uni(i));
              }
              current_statement__ = 83;
              if ((stan::math::primitive_value(
                     stan::math::logical_gt(
                       stan::model::rvalue(agd_contrast_trt_b,
                         "agd_contrast_trt_b", stan::model::index_uni(i)), 1))
                  &&
                  stan::math::primitive_value(
                    stan::model::rvalue(which_CE, "which_CE",
                      stan::model::index_uni(
                        (stan::model::rvalue(agd_contrast_trt_b,
                           "agd_contrast_trt_b", stan::model::index_uni(i)) -
                        1)))))) {
                current_statement__ = 81;
                stan::model::assign(eta_agd_contrast_bar,
                  (stan::model::rvalue(eta_agd_contrast_bar,
                     "eta_agd_contrast_bar", stan::model::index_uni(i)) -
                  stan::model::rvalue(f_class, "f_class",
                    stan::model::index_uni(
                      stan::model::rvalue(which_class, "which_class",
                        stan::model::index_uni(
                          (stan::model::rvalue(agd_contrast_trt_b,
                             "agd_contrast_trt_b", stan::model::index_uni(i))
                          - 1)))))),
                  "assigning variable eta_agd_contrast_bar",
                  stan::model::index_uni(i));
              }
            }
          }
        }
      }
      current_statement__ = 138;
      if (nX_aux) {
        current_statement__ = 136;
        if (aux_reg_trt) {
          current_statement__ = 126;
          stan::math::validate_non_negative_index("ucorr_beta_aux", "nt", nt);
          current_statement__ = 127;
          stan::math::validate_non_negative_index("ucorr_beta_aux",
            "n_scoef - 1", (n_scoef - 1));
          Eigen::Matrix<local_scalar_t__,-1,-1> ucorr_beta_aux =
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nt, (n_scoef -
              1), DUMMY_VAR__);
          current_statement__ = 128;
          stan::model::assign(ucorr_beta_aux,
            stan::math::multiply(sigma_beta_L,
              stan::model::rvalue(u_beta_aux, "u_beta_aux",
                stan::model::index_min_max(1, nt), stan::model::index_omni())),
            "assigning variable ucorr_beta_aux");
          current_statement__ = 131;
          for (int i = 1; i <= nt; ++i) {
            current_statement__ = 129;
            stan::model::assign(beta_aux,
              stan::math::multiply(
                stan::math::cumulative_sum(
                  stan::math::elt_multiply(
                    stan::model::rvalue(ucorr_beta_aux, "ucorr_beta_aux",
                      stan::model::index_uni(i), stan::model::index_omni()),
                    stan::math::to_row_vector(
                      stan::model::rvalue(lscoef_weight, "lscoef_weight",
                        stan::model::index_uni(1))))),
                stan::model::rvalue(sigma_beta, "sigma_beta",
                  stan::model::index_uni(1))), "assigning variable beta_aux",
              stan::model::index_uni(i), stan::model::index_omni());
          }
          current_statement__ = 134;
          for (int i = (nt + 1); i <= nX_aux; ++i) {
            current_statement__ = 132;
            stan::model::assign(beta_aux,
              stan::math::multiply(
                stan::math::cumulative_sum(
                  stan::math::elt_multiply(
                    stan::model::rvalue(u_beta_aux, "u_beta_aux",
                      stan::model::index_uni(i), stan::model::index_omni()),
                    stan::math::to_row_vector(
                      stan::model::rvalue(lscoef_weight, "lscoef_weight",
                        stan::model::index_uni(1))))),
                stan::model::rvalue(sigma_beta, "sigma_beta",
                  stan::model::index_uni(((1 + i) - nt)))),
              "assigning variable beta_aux", stan::model::index_uni(i),
              stan::model::index_omni());
          }
        } else {
          current_statement__ = 124;
          for (int i = 1; i <= nX_aux; ++i) {
            current_statement__ = 122;
            stan::model::assign(beta_aux,
              stan::math::multiply(
                stan::math::cumulative_sum(
                  stan::math::elt_multiply(
                    stan::model::rvalue(u_beta_aux, "u_beta_aux",
                      stan::model::index_uni(i), stan::model::index_omni()),
                    stan::math::to_row_vector(
                      stan::model::rvalue(lscoef_weight, "lscoef_weight",
                        stan::model::index_uni(1))))),
                stan::model::rvalue(sigma_beta, "sigma_beta",
                  stan::model::index_uni(i))), "assigning variable beta_aux",
              stan::model::index_uni(i), stan::model::index_omni());
          }
        }
      }
      current_statement__ = 148;
      if (nX_aux) {
        current_statement__ = 146;
        for (int i = 1; i <= n_aux; ++i) {
          current_statement__ = 144;
          stan::model::assign(lscoef,
            stan::math::add(
              stan::math::multiply(
                stan::math::cumulative_sum(
                  stan::math::elt_multiply(
                    stan::model::rvalue(u_aux, "u_aux",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(lscoef_weight, "lscoef_weight",
                      stan::model::index_uni(1)))),
                stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i))),
              stan::model::rvalue(prior_aux_location, "prior_aux_location",
                stan::model::index_uni(1))), "assigning variable lscoef",
            stan::model::index_uni(i));
        }
      } else {
        current_statement__ = 142;
        for (int i = 1; i <= n_aux; ++i) {
          current_statement__ = 139;
          stan::model::assign(lscoef,
            stan::math::add(
              stan::math::multiply(
                stan::math::cumulative_sum(
                  stan::math::elt_multiply(
                    stan::model::rvalue(u_aux, "u_aux",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(lscoef_weight, "lscoef_weight",
                      stan::model::index_uni(i)))),
                stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i))),
              stan::model::rvalue(prior_aux_location, "prior_aux_location",
                stan::model::index_uni(i))), "assigning variable lscoef",
            stan::model::index_uni(i));
          current_statement__ = 140;
          stan::model::assign(scoef_temp,
            stan::math::softmax(
              stan::math::append_row(0,
                stan::model::rvalue(lscoef, "lscoef",
                  stan::model::index_uni(i)))),
            "assigning variable scoef_temp", stan::model::index_uni(i));
        }
      }
      current_statement__ = 177;
      if (ni_ipd) {
        current_statement__ = 175;
        if (aux_int) {
          current_statement__ = 164;
          stan::math::validate_non_negative_index("scoef_ipd", "ni_ipd",
            ni_ipd);
          current_statement__ = 165;
          stan::math::validate_non_negative_index("scoef_ipd", "n_scoef",
            n_scoef);
          Eigen::Matrix<local_scalar_t__,-1,-1> scoef_ipd =
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(ni_ipd, n_scoef,
              DUMMY_VAR__);
          current_statement__ = 167;
          stan::math::validate_non_negative_index("Xb_aux", "ni_ipd", ni_ipd);
          current_statement__ = 168;
          stan::math::validate_non_negative_index("Xb_aux", "n_scoef - 1",
            (n_scoef - 1));
          Eigen::Matrix<local_scalar_t__,-1,-1> Xb_aux =
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(ni_ipd, (n_scoef
              - 1), DUMMY_VAR__);
          current_statement__ = 169;
          stan::model::assign(Xb_aux,
            stan::math::multiply(X_aux_ipd, beta_aux),
            "assigning variable Xb_aux");
          current_statement__ = 172;
          for (int i = 1; i <= ni_ipd; ++i) {
            current_statement__ = 170;
            stan::model::assign(scoef_ipd,
              stan::math::to_row_vector(
                stan::math::softmax(
                  stan::math::append_row(0,
                    stan::math::add(
                      stan::model::rvalue(lscoef, "lscoef",
                        stan::model::index_uni(
                          stan::model::rvalue(aux_id_ipd, "aux_id_ipd",
                            stan::model::index_uni(i)))),
                      stan::math::to_vector(
                        stan::model::rvalue(Xb_aux, "Xb_aux",
                          stan::model::index_uni(i),
                          stan::model::index_omni())))))),
              "assigning variable scoef_ipd", stan::model::index_uni(i),
              stan::model::index_omni());
          }
          current_statement__ = 173;
          stan::model::assign(log_L_ipd,
            loglik(ipd_time, ipd_itime, ipd_start_itime, ipd_delay_itime,
              ipd_delayed, ipd_status, eta_ipd, scoef_ipd, pstream__),
            "assigning variable log_L_ipd");
        } else {
          current_statement__ = 162;
          for (int i = 1; i <= n_aux_group; ++i) {
            int ni = std::numeric_limits<int>::min();
            current_statement__ = 149;
            ni = stan::model::rvalue(ni_aux_group_ipd, "ni_aux_group_ipd",
                   stan::model::index_uni(i));
            current_statement__ = 160;
            if (ni) {
              current_statement__ = 150;
              stan::math::validate_non_negative_index("wi", "ni", ni);
              std::vector<int> wi =
                std::vector<int>(ni, std::numeric_limits<int>::min());
              current_statement__ = 151;
              stan::model::assign(wi,
                stan::model::rvalue(wi_aux_group_ipd, "wi_aux_group_ipd",
                  stan::model::index_uni(i),
                  stan::model::index_min_max(1, ni)), "assigning variable wi");
              current_statement__ = 158;
              if (nX_aux) {
                current_statement__ = 154;
                stan::math::validate_non_negative_index("Xb_auxi",
                  "n_scoef - 1", (n_scoef - 1));
                Eigen::Matrix<local_scalar_t__,1,-1> Xb_auxi =
                  Eigen::Matrix<local_scalar_t__,1,-1>::Constant((n_scoef -
                    1), DUMMY_VAR__);
                current_statement__ = 155;
                stan::model::assign(Xb_auxi,
                  stan::math::multiply(
                    stan::model::rvalue(X_aux_ipd, "X_aux_ipd",
                      stan::model::index_uni(
                        stan::model::rvalue(wi, "wi",
                          stan::model::index_uni(1))),
                      stan::model::index_omni()), beta_aux),
                  "assigning variable Xb_auxi");
                current_statement__ = 156;
                stan::model::assign(log_L_ipd,
                  loglik2(
                    stan::model::rvalue(ipd_time, "ipd_time",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_itime, "ipd_itime",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_start_itime, "ipd_start_itime",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_delay_itime, "ipd_delay_itime",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_delayed, "ipd_delayed",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_status, "ipd_status",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(eta_ipd, "eta_ipd",
                      stan::model::index_multi(wi)),
                    stan::math::softmax(
                      stan::math::append_row(0,
                        stan::math::add(
                          stan::model::rvalue(lscoef, "lscoef",
                            stan::model::index_uni(
                              stan::model::rvalue(aux_id_ipd, "aux_id_ipd",
                                stan::model::index_uni(
                                  stan::model::rvalue(wi, "wi",
                                    stan::model::index_uni(1)))))),
                          stan::math::to_vector(Xb_auxi)))), pstream__),
                  "assigning variable log_L_ipd",
                  stan::model::index_multi(wi));
              } else {
                current_statement__ = 152;
                stan::model::assign(log_L_ipd,
                  loglik2(
                    stan::model::rvalue(ipd_time, "ipd_time",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_itime, "ipd_itime",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_start_itime, "ipd_start_itime",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_delay_itime, "ipd_delay_itime",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_delayed, "ipd_delayed",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_status, "ipd_status",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(eta_ipd, "eta_ipd",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(scoef_temp, "scoef_temp",
                      stan::model::index_uni(i)), pstream__),
                  "assigning variable log_L_ipd",
                  stan::model::index_multi(wi));
              }
            }
          }
        }
      }
      current_statement__ = 273;
      if (ni_agd_arm) {
        current_statement__ = 178;
        stan::math::validate_non_negative_index("eta_agd_arm_noRE",
          "nint_max * ni_agd_arm", (nint_max * ni_agd_arm));
        Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_arm_noRE =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((nint_max *
            ni_agd_arm), DUMMY_VAR__);
        current_statement__ = 179;
        stan::model::assign(eta_agd_arm_noRE,
          (has_offset ? stan::math::eval(
                          stan::math::add(
                            stan::math::multiply(X_agd_arm, beta_tilde),
                            offset_agd_arm)) : stan::math::eval(
                                                 stan::math::multiply(
                                                   X_agd_arm, beta_tilde))),
          "assigning variable eta_agd_arm_noRE");
        current_statement__ = 186;
        if (class_effects) {
          current_statement__ = 184;
          for (int i = 1; i <= ni_agd_arm; ++i) {
            current_statement__ = 182;
            if ((stan::math::primitive_value(
                   stan::math::logical_gt(
                     stan::model::rvalue(agd_arm_trt, "agd_arm_trt",
                       stan::model::index_uni(i)), 1))
                &&
                stan::math::primitive_value(
                  stan::model::rvalue(which_CE, "which_CE",
                    stan::model::index_uni(
                      (stan::model::rvalue(agd_arm_trt, "agd_arm_trt",
                         stan::model::index_uni(i)) - 1)))))) {
              current_statement__ = 180;
              stan::model::assign(eta_agd_arm_noRE,
                stan::math::add(
                  stan::model::deep_copy(
                    stan::model::rvalue(eta_agd_arm_noRE, "eta_agd_arm_noRE",
                      stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                        (((i - 1) * nint_max) + nint)))),
                  stan::model::rvalue(f_class, "f_class",
                    stan::model::index_uni(
                      stan::model::rvalue(which_class, "which_class",
                        stan::model::index_uni(
                          (stan::model::rvalue(agd_arm_trt, "agd_arm_trt",
                             stan::model::index_uni(i)) - 1)))))),
                "assigning variable eta_agd_arm_noRE",
                stan::model::index_min_max((1 + ((i - 1) * nint_max)), (((i -
                  1) * nint_max) + nint)));
            }
          }
        }
        current_statement__ = 271;
        if (stan::math::logical_gt(nint_max, 1)) {
          current_statement__ = 269;
          if (aux_int) {
            current_statement__ = 267;
            for (int i = 1; i <= ni_agd_arm; ++i) {
              current_statement__ = 248;
              stan::math::validate_non_negative_index("eta_agd_arm_ii",
                "nint", nint);
              Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_arm_ii =
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nint,
                  DUMMY_VAR__);
              current_statement__ = 250;
              stan::math::validate_non_negative_index("log_L_ii", "nint",
                nint);
              Eigen::Matrix<local_scalar_t__,-1,1> log_L_ii =
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nint,
                  DUMMY_VAR__);
              current_statement__ = 252;
              stan::math::validate_non_negative_index("Xb_aux", "nint", nint);
              current_statement__ = 253;
              stan::math::validate_non_negative_index("Xb_aux",
                "n_scoef - 1", (n_scoef - 1));
              Eigen::Matrix<local_scalar_t__,-1,-1> Xb_aux =
                Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nint,
                  (n_scoef - 1), DUMMY_VAR__);
              current_statement__ = 254;
              stan::model::assign(Xb_aux,
                stan::math::multiply(
                  stan::model::rvalue(X_aux_agd_arm, "X_aux_agd_arm",
                    stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                      (((i - 1) * nint_max) + nint)),
                    stan::model::index_omni()), beta_aux),
                "assigning variable Xb_aux");
              current_statement__ = 255;
              stan::math::validate_non_negative_index("scoef_agd_arm",
                "nint", nint);
              current_statement__ = 256;
              stan::math::validate_non_negative_index("scoef_agd_arm",
                "n_scoef", n_scoef);
              Eigen::Matrix<local_scalar_t__,-1,-1> scoef_agd_arm =
                Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nint,
                  n_scoef, DUMMY_VAR__);
              current_statement__ = 258;
              stan::model::assign(eta_agd_arm_ii,
                stan::model::rvalue(eta_agd_arm_noRE, "eta_agd_arm_noRE",
                  stan::model::index_min_max((1 + ((i - 1) * nint_max)), (((i
                    - 1) * nint_max) + nint))),
                "assigning variable eta_agd_arm_ii");
              current_statement__ = 260;
              if ((stan::math::primitive_value(RE) &&
                  stan::math::primitive_value(
                    stan::model::rvalue(which_RE, "which_RE",
                      stan::model::index_uni((narm_ipd +
                        stan::model::rvalue(agd_arm_arm, "agd_arm_arm",
                          stan::model::index_uni(i)))))))) {
                current_statement__ = 259;
                stan::model::assign(eta_agd_arm_ii,
                  stan::math::add(stan::model::deep_copy(eta_agd_arm_ii),
                    stan::model::rvalue(f_delta, "f_delta",
                      stan::model::index_uni(
                        stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni((narm_ipd +
                            stan::model::rvalue(agd_arm_arm, "agd_arm_arm",
                              stan::model::index_uni(i)))))))),
                  "assigning variable eta_agd_arm_ii");
              }
              current_statement__ = 263;
              for (int j = 1; j <= nint; ++j) {
                current_statement__ = 261;
                stan::model::assign(scoef_agd_arm,
                  stan::math::to_row_vector(
                    stan::math::softmax(
                      stan::math::append_row(0,
                        stan::math::add(
                          stan::model::rvalue(lscoef, "lscoef",
                            stan::model::index_uni(
                              stan::model::rvalue(aux_id_agd_arm,
                                "aux_id_agd_arm",
                                stan::model::index_uni((((i - 1) * nint_max)
                                  + j))))),
                          stan::math::to_vector(
                            stan::model::rvalue(Xb_aux, "Xb_aux",
                              stan::model::index_uni(j),
                              stan::model::index_omni())))))),
                  "assigning variable scoef_agd_arm",
                  stan::model::index_uni(j), stan::model::index_omni());
              }
              current_statement__ = 264;
              stan::model::assign(log_L_ii,
                loglik_a(
                  stan::model::rvalue(agd_arm_time, "agd_arm_time",
                    stan::model::index_uni(i)),
                  stan::model::rvalue(agd_arm_itime, "agd_arm_itime",
                    stan::model::index_uni(i)),
                  stan::model::rvalue(agd_arm_start_itime,
                    "agd_arm_start_itime", stan::model::index_uni(i)),
                  stan::model::rvalue(agd_arm_delay_itime,
                    "agd_arm_delay_itime", stan::model::index_uni(i)),
                  stan::model::rvalue(agd_arm_delayed, "agd_arm_delayed",
                    stan::model::index_uni(i)),
                  stan::model::rvalue(agd_arm_status, "agd_arm_status",
                    stan::model::index_uni(i)), eta_agd_arm_ii,
                  scoef_agd_arm, pstream__), "assigning variable log_L_ii");
              current_statement__ = 265;
              stan::model::assign(log_L_agd_arm,
                (stan::math::log_sum_exp(log_L_ii) - stan::math::log(nint)),
                "assigning variable log_L_agd_arm", stan::model::index_uni(i));
            }
          } else {
            current_statement__ = 246;
            for (int i = 1; i <= n_aux_group; ++i) {
              int ni = std::numeric_limits<int>::min();
              current_statement__ = 222;
              ni = stan::model::rvalue(ni_aux_group_agd_arm,
                     "ni_aux_group_agd_arm", stan::model::index_uni(i));
              current_statement__ = 244;
              if (ni) {
                current_statement__ = 223;
                stan::math::validate_non_negative_index("wi", "ni", ni);
                std::vector<int> wi =
                  std::vector<int>(ni, std::numeric_limits<int>::min());
                current_statement__ = 224;
                stan::model::assign(wi,
                  stan::model::rvalue(wi_aux_group_agd_arm,
                    "wi_aux_group_agd_arm", stan::model::index_uni(i),
                    stan::model::index_min_max(1, ni)),
                  "assigning variable wi");
                current_statement__ = 225;
                stan::math::validate_non_negative_index("Xb_auxi",
                  "n_scoef - 1", (n_scoef - 1));
                Eigen::Matrix<local_scalar_t__,1,-1> Xb_auxi =
                  Eigen::Matrix<local_scalar_t__,1,-1>::Constant((n_scoef -
                    1), DUMMY_VAR__);
                current_statement__ = 226;
                stan::model::assign(Xb_auxi,
                  stan::math::multiply(
                    stan::model::rvalue(X_aux_agd_arm, "X_aux_agd_arm",
                      stan::model::index_uni(
                        stan::model::rvalue(wi, "wi",
                          stan::model::index_uni(1))),
                      stan::model::index_omni()), beta_aux),
                  "assigning variable Xb_auxi");
                current_statement__ = 227;
                stan::math::validate_non_negative_index("scoef_agd_arm",
                  "n_scoef", n_scoef);
                Eigen::Matrix<local_scalar_t__,-1,1> scoef_agd_arm =
                  Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_scoef,
                    DUMMY_VAR__);
                current_statement__ = 231;
                if (nX_aux) {
                  current_statement__ = 230;
                  stan::model::assign(scoef_agd_arm,
                    stan::math::softmax(
                      stan::math::append_row(0,
                        stan::math::add(
                          stan::model::rvalue(lscoef, "lscoef",
                            stan::model::index_uni(
                              stan::model::rvalue(aux_id_agd_arm,
                                "aux_id_agd_arm",
                                stan::model::index_uni(
                                  stan::model::rvalue(wi, "wi",
                                    stan::model::index_uni(1)))))),
                          stan::math::to_vector(Xb_auxi)))),
                    "assigning variable scoef_agd_arm");
                } else {
                  current_statement__ = 229;
                  stan::model::assign(scoef_agd_arm,
                    stan::model::rvalue(scoef_temp, "scoef_temp",
                      stan::model::index_uni(i)),
                    "assigning variable scoef_agd_arm");
                }
                current_statement__ = 242;
                for (int j = 1; j <= ni; ++j) {
                  current_statement__ = 232;
                  stan::math::validate_non_negative_index("eta_agd_arm_ii",
                    "nint", nint);
                  Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_arm_ii =
                    Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nint,
                      DUMMY_VAR__);
                  current_statement__ = 234;
                  stan::math::validate_non_negative_index("log_L_ii", "nint",
                    nint);
                  Eigen::Matrix<local_scalar_t__,-1,1> log_L_ii =
                    Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nint,
                      DUMMY_VAR__);
                  current_statement__ = 236;
                  stan::model::assign(eta_agd_arm_ii,
                    stan::model::rvalue(eta_agd_arm_noRE, "eta_agd_arm_noRE",
                      stan::model::index_min_max((1 +
                        ((stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)) - 1) * nint_max)),
                        (((stan::model::rvalue(wi, "wi",
                             stan::model::index_uni(j)) - 1) * nint_max) +
                        nint))), "assigning variable eta_agd_arm_ii");
                  current_statement__ = 238;
                  if ((stan::math::primitive_value(RE) &&
                      stan::math::primitive_value(
                        stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni((narm_ipd +
                            stan::model::rvalue(agd_arm_arm, "agd_arm_arm",
                              stan::model::index_uni(
                                stan::model::rvalue(wi, "wi",
                                  stan::model::index_uni(j)))))))))) {
                    current_statement__ = 237;
                    stan::model::assign(eta_agd_arm_ii,
                      stan::math::add(stan::model::deep_copy(eta_agd_arm_ii),
                        stan::model::rvalue(f_delta, "f_delta",
                          stan::model::index_uni(
                            stan::model::rvalue(which_RE, "which_RE",
                              stan::model::index_uni((narm_ipd +
                                stan::model::rvalue(agd_arm_arm,
                                  "agd_arm_arm",
                                  stan::model::index_uni(
                                    stan::model::rvalue(wi, "wi",
                                      stan::model::index_uni(j)))))))))),
                      "assigning variable eta_agd_arm_ii");
                  }
                  current_statement__ = 239;
                  stan::model::assign(log_L_ii,
                    loglik_a2(
                      stan::model::rvalue(agd_arm_time, "agd_arm_time",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))),
                      stan::model::rvalue(agd_arm_itime, "agd_arm_itime",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))),
                      stan::model::rvalue(agd_arm_start_itime,
                        "agd_arm_start_itime",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))),
                      stan::model::rvalue(agd_arm_delay_itime,
                        "agd_arm_delay_itime",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))),
                      stan::model::rvalue(agd_arm_delayed, "agd_arm_delayed",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))),
                      stan::model::rvalue(agd_arm_status, "agd_arm_status",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))), eta_agd_arm_ii,
                      scoef_agd_arm, pstream__),
                    "assigning variable log_L_ii");
                  current_statement__ = 240;
                  stan::model::assign(log_L_agd_arm,
                    (stan::math::log_sum_exp(log_L_ii) -
                    stan::math::log(nint)),
                    "assigning variable log_L_agd_arm",
                    stan::model::index_uni(
                      stan::model::rvalue(wi, "wi", stan::model::index_uni(j))));
                }
              }
            }
          }
        } else {
          current_statement__ = 187;
          stan::math::validate_non_negative_index("eta_agd_arm",
            "ni_agd_arm", ni_agd_arm);
          Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_arm =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_agd_arm,
              DUMMY_VAR__);
          current_statement__ = 188;
          stan::model::assign(eta_agd_arm, eta_agd_arm_noRE,
            "assigning variable eta_agd_arm");
          current_statement__ = 193;
          if (RE) {
            current_statement__ = 192;
            for (int i = 1; i <= ni_agd_arm; ++i) {
              current_statement__ = 190;
              if (stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni((narm_ipd +
                      stan::model::rvalue(agd_arm_arm, "agd_arm_arm",
                        stan::model::index_uni(i)))))) {
                current_statement__ = 189;
                stan::model::assign(eta_agd_arm,
                  (stan::model::rvalue(eta_agd_arm, "eta_agd_arm",
                     stan::model::index_uni(i)) +
                  stan::model::rvalue(f_delta, "f_delta",
                    stan::model::index_uni(
                      stan::model::rvalue(which_RE, "which_RE",
                        stan::model::index_uni((narm_ipd +
                          stan::model::rvalue(agd_arm_arm, "agd_arm_arm",
                            stan::model::index_uni(i)))))))),
                  "assigning variable eta_agd_arm", stan::model::index_uni(i));
              }
            }
          }
          current_statement__ = 220;
          if (aux_int) {
            current_statement__ = 209;
            stan::math::validate_non_negative_index("scoef_agd_arm",
              "ni_agd_arm", ni_agd_arm);
            current_statement__ = 210;
            stan::math::validate_non_negative_index("scoef_agd_arm",
              "n_scoef", n_scoef);
            Eigen::Matrix<local_scalar_t__,-1,-1> scoef_agd_arm =
              Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(ni_agd_arm,
                n_scoef, DUMMY_VAR__);
            current_statement__ = 212;
            stan::math::validate_non_negative_index("Xb_aux", "ni_agd_arm",
              ni_agd_arm);
            current_statement__ = 213;
            stan::math::validate_non_negative_index("Xb_aux", "n_scoef - 1",
              (n_scoef - 1));
            Eigen::Matrix<local_scalar_t__,-1,-1> Xb_aux =
              Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(ni_agd_arm,
                (n_scoef - 1), DUMMY_VAR__);
            current_statement__ = 214;
            stan::model::assign(Xb_aux,
              stan::math::multiply(X_aux_agd_arm, beta_aux),
              "assigning variable Xb_aux");
            current_statement__ = 217;
            for (int i = 1; i <= ni_agd_arm; ++i) {
              current_statement__ = 215;
              stan::model::assign(scoef_agd_arm,
                stan::math::to_row_vector(
                  stan::math::softmax(
                    stan::math::append_row(0,
                      stan::math::add(
                        stan::model::rvalue(lscoef, "lscoef",
                          stan::model::index_uni(
                            stan::model::rvalue(aux_id_agd_arm,
                              "aux_id_agd_arm", stan::model::index_uni(i)))),
                        stan::math::to_vector(
                          stan::model::rvalue(Xb_aux, "Xb_aux",
                            stan::model::index_uni(i),
                            stan::model::index_omni())))))),
                "assigning variable scoef_agd_arm",
                stan::model::index_uni(i), stan::model::index_omni());
            }
            current_statement__ = 218;
            stan::model::assign(log_L_agd_arm,
              loglik(agd_arm_time, agd_arm_itime, agd_arm_start_itime,
                agd_arm_delay_itime, agd_arm_delayed, agd_arm_status,
                eta_agd_arm, scoef_agd_arm, pstream__),
              "assigning variable log_L_agd_arm");
          } else {
            current_statement__ = 207;
            for (int i = 1; i <= n_aux_group; ++i) {
              int ni = std::numeric_limits<int>::min();
              current_statement__ = 194;
              ni = stan::model::rvalue(ni_aux_group_agd_arm,
                     "ni_aux_group_agd_arm", stan::model::index_uni(i));
              current_statement__ = 205;
              if (ni) {
                current_statement__ = 195;
                stan::math::validate_non_negative_index("wi", "ni", ni);
                std::vector<int> wi =
                  std::vector<int>(ni, std::numeric_limits<int>::min());
                current_statement__ = 196;
                stan::model::assign(wi,
                  stan::model::rvalue(wi_aux_group_agd_arm,
                    "wi_aux_group_agd_arm", stan::model::index_uni(i),
                    stan::model::index_min_max(1, ni)),
                  "assigning variable wi");
                current_statement__ = 203;
                if (nX_aux) {
                  current_statement__ = 199;
                  stan::math::validate_non_negative_index("Xb_auxi",
                    "n_scoef - 1", (n_scoef - 1));
                  Eigen::Matrix<local_scalar_t__,1,-1> Xb_auxi =
                    Eigen::Matrix<local_scalar_t__,1,-1>::Constant((n_scoef -
                      1), DUMMY_VAR__);
                  current_statement__ = 200;
                  stan::model::assign(Xb_auxi,
                    stan::math::multiply(
                      stan::model::rvalue(X_aux_agd_arm, "X_aux_agd_arm",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(1))),
                        stan::model::index_omni()), beta_aux),
                    "assigning variable Xb_auxi");
                  current_statement__ = 201;
                  stan::model::assign(log_L_agd_arm,
                    loglik2(
                      stan::model::rvalue(agd_arm_time, "agd_arm_time",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_itime, "agd_arm_itime",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_start_itime,
                        "agd_arm_start_itime", stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_delay_itime,
                        "agd_arm_delay_itime", stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_delayed, "agd_arm_delayed",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_status, "agd_arm_status",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(eta_agd_arm, "eta_agd_arm",
                        stan::model::index_multi(wi)),
                      stan::math::softmax(
                        stan::math::append_row(0,
                          stan::math::add(
                            stan::model::rvalue(lscoef, "lscoef",
                              stan::model::index_uni(
                                stan::model::rvalue(aux_id_agd_arm,
                                  "aux_id_agd_arm",
                                  stan::model::index_uni(
                                    stan::model::rvalue(wi, "wi",
                                      stan::model::index_uni(1)))))),
                            stan::math::to_vector(Xb_auxi)))), pstream__),
                    "assigning variable log_L_agd_arm",
                    stan::model::index_multi(wi));
                } else {
                  current_statement__ = 197;
                  stan::model::assign(log_L_agd_arm,
                    loglik2(
                      stan::model::rvalue(agd_arm_time, "agd_arm_time",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_itime, "agd_arm_itime",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_start_itime,
                        "agd_arm_start_itime", stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_delay_itime,
                        "agd_arm_delay_itime", stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_delayed, "agd_arm_delayed",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_status, "agd_arm_status",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(eta_agd_arm, "eta_agd_arm",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(scoef_temp, "scoef_temp",
                        stan::model::index_uni(i)), pstream__),
                    "assigning variable log_L_agd_arm",
                    stan::model::index_multi(wi));
                }
              }
            }
          }
        }
      }
      {
        current_statement__ = 319;
        prior_select_lp<propto__>(mu, prior_intercept_dist,
          prior_intercept_location, prior_intercept_scale,
          prior_intercept_df, lp__, lp_accum__, pstream__);
        current_statement__ = 325;
        if (stan::math::logical_eq(class_effects, 0)) {
          current_statement__ = 323;
          prior_select_lp<propto__>(d, prior_trt_dist, prior_trt_location,
            prior_trt_scale, prior_trt_df, lp__, lp_accum__, pstream__);
        } else {
          current_statement__ = 320;
          prior_select_lp<propto__>(class_mean, prior_class_mean_dist,
            prior_class_mean_location, prior_class_mean_scale,
            prior_class_mean_df, lp__, lp_accum__, pstream__);
          current_statement__ = 321;
          prior_select_lp<propto__>(class_sd, prior_class_sd_dist,
            prior_class_sd_location, prior_class_sd_scale, prior_class_sd_df,
            lp__, lp_accum__, pstream__);
        }
        current_statement__ = 326;
        prior_select_lp<propto__>(beta, prior_reg_dist, prior_reg_location,
          prior_reg_scale, prior_reg_df, lp__, lp_accum__, pstream__);
        current_statement__ = 327;
        prior_select_lp<propto__>(omega, prior_trt_dist, prior_trt_location,
          prior_trt_scale, prior_trt_df, lp__, lp_accum__, pstream__);
        current_statement__ = 345;
        if (RE) {
          current_statement__ = 343;
          if (stan::math::logical_eq(prior_het_type, 1)) {
            current_statement__ = 341;
            prior_select_lp<propto__>(tau, prior_het_dist,
              prior_het_location, prior_het_scale, prior_het_df, lp__,
              lp_accum__, pstream__);
          } else {
            current_statement__ = 328;
            stan::math::validate_non_negative_index("tau_t", "RE ? 1 : 0",
              (RE ? 1 : 0));
            Eigen::Matrix<local_scalar_t__,-1,1> tau_t =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant((RE ? 1 : 0),
                DUMMY_VAR__);
            current_statement__ = 337;
            if (stan::math::logical_eq(prior_het_type, 2)) {
              current_statement__ = 334;
              stan::model::assign(tau_t,
                stan::math::pow(
                  stan::model::rvalue(tau, "tau", stan::model::index_uni(1)),
                  2), "assigning variable tau_t", stan::model::index_uni(1));
              current_statement__ = 335;
              lp_accum__.add(stan::math::log(tau));
            } else {
              current_statement__ = 333;
              if (stan::math::logical_eq(prior_het_type, 3)) {
                current_statement__ = 330;
                stan::model::assign(tau_t,
                  stan::math::pow(
                    stan::model::rvalue(tau, "tau", stan::model::index_uni(1)),
                    -2), "assigning variable tau_t",
                  stan::model::index_uni(1));
                current_statement__ = 331;
                lp_accum__.add(stan::math::multiply(-3, stan::math::log(tau)));
              }
            }
            current_statement__ = 338;
            prior_select_lp<propto__>(tau_t, prior_het_dist,
              prior_het_location, prior_het_scale, prior_het_df, lp__,
              lp_accum__, pstream__);
          }
        }
        current_statement__ = 346;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(u_delta));
        current_statement__ = 349;
        if (ni_agd_contrast) {
          current_statement__ = 347;
          lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(
                           agd_contrast_y, eta_agd_contrast_bar,
                           agd_contrast_Sigma));
        }
        current_statement__ = 358;
        if (class_effects) {
          current_statement__ = 356;
          for (int t = 1; t <= (nt - 1); ++t) {
            current_statement__ = 354;
            if (stan::math::logical_eq(
                  stan::model::rvalue(which_CE, "which_CE",
                    stan::model::index_uni(t)), 0)) {
              current_statement__ = 352;
              prior_select2_lp<propto__>(
                stan::model::rvalue(d, "d", stan::model::index_uni(t)),
                prior_trt_dist, prior_trt_location, prior_trt_scale,
                prior_trt_df, lp__, lp_accum__, pstream__);
            } else {
              current_statement__ = 350;
              lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                               stan::model::rvalue(allbeta, "allbeta",
                                 stan::model::index_uni((totns + t)))));
            }
          }
        }
        current_statement__ = 359;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(z_class));
        current_statement__ = 361;
        for (int i = 1; i <= n_aux; ++i) {
          current_statement__ = 360;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(u_aux, "u_aux",
                             stan::model::index_uni(i))));
        }
        current_statement__ = 362;
        prior_select_lp<propto__>(sigma, prior_hyper_dist,
          prior_hyper_location, prior_hyper_scale, prior_hyper_df, lp__,
          lp_accum__, pstream__);
        current_statement__ = 364;
        for (int i = 1; i <= nX_aux; ++i) {
          current_statement__ = 363;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(u_beta_aux, "u_beta_aux",
                             stan::model::index_uni(i))));
        }
        current_statement__ = 365;
        prior_select_lp<propto__>(sigma_beta, prior_reg_hyper_dist,
          prior_reg_hyper_location, prior_reg_hyper_scale,
          prior_reg_hyper_df, lp__, lp_accum__, pstream__);
        current_statement__ = 366;
        lp_accum__.add(log_L_ipd);
        current_statement__ = 367;
        lp_accum__.add(log_L_agd_arm);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_survival_mspline_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> beta_tilde =
        Eigen::Matrix<double,-1,1>::Constant(nX,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta_tilde = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(nX);
      Eigen::Matrix<double,-1,1> u_delta =
        Eigen::Matrix<double,-1,1>::Constant(n_delta,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      u_delta = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_delta);
      Eigen::Matrix<double,-1,1> tau =
        Eigen::Matrix<double,-1,1>::Constant(tau_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      tau = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
              tau_1dim__);
      Eigen::Matrix<double,-1,1> class_mean =
        Eigen::Matrix<double,-1,1>::Constant(class_mean_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      class_mean = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(class_mean_1dim__);
      Eigen::Matrix<double,-1,1> class_sd =
        Eigen::Matrix<double,-1,1>::Constant(class_sd_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      class_sd = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   class_sd_1dim__);
      Eigen::Matrix<double,-1,1> z_class =
        Eigen::Matrix<double,-1,1>::Constant(z_class_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      z_class = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(z_class_1dim__);
      Eigen::Matrix<double,-1,-1> u_beta_aux =
        Eigen::Matrix<double,-1,-1>::Constant(nX_aux, u_beta_aux_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      u_beta_aux = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,-1>>(nX_aux,
                     u_beta_aux_2dim__);
      Eigen::Matrix<double,-1,1> sigma_beta =
        Eigen::Matrix<double,-1,1>::Constant(sigma_beta_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      sigma_beta = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     lp__, sigma_beta_1dim__);
      Eigen::Matrix<double,-1,1> sigma =
        Eigen::Matrix<double,-1,1>::Constant(n_aux,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                n_aux);
      std::vector<Eigen::Matrix<double,-1,1>> u_aux =
        std::vector<Eigen::Matrix<double,-1,1>>(n_aux,
          Eigen::Matrix<double,-1,1>::Constant(u_aux_2dim__,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 10;
      u_aux = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(n_aux,
                u_aux_2dim__);
      Eigen::Matrix<double,-1,1> log_L_ipd =
        Eigen::Matrix<double,-1,1>::Constant(ni_ipd,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_L_agd_arm =
        Eigen::Matrix<double,-1,1>::Constant(ni_agd_arm,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,1>> lscoef =
        std::vector<Eigen::Matrix<double,-1,1>>(n_aux,
          Eigen::Matrix<double,-1,1>::Constant(lscoef_2dim__,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> scoef_temp =
        std::vector<Eigen::Matrix<double,-1,1>>(scoef_temp_1dim__,
          Eigen::Matrix<double,-1,1>::Constant(n_scoef,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,-1> beta_aux =
        Eigen::Matrix<double,-1,-1>::Constant(nX_aux, beta_aux_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> eta_ipd =
        Eigen::Matrix<double,-1,1>::Constant(ni_ipd,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> f_delta =
        Eigen::Matrix<double,-1,1>::Constant(n_delta,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> allbeta =
        Eigen::Matrix<double,-1,1>::Constant(nX,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(totns,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> d =
        Eigen::Matrix<double,-1,1>::Constant(d_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> omega =
        Eigen::Matrix<double,-1,1>::Constant(nodesplit,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(beta_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> eta_agd_contrast_ii =
        Eigen::Matrix<double,-1,1>::Constant(eta_agd_contrast_ii_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> eta_agd_contrast_bar =
        Eigen::Matrix<double,-1,1>::Constant(ni_agd_contrast,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> f_class =
        Eigen::Matrix<double,-1,1>::Constant(f_class_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(beta_tilde);
      out__.write(u_delta);
      out__.write(tau);
      out__.write(class_mean);
      out__.write(class_sd);
      out__.write(z_class);
      out__.write(u_beta_aux);
      out__.write(sigma_beta);
      out__.write(sigma);
      for (int sym1__ = 1; sym1__ <= u_aux_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_aux; ++sym2__) {
          out__.write(u_aux[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 17;
      stan::model::assign(f_delta,
        (RE ? stan::math::eval(
                (RE_sparse ? stan::math::eval(
                               stan::math::multiply(
                                 stan::model::rvalue(tau, "tau",
                                   stan::model::index_uni(1)),
                                 stan::math::csr_matrix_times_vector(n_delta,
                                   n_delta, RE_L_w, RE_L_v, RE_L_u, u_delta))) : 
                stan::math::eval(
                  stan::math::multiply(
                    stan::math::multiply(
                      stan::model::rvalue(tau, "tau",
                        stan::model::index_uni(1)), RE_L), u_delta)))) : 
        stan::math::eval(u_delta)), "assigning variable f_delta");
      current_statement__ = 18;
      stan::model::assign(allbeta,
        (QR ? stan::math::eval(stan::math::multiply(R_inv, beta_tilde)) : 
        stan::math::eval(beta_tilde)), "assigning variable allbeta");
      current_statement__ = 20;
      stan::model::assign(d,
        stan::model::rvalue(allbeta, "allbeta",
          stan::model::index_min_max((totns + 1), ((totns + nt) - 1))),
        "assigning variable d");
      current_statement__ = 35;
      if (totns) {
        current_statement__ = 33;
        stan::model::assign(mu,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_min_max(1, totns)), "assigning variable mu");
      }
      current_statement__ = 38;
      if ((((nX - totns) - (nt - 1)) - nodesplit)) {
        current_statement__ = 36;
        stan::model::assign(beta,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_min(((totns + nt) + nodesplit))),
          "assigning variable beta");
      }
      current_statement__ = 41;
      if (nodesplit) {
        current_statement__ = 39;
        stan::model::assign(omega,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_uni((totns + nt))),
          "assigning variable omega", stan::model::index_uni(1));
      }
      current_statement__ = 55;
      if (ni_ipd) {
        current_statement__ = 53;
        if (RE) {
          current_statement__ = 44;
          stan::math::validate_non_negative_index("eta_ipd_noRE", "ni_ipd",
            ni_ipd);
          Eigen::Matrix<double,-1,1> eta_ipd_noRE =
            Eigen::Matrix<double,-1,1>::Constant(ni_ipd,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 45;
          stan::model::assign(eta_ipd_noRE,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_ipd, beta_tilde),
                              offset_ipd)) : stan::math::eval(
                                               stan::math::multiply(X_ipd,
                                                 beta_tilde))),
            "assigning variable eta_ipd_noRE");
          current_statement__ = 50;
          for (int i = 1; i <= ni_ipd; ++i) {
            current_statement__ = 48;
            if (stan::model::rvalue(which_RE, "which_RE",
                  stan::model::index_uni(
                    stan::model::rvalue(ipd_arm, "ipd_arm",
                      stan::model::index_uni(i))))) {
              current_statement__ = 47;
              stan::model::assign(eta_ipd,
                (stan::model::rvalue(eta_ipd_noRE, "eta_ipd_noRE",
                   stan::model::index_uni(i)) +
                stan::model::rvalue(f_delta, "f_delta",
                  stan::model::index_uni(
                    stan::model::rvalue(which_RE, "which_RE",
                      stan::model::index_uni(
                        stan::model::rvalue(ipd_arm, "ipd_arm",
                          stan::model::index_uni(i))))))),
                "assigning variable eta_ipd", stan::model::index_uni(i));
            } else {
              current_statement__ = 46;
              stan::model::assign(eta_ipd,
                stan::model::rvalue(eta_ipd_noRE, "eta_ipd_noRE",
                  stan::model::index_uni(i)), "assigning variable eta_ipd",
                stan::model::index_uni(i));
            }
          }
        } else {
          current_statement__ = 42;
          stan::model::assign(eta_ipd,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_ipd, beta_tilde),
                              offset_ipd)) : stan::math::eval(
                                               stan::math::multiply(X_ipd,
                                                 beta_tilde))),
            "assigning variable eta_ipd");
        }
      }
      current_statement__ = 59;
      if (class_effects) {
        current_statement__ = 56;
        stan::model::assign(f_class,
          stan::math::add(
            stan::math::subtract(
              stan::model::rvalue(class_mean, "class_mean",
                stan::model::index_multi(
                  stan::model::rvalue(which_CE, "which_CE",
                    stan::model::index_multi(which_class_trt)))),
              stan::model::rvalue(d, "d",
                stan::model::index_multi(which_class_trt))),
            stan::math::elt_multiply(
              stan::model::rvalue(class_sd, "class_sd",
                stan::model::index_multi(
                  stan::model::rvalue(which_CE_sd, "which_CE_sd",
                    stan::model::index_multi(which_class_trt)))), z_class)),
          "assigning variable f_class");
        current_statement__ = 57;
        stan::model::assign(d,
          stan::math::add(
            stan::model::rvalue(class_mean, "class_mean",
              stan::model::index_multi(
                stan::model::rvalue(which_CE, "which_CE",
                  stan::model::index_multi(which_class_trt)))),
            stan::math::elt_multiply(
              stan::model::rvalue(class_sd, "class_sd",
                stan::model::index_multi(
                  stan::model::rvalue(which_CE_sd, "which_CE_sd",
                    stan::model::index_multi(which_class_trt)))), z_class)),
          "assigning variable d", stan::model::index_multi(which_class_trt));
      }
      current_statement__ = 66;
      if (class_effects) {
        current_statement__ = 64;
        for (int i = 1; i <= ni_ipd; ++i) {
          current_statement__ = 62;
          if ((stan::math::primitive_value(
                 stan::math::logical_gt(
                   stan::model::rvalue(ipd_trt, "ipd_trt",
                     stan::model::index_uni(
                       stan::model::rvalue(ipd_arm, "ipd_arm",
                         stan::model::index_uni(i)))), 1))
              &&
              stan::math::primitive_value(
                stan::model::rvalue(which_CE, "which_CE",
                  stan::model::index_uni(
                    (stan::model::rvalue(ipd_trt, "ipd_trt",
                       stan::model::index_uni(
                         stan::model::rvalue(ipd_arm, "ipd_arm",
                           stan::model::index_uni(i)))) - 1)))))) {
            current_statement__ = 60;
            stan::model::assign(eta_ipd,
              (stan::model::rvalue(eta_ipd, "eta_ipd",
                 stan::model::index_uni(i)) +
              stan::model::rvalue(f_class, "f_class",
                stan::model::index_uni(
                  stan::model::rvalue(which_class, "which_class",
                    stan::model::index_uni(
                      stan::model::rvalue(ipd_trt, "ipd_trt",
                        stan::model::index_uni(
                          (stan::model::rvalue(ipd_arm, "ipd_arm",
                             stan::model::index_uni(i)) - 1)))))))),
              "assigning variable eta_ipd", stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 121;
      if (ni_agd_contrast) {
        current_statement__ = 119;
        if (stan::math::logical_gt(nint_max, 1)) {
          current_statement__ = 89;
          stan::math::validate_non_negative_index("eta_agd_contrast_noRE",
            "nint_max * ni_agd_contrast", (nint_max * ni_agd_contrast));
          Eigen::Matrix<double,-1,1> eta_agd_contrast_noRE =
            Eigen::Matrix<double,-1,1>::Constant((nint_max *
              ni_agd_contrast), std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 90;
          stan::model::assign(eta_agd_contrast_noRE,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_agd_contrast, beta_tilde),
                              offset_agd_contrast)) : stan::math::eval(
                                                        stan::math::multiply(
                                                          X_agd_contrast,
                                                          beta_tilde))),
            "assigning variable eta_agd_contrast_noRE");
          current_statement__ = 100;
          if (class_effects) {
            current_statement__ = 98;
            for (int i = 1; i <= ni_agd_arm; ++i) {
              current_statement__ = 93;
              if ((stan::math::primitive_value(
                     stan::math::logical_gt(
                       stan::model::rvalue(agd_contrast_trt,
                         "agd_contrast_trt", stan::model::index_uni(i)), 1))
                  &&
                  stan::math::primitive_value(
                    stan::model::rvalue(which_CE, "which_CE",
                      stan::model::index_uni(
                        (stan::model::rvalue(agd_contrast_trt,
                           "agd_contrast_trt", stan::model::index_uni(i)) -
                        1)))))) {
                current_statement__ = 91;
                stan::model::assign(eta_agd_contrast_noRE,
                  stan::math::add(
                    stan::model::deep_copy(
                      stan::model::rvalue(eta_agd_contrast_noRE,
                        "eta_agd_contrast_noRE",
                        stan::model::index_min_max((1 + ((i - 1) *
                          nint_max)), (((i - 1) * nint_max) + nint)))),
                    stan::model::rvalue(f_class, "f_class",
                      stan::model::index_uni(
                        stan::model::rvalue(which_class, "which_class",
                          stan::model::index_uni(
                            (stan::model::rvalue(agd_contrast_trt,
                               "agd_contrast_trt", stan::model::index_uni(i))
                            - 1)))))),
                  "assigning variable eta_agd_contrast_noRE",
                  stan::model::index_min_max((1 + ((i - 1) * nint_max)), (((i
                    - 1) * nint_max) + nint)));
              }
              current_statement__ = 96;
              if ((stan::math::primitive_value(
                     stan::math::logical_gt(
                       stan::model::rvalue(agd_contrast_trt_b,
                         "agd_contrast_trt_b", stan::model::index_uni(i)), 1))
                  &&
                  stan::math::primitive_value(
                    stan::model::rvalue(which_CE, "which_CE",
                      stan::model::index_uni(
                        (stan::model::rvalue(agd_contrast_trt_b,
                           "agd_contrast_trt_b", stan::model::index_uni(i)) -
                        1)))))) {
                current_statement__ = 94;
                stan::model::assign(eta_agd_contrast_noRE,
                  stan::math::subtract(
                    stan::model::deep_copy(
                      stan::model::rvalue(eta_agd_contrast_noRE,
                        "eta_agd_contrast_noRE",
                        stan::model::index_min_max((1 + ((i - 1) *
                          nint_max)), (((i - 1) * nint_max) + nint)))),
                    stan::model::rvalue(f_class, "f_class",
                      stan::model::index_uni(
                        stan::model::rvalue(which_class, "which_class",
                          stan::model::index_uni(
                            (stan::model::rvalue(agd_contrast_trt_b,
                               "agd_contrast_trt_b",
                               stan::model::index_uni(i)) - 1)))))),
                  "assigning variable eta_agd_contrast_noRE",
                  stan::model::index_min_max((1 + ((i - 1) * nint_max)), (((i
                    - 1) * nint_max) + nint)));
              }
            }
          }
          current_statement__ = 117;
          if (RE) {
            current_statement__ = 115;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 112;
              if (stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i)))) {
                current_statement__ = 111;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::math::add(
                    stan::model::rvalue(eta_agd_contrast_noRE,
                      "eta_agd_contrast_noRE",
                      stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                        (((i - 1) * nint_max) + nint))),
                    stan::model::rvalue(f_delta, "f_delta",
                      stan::model::index_uni(
                        stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni(((narm_ipd + narm_agd_arm) +
                            i)))))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              } else {
                current_statement__ = 110;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE",
                    stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                      (((i - 1) * nint_max) + nint))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              }
              current_statement__ = 113;
              stan::model::assign(eta_agd_contrast_bar,
                stan::math::mean(
                  stan::model::rvalue(eta_agd_contrast_ii,
                    "eta_agd_contrast_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)))), "assigning variable eta_agd_contrast_bar",
                stan::model::index_uni(i));
            }
          } else {
            current_statement__ = 105;
            if (stan::math::logical_eq(nint, nint_max)) {
              current_statement__ = 104;
              stan::model::assign(eta_agd_contrast_ii, eta_agd_contrast_noRE,
                "assigning variable eta_agd_contrast_ii");
            } else {
              current_statement__ = 103;
              for (int i = 1; i <= ni_agd_contrast; ++i) {
                current_statement__ = 101;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE",
                    stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                      (((i - 1) * nint_max) + nint))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              }
            }
            current_statement__ = 108;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 106;
              stan::model::assign(eta_agd_contrast_bar,
                stan::math::mean(
                  stan::model::rvalue(eta_agd_contrast_ii,
                    "eta_agd_contrast_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)))), "assigning variable eta_agd_contrast_bar",
                stan::model::index_uni(i));
            }
          }
        } else {
          current_statement__ = 77;
          if (RE) {
            current_statement__ = 69;
            stan::math::validate_non_negative_index("eta_agd_contrast_noRE",
              "nint * ni_agd_contrast", (nint * ni_agd_contrast));
            Eigen::Matrix<double,-1,1> eta_agd_contrast_noRE =
              Eigen::Matrix<double,-1,1>::Constant((nint * ni_agd_contrast),
                std::numeric_limits<double>::quiet_NaN());
            current_statement__ = 70;
            stan::model::assign(eta_agd_contrast_noRE,
              (has_offset ? stan::math::eval(
                              stan::math::add(
                                stan::math::multiply(X_agd_contrast,
                                  beta_tilde), offset_agd_contrast)) : 
              stan::math::eval(
                stan::math::multiply(X_agd_contrast, beta_tilde))),
              "assigning variable eta_agd_contrast_noRE");
            current_statement__ = 75;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 73;
              if (stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i)))) {
                current_statement__ = 72;
                stan::model::assign(eta_agd_contrast_bar,
                  (stan::model::rvalue(eta_agd_contrast_noRE,
                     "eta_agd_contrast_noRE", stan::model::index_uni(i)) +
                  stan::model::rvalue(f_delta, "f_delta",
                    stan::model::index_uni(
                      stan::model::rvalue(which_RE, "which_RE",
                        stan::model::index_uni(((narm_ipd + narm_agd_arm) +
                          i)))))), "assigning variable eta_agd_contrast_bar",
                  stan::model::index_uni(i));
              } else {
                current_statement__ = 71;
                stan::model::assign(eta_agd_contrast_bar,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE", stan::model::index_uni(i)),
                  "assigning variable eta_agd_contrast_bar",
                  stan::model::index_uni(i));
              }
            }
          } else {
            current_statement__ = 67;
            stan::model::assign(eta_agd_contrast_bar,
              (has_offset ? stan::math::eval(
                              stan::math::add(
                                stan::math::multiply(X_agd_contrast,
                                  beta_tilde), offset_agd_contrast)) : 
              stan::math::eval(
                stan::math::multiply(X_agd_contrast, beta_tilde))),
              "assigning variable eta_agd_contrast_bar");
          }
          current_statement__ = 87;
          if (class_effects) {
            current_statement__ = 85;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 80;
              if ((stan::math::primitive_value(
                     stan::math::logical_gt(
                       stan::model::rvalue(agd_contrast_trt,
                         "agd_contrast_trt", stan::model::index_uni(i)), 1))
                  &&
                  stan::math::primitive_value(
                    stan::model::rvalue(which_CE, "which_CE",
                      stan::model::index_uni(
                        (stan::model::rvalue(agd_contrast_trt,
                           "agd_contrast_trt", stan::model::index_uni(i)) -
                        1)))))) {
                current_statement__ = 78;
                stan::model::assign(eta_agd_contrast_bar,
                  (stan::model::rvalue(eta_agd_contrast_bar,
                     "eta_agd_contrast_bar", stan::model::index_uni(i)) +
                  stan::model::rvalue(f_class, "f_class",
                    stan::model::index_uni(
                      stan::model::rvalue(which_class, "which_class",
                        stan::model::index_uni(
                          (stan::model::rvalue(agd_contrast_trt,
                             "agd_contrast_trt", stan::model::index_uni(i)) -
                          1)))))), "assigning variable eta_agd_contrast_bar",
                  stan::model::index_uni(i));
              }
              current_statement__ = 83;
              if ((stan::math::primitive_value(
                     stan::math::logical_gt(
                       stan::model::rvalue(agd_contrast_trt_b,
                         "agd_contrast_trt_b", stan::model::index_uni(i)), 1))
                  &&
                  stan::math::primitive_value(
                    stan::model::rvalue(which_CE, "which_CE",
                      stan::model::index_uni(
                        (stan::model::rvalue(agd_contrast_trt_b,
                           "agd_contrast_trt_b", stan::model::index_uni(i)) -
                        1)))))) {
                current_statement__ = 81;
                stan::model::assign(eta_agd_contrast_bar,
                  (stan::model::rvalue(eta_agd_contrast_bar,
                     "eta_agd_contrast_bar", stan::model::index_uni(i)) -
                  stan::model::rvalue(f_class, "f_class",
                    stan::model::index_uni(
                      stan::model::rvalue(which_class, "which_class",
                        stan::model::index_uni(
                          (stan::model::rvalue(agd_contrast_trt_b,
                             "agd_contrast_trt_b", stan::model::index_uni(i))
                          - 1)))))),
                  "assigning variable eta_agd_contrast_bar",
                  stan::model::index_uni(i));
              }
            }
          }
        }
      }
      current_statement__ = 138;
      if (nX_aux) {
        current_statement__ = 136;
        if (aux_reg_trt) {
          current_statement__ = 126;
          stan::math::validate_non_negative_index("ucorr_beta_aux", "nt", nt);
          current_statement__ = 127;
          stan::math::validate_non_negative_index("ucorr_beta_aux",
            "n_scoef - 1", (n_scoef - 1));
          Eigen::Matrix<double,-1,-1> ucorr_beta_aux =
            Eigen::Matrix<double,-1,-1>::Constant(nt, (n_scoef - 1),
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 128;
          stan::model::assign(ucorr_beta_aux,
            stan::math::multiply(sigma_beta_L,
              stan::model::rvalue(u_beta_aux, "u_beta_aux",
                stan::model::index_min_max(1, nt), stan::model::index_omni())),
            "assigning variable ucorr_beta_aux");
          current_statement__ = 131;
          for (int i = 1; i <= nt; ++i) {
            current_statement__ = 129;
            stan::model::assign(beta_aux,
              stan::math::multiply(
                stan::math::cumulative_sum(
                  stan::math::elt_multiply(
                    stan::model::rvalue(ucorr_beta_aux, "ucorr_beta_aux",
                      stan::model::index_uni(i), stan::model::index_omni()),
                    stan::math::to_row_vector(
                      stan::model::rvalue(lscoef_weight, "lscoef_weight",
                        stan::model::index_uni(1))))),
                stan::model::rvalue(sigma_beta, "sigma_beta",
                  stan::model::index_uni(1))), "assigning variable beta_aux",
              stan::model::index_uni(i), stan::model::index_omni());
          }
          current_statement__ = 134;
          for (int i = (nt + 1); i <= nX_aux; ++i) {
            current_statement__ = 132;
            stan::model::assign(beta_aux,
              stan::math::multiply(
                stan::math::cumulative_sum(
                  stan::math::elt_multiply(
                    stan::model::rvalue(u_beta_aux, "u_beta_aux",
                      stan::model::index_uni(i), stan::model::index_omni()),
                    stan::math::to_row_vector(
                      stan::model::rvalue(lscoef_weight, "lscoef_weight",
                        stan::model::index_uni(1))))),
                stan::model::rvalue(sigma_beta, "sigma_beta",
                  stan::model::index_uni(((1 + i) - nt)))),
              "assigning variable beta_aux", stan::model::index_uni(i),
              stan::model::index_omni());
          }
        } else {
          current_statement__ = 124;
          for (int i = 1; i <= nX_aux; ++i) {
            current_statement__ = 122;
            stan::model::assign(beta_aux,
              stan::math::multiply(
                stan::math::cumulative_sum(
                  stan::math::elt_multiply(
                    stan::model::rvalue(u_beta_aux, "u_beta_aux",
                      stan::model::index_uni(i), stan::model::index_omni()),
                    stan::math::to_row_vector(
                      stan::model::rvalue(lscoef_weight, "lscoef_weight",
                        stan::model::index_uni(1))))),
                stan::model::rvalue(sigma_beta, "sigma_beta",
                  stan::model::index_uni(i))), "assigning variable beta_aux",
              stan::model::index_uni(i), stan::model::index_omni());
          }
        }
      }
      current_statement__ = 148;
      if (nX_aux) {
        current_statement__ = 146;
        for (int i = 1; i <= n_aux; ++i) {
          current_statement__ = 144;
          stan::model::assign(lscoef,
            stan::math::add(
              stan::math::multiply(
                stan::math::cumulative_sum(
                  stan::math::elt_multiply(
                    stan::model::rvalue(u_aux, "u_aux",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(lscoef_weight, "lscoef_weight",
                      stan::model::index_uni(1)))),
                stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i))),
              stan::model::rvalue(prior_aux_location, "prior_aux_location",
                stan::model::index_uni(1))), "assigning variable lscoef",
            stan::model::index_uni(i));
        }
      } else {
        current_statement__ = 142;
        for (int i = 1; i <= n_aux; ++i) {
          current_statement__ = 139;
          stan::model::assign(lscoef,
            stan::math::add(
              stan::math::multiply(
                stan::math::cumulative_sum(
                  stan::math::elt_multiply(
                    stan::model::rvalue(u_aux, "u_aux",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(lscoef_weight, "lscoef_weight",
                      stan::model::index_uni(i)))),
                stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i))),
              stan::model::rvalue(prior_aux_location, "prior_aux_location",
                stan::model::index_uni(i))), "assigning variable lscoef",
            stan::model::index_uni(i));
          current_statement__ = 140;
          stan::model::assign(scoef_temp,
            stan::math::softmax(
              stan::math::append_row(0,
                stan::model::rvalue(lscoef, "lscoef",
                  stan::model::index_uni(i)))),
            "assigning variable scoef_temp", stan::model::index_uni(i));
        }
      }
      current_statement__ = 177;
      if (ni_ipd) {
        current_statement__ = 175;
        if (aux_int) {
          current_statement__ = 164;
          stan::math::validate_non_negative_index("scoef_ipd", "ni_ipd",
            ni_ipd);
          current_statement__ = 165;
          stan::math::validate_non_negative_index("scoef_ipd", "n_scoef",
            n_scoef);
          Eigen::Matrix<double,-1,-1> scoef_ipd =
            Eigen::Matrix<double,-1,-1>::Constant(ni_ipd, n_scoef,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 167;
          stan::math::validate_non_negative_index("Xb_aux", "ni_ipd", ni_ipd);
          current_statement__ = 168;
          stan::math::validate_non_negative_index("Xb_aux", "n_scoef - 1",
            (n_scoef - 1));
          Eigen::Matrix<double,-1,-1> Xb_aux =
            Eigen::Matrix<double,-1,-1>::Constant(ni_ipd, (n_scoef - 1),
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 169;
          stan::model::assign(Xb_aux,
            stan::math::multiply(X_aux_ipd, beta_aux),
            "assigning variable Xb_aux");
          current_statement__ = 172;
          for (int i = 1; i <= ni_ipd; ++i) {
            current_statement__ = 170;
            stan::model::assign(scoef_ipd,
              stan::math::to_row_vector(
                stan::math::softmax(
                  stan::math::append_row(0,
                    stan::math::add(
                      stan::model::rvalue(lscoef, "lscoef",
                        stan::model::index_uni(
                          stan::model::rvalue(aux_id_ipd, "aux_id_ipd",
                            stan::model::index_uni(i)))),
                      stan::math::to_vector(
                        stan::model::rvalue(Xb_aux, "Xb_aux",
                          stan::model::index_uni(i),
                          stan::model::index_omni())))))),
              "assigning variable scoef_ipd", stan::model::index_uni(i),
              stan::model::index_omni());
          }
          current_statement__ = 173;
          stan::model::assign(log_L_ipd,
            loglik(ipd_time, ipd_itime, ipd_start_itime, ipd_delay_itime,
              ipd_delayed, ipd_status, eta_ipd, scoef_ipd, pstream__),
            "assigning variable log_L_ipd");
        } else {
          current_statement__ = 162;
          for (int i = 1; i <= n_aux_group; ++i) {
            int ni = std::numeric_limits<int>::min();
            current_statement__ = 149;
            ni = stan::model::rvalue(ni_aux_group_ipd, "ni_aux_group_ipd",
                   stan::model::index_uni(i));
            current_statement__ = 160;
            if (ni) {
              current_statement__ = 150;
              stan::math::validate_non_negative_index("wi", "ni", ni);
              std::vector<int> wi =
                std::vector<int>(ni, std::numeric_limits<int>::min());
              current_statement__ = 151;
              stan::model::assign(wi,
                stan::model::rvalue(wi_aux_group_ipd, "wi_aux_group_ipd",
                  stan::model::index_uni(i),
                  stan::model::index_min_max(1, ni)), "assigning variable wi");
              current_statement__ = 158;
              if (nX_aux) {
                current_statement__ = 154;
                stan::math::validate_non_negative_index("Xb_auxi",
                  "n_scoef - 1", (n_scoef - 1));
                Eigen::Matrix<double,1,-1> Xb_auxi =
                  Eigen::Matrix<double,1,-1>::Constant((n_scoef - 1),
                    std::numeric_limits<double>::quiet_NaN());
                current_statement__ = 155;
                stan::model::assign(Xb_auxi,
                  stan::math::multiply(
                    stan::model::rvalue(X_aux_ipd, "X_aux_ipd",
                      stan::model::index_uni(
                        stan::model::rvalue(wi, "wi",
                          stan::model::index_uni(1))),
                      stan::model::index_omni()), beta_aux),
                  "assigning variable Xb_auxi");
                current_statement__ = 156;
                stan::model::assign(log_L_ipd,
                  loglik2(
                    stan::model::rvalue(ipd_time, "ipd_time",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_itime, "ipd_itime",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_start_itime, "ipd_start_itime",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_delay_itime, "ipd_delay_itime",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_delayed, "ipd_delayed",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_status, "ipd_status",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(eta_ipd, "eta_ipd",
                      stan::model::index_multi(wi)),
                    stan::math::softmax(
                      stan::math::append_row(0,
                        stan::math::add(
                          stan::model::rvalue(lscoef, "lscoef",
                            stan::model::index_uni(
                              stan::model::rvalue(aux_id_ipd, "aux_id_ipd",
                                stan::model::index_uni(
                                  stan::model::rvalue(wi, "wi",
                                    stan::model::index_uni(1)))))),
                          stan::math::to_vector(Xb_auxi)))), pstream__),
                  "assigning variable log_L_ipd",
                  stan::model::index_multi(wi));
              } else {
                current_statement__ = 152;
                stan::model::assign(log_L_ipd,
                  loglik2(
                    stan::model::rvalue(ipd_time, "ipd_time",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_itime, "ipd_itime",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_start_itime, "ipd_start_itime",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_delay_itime, "ipd_delay_itime",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_delayed, "ipd_delayed",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(ipd_status, "ipd_status",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(eta_ipd, "eta_ipd",
                      stan::model::index_multi(wi)),
                    stan::model::rvalue(scoef_temp, "scoef_temp",
                      stan::model::index_uni(i)), pstream__),
                  "assigning variable log_L_ipd",
                  stan::model::index_multi(wi));
              }
            }
          }
        }
      }
      current_statement__ = 273;
      if (ni_agd_arm) {
        current_statement__ = 178;
        stan::math::validate_non_negative_index("eta_agd_arm_noRE",
          "nint_max * ni_agd_arm", (nint_max * ni_agd_arm));
        Eigen::Matrix<double,-1,1> eta_agd_arm_noRE =
          Eigen::Matrix<double,-1,1>::Constant((nint_max * ni_agd_arm),
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 179;
        stan::model::assign(eta_agd_arm_noRE,
          (has_offset ? stan::math::eval(
                          stan::math::add(
                            stan::math::multiply(X_agd_arm, beta_tilde),
                            offset_agd_arm)) : stan::math::eval(
                                                 stan::math::multiply(
                                                   X_agd_arm, beta_tilde))),
          "assigning variable eta_agd_arm_noRE");
        current_statement__ = 186;
        if (class_effects) {
          current_statement__ = 184;
          for (int i = 1; i <= ni_agd_arm; ++i) {
            current_statement__ = 182;
            if ((stan::math::primitive_value(
                   stan::math::logical_gt(
                     stan::model::rvalue(agd_arm_trt, "agd_arm_trt",
                       stan::model::index_uni(i)), 1))
                &&
                stan::math::primitive_value(
                  stan::model::rvalue(which_CE, "which_CE",
                    stan::model::index_uni(
                      (stan::model::rvalue(agd_arm_trt, "agd_arm_trt",
                         stan::model::index_uni(i)) - 1)))))) {
              current_statement__ = 180;
              stan::model::assign(eta_agd_arm_noRE,
                stan::math::add(
                  stan::model::deep_copy(
                    stan::model::rvalue(eta_agd_arm_noRE, "eta_agd_arm_noRE",
                      stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                        (((i - 1) * nint_max) + nint)))),
                  stan::model::rvalue(f_class, "f_class",
                    stan::model::index_uni(
                      stan::model::rvalue(which_class, "which_class",
                        stan::model::index_uni(
                          (stan::model::rvalue(agd_arm_trt, "agd_arm_trt",
                             stan::model::index_uni(i)) - 1)))))),
                "assigning variable eta_agd_arm_noRE",
                stan::model::index_min_max((1 + ((i - 1) * nint_max)), (((i -
                  1) * nint_max) + nint)));
            }
          }
        }
        current_statement__ = 271;
        if (stan::math::logical_gt(nint_max, 1)) {
          current_statement__ = 269;
          if (aux_int) {
            current_statement__ = 267;
            for (int i = 1; i <= ni_agd_arm; ++i) {
              current_statement__ = 248;
              stan::math::validate_non_negative_index("eta_agd_arm_ii",
                "nint", nint);
              Eigen::Matrix<double,-1,1> eta_agd_arm_ii =
                Eigen::Matrix<double,-1,1>::Constant(nint,
                  std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 250;
              stan::math::validate_non_negative_index("log_L_ii", "nint",
                nint);
              Eigen::Matrix<double,-1,1> log_L_ii =
                Eigen::Matrix<double,-1,1>::Constant(nint,
                  std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 252;
              stan::math::validate_non_negative_index("Xb_aux", "nint", nint);
              current_statement__ = 253;
              stan::math::validate_non_negative_index("Xb_aux",
                "n_scoef - 1", (n_scoef - 1));
              Eigen::Matrix<double,-1,-1> Xb_aux =
                Eigen::Matrix<double,-1,-1>::Constant(nint, (n_scoef - 1),
                  std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 254;
              stan::model::assign(Xb_aux,
                stan::math::multiply(
                  stan::model::rvalue(X_aux_agd_arm, "X_aux_agd_arm",
                    stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                      (((i - 1) * nint_max) + nint)),
                    stan::model::index_omni()), beta_aux),
                "assigning variable Xb_aux");
              current_statement__ = 255;
              stan::math::validate_non_negative_index("scoef_agd_arm",
                "nint", nint);
              current_statement__ = 256;
              stan::math::validate_non_negative_index("scoef_agd_arm",
                "n_scoef", n_scoef);
              Eigen::Matrix<double,-1,-1> scoef_agd_arm =
                Eigen::Matrix<double,-1,-1>::Constant(nint, n_scoef,
                  std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 258;
              stan::model::assign(eta_agd_arm_ii,
                stan::model::rvalue(eta_agd_arm_noRE, "eta_agd_arm_noRE",
                  stan::model::index_min_max((1 + ((i - 1) * nint_max)), (((i
                    - 1) * nint_max) + nint))),
                "assigning variable eta_agd_arm_ii");
              current_statement__ = 260;
              if ((stan::math::primitive_value(RE) &&
                  stan::math::primitive_value(
                    stan::model::rvalue(which_RE, "which_RE",
                      stan::model::index_uni((narm_ipd +
                        stan::model::rvalue(agd_arm_arm, "agd_arm_arm",
                          stan::model::index_uni(i)))))))) {
                current_statement__ = 259;
                stan::model::assign(eta_agd_arm_ii,
                  stan::math::add(stan::model::deep_copy(eta_agd_arm_ii),
                    stan::model::rvalue(f_delta, "f_delta",
                      stan::model::index_uni(
                        stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni((narm_ipd +
                            stan::model::rvalue(agd_arm_arm, "agd_arm_arm",
                              stan::model::index_uni(i)))))))),
                  "assigning variable eta_agd_arm_ii");
              }
              current_statement__ = 263;
              for (int j = 1; j <= nint; ++j) {
                current_statement__ = 261;
                stan::model::assign(scoef_agd_arm,
                  stan::math::to_row_vector(
                    stan::math::softmax(
                      stan::math::append_row(0,
                        stan::math::add(
                          stan::model::rvalue(lscoef, "lscoef",
                            stan::model::index_uni(
                              stan::model::rvalue(aux_id_agd_arm,
                                "aux_id_agd_arm",
                                stan::model::index_uni((((i - 1) * nint_max)
                                  + j))))),
                          stan::math::to_vector(
                            stan::model::rvalue(Xb_aux, "Xb_aux",
                              stan::model::index_uni(j),
                              stan::model::index_omni())))))),
                  "assigning variable scoef_agd_arm",
                  stan::model::index_uni(j), stan::model::index_omni());
              }
              current_statement__ = 264;
              stan::model::assign(log_L_ii,
                loglik_a(
                  stan::model::rvalue(agd_arm_time, "agd_arm_time",
                    stan::model::index_uni(i)),
                  stan::model::rvalue(agd_arm_itime, "agd_arm_itime",
                    stan::model::index_uni(i)),
                  stan::model::rvalue(agd_arm_start_itime,
                    "agd_arm_start_itime", stan::model::index_uni(i)),
                  stan::model::rvalue(agd_arm_delay_itime,
                    "agd_arm_delay_itime", stan::model::index_uni(i)),
                  stan::model::rvalue(agd_arm_delayed, "agd_arm_delayed",
                    stan::model::index_uni(i)),
                  stan::model::rvalue(agd_arm_status, "agd_arm_status",
                    stan::model::index_uni(i)), eta_agd_arm_ii,
                  scoef_agd_arm, pstream__), "assigning variable log_L_ii");
              current_statement__ = 265;
              stan::model::assign(log_L_agd_arm,
                (stan::math::log_sum_exp(log_L_ii) - stan::math::log(nint)),
                "assigning variable log_L_agd_arm", stan::model::index_uni(i));
            }
          } else {
            current_statement__ = 246;
            for (int i = 1; i <= n_aux_group; ++i) {
              int ni = std::numeric_limits<int>::min();
              current_statement__ = 222;
              ni = stan::model::rvalue(ni_aux_group_agd_arm,
                     "ni_aux_group_agd_arm", stan::model::index_uni(i));
              current_statement__ = 244;
              if (ni) {
                current_statement__ = 223;
                stan::math::validate_non_negative_index("wi", "ni", ni);
                std::vector<int> wi =
                  std::vector<int>(ni, std::numeric_limits<int>::min());
                current_statement__ = 224;
                stan::model::assign(wi,
                  stan::model::rvalue(wi_aux_group_agd_arm,
                    "wi_aux_group_agd_arm", stan::model::index_uni(i),
                    stan::model::index_min_max(1, ni)),
                  "assigning variable wi");
                current_statement__ = 225;
                stan::math::validate_non_negative_index("Xb_auxi",
                  "n_scoef - 1", (n_scoef - 1));
                Eigen::Matrix<double,1,-1> Xb_auxi =
                  Eigen::Matrix<double,1,-1>::Constant((n_scoef - 1),
                    std::numeric_limits<double>::quiet_NaN());
                current_statement__ = 226;
                stan::model::assign(Xb_auxi,
                  stan::math::multiply(
                    stan::model::rvalue(X_aux_agd_arm, "X_aux_agd_arm",
                      stan::model::index_uni(
                        stan::model::rvalue(wi, "wi",
                          stan::model::index_uni(1))),
                      stan::model::index_omni()), beta_aux),
                  "assigning variable Xb_auxi");
                current_statement__ = 227;
                stan::math::validate_non_negative_index("scoef_agd_arm",
                  "n_scoef", n_scoef);
                Eigen::Matrix<double,-1,1> scoef_agd_arm =
                  Eigen::Matrix<double,-1,1>::Constant(n_scoef,
                    std::numeric_limits<double>::quiet_NaN());
                current_statement__ = 231;
                if (nX_aux) {
                  current_statement__ = 230;
                  stan::model::assign(scoef_agd_arm,
                    stan::math::softmax(
                      stan::math::append_row(0,
                        stan::math::add(
                          stan::model::rvalue(lscoef, "lscoef",
                            stan::model::index_uni(
                              stan::model::rvalue(aux_id_agd_arm,
                                "aux_id_agd_arm",
                                stan::model::index_uni(
                                  stan::model::rvalue(wi, "wi",
                                    stan::model::index_uni(1)))))),
                          stan::math::to_vector(Xb_auxi)))),
                    "assigning variable scoef_agd_arm");
                } else {
                  current_statement__ = 229;
                  stan::model::assign(scoef_agd_arm,
                    stan::model::rvalue(scoef_temp, "scoef_temp",
                      stan::model::index_uni(i)),
                    "assigning variable scoef_agd_arm");
                }
                current_statement__ = 242;
                for (int j = 1; j <= ni; ++j) {
                  current_statement__ = 232;
                  stan::math::validate_non_negative_index("eta_agd_arm_ii",
                    "nint", nint);
                  Eigen::Matrix<double,-1,1> eta_agd_arm_ii =
                    Eigen::Matrix<double,-1,1>::Constant(nint,
                      std::numeric_limits<double>::quiet_NaN());
                  current_statement__ = 234;
                  stan::math::validate_non_negative_index("log_L_ii", "nint",
                    nint);
                  Eigen::Matrix<double,-1,1> log_L_ii =
                    Eigen::Matrix<double,-1,1>::Constant(nint,
                      std::numeric_limits<double>::quiet_NaN());
                  current_statement__ = 236;
                  stan::model::assign(eta_agd_arm_ii,
                    stan::model::rvalue(eta_agd_arm_noRE, "eta_agd_arm_noRE",
                      stan::model::index_min_max((1 +
                        ((stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)) - 1) * nint_max)),
                        (((stan::model::rvalue(wi, "wi",
                             stan::model::index_uni(j)) - 1) * nint_max) +
                        nint))), "assigning variable eta_agd_arm_ii");
                  current_statement__ = 238;
                  if ((stan::math::primitive_value(RE) &&
                      stan::math::primitive_value(
                        stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni((narm_ipd +
                            stan::model::rvalue(agd_arm_arm, "agd_arm_arm",
                              stan::model::index_uni(
                                stan::model::rvalue(wi, "wi",
                                  stan::model::index_uni(j)))))))))) {
                    current_statement__ = 237;
                    stan::model::assign(eta_agd_arm_ii,
                      stan::math::add(stan::model::deep_copy(eta_agd_arm_ii),
                        stan::model::rvalue(f_delta, "f_delta",
                          stan::model::index_uni(
                            stan::model::rvalue(which_RE, "which_RE",
                              stan::model::index_uni((narm_ipd +
                                stan::model::rvalue(agd_arm_arm,
                                  "agd_arm_arm",
                                  stan::model::index_uni(
                                    stan::model::rvalue(wi, "wi",
                                      stan::model::index_uni(j)))))))))),
                      "assigning variable eta_agd_arm_ii");
                  }
                  current_statement__ = 239;
                  stan::model::assign(log_L_ii,
                    loglik_a2(
                      stan::model::rvalue(agd_arm_time, "agd_arm_time",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))),
                      stan::model::rvalue(agd_arm_itime, "agd_arm_itime",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))),
                      stan::model::rvalue(agd_arm_start_itime,
                        "agd_arm_start_itime",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))),
                      stan::model::rvalue(agd_arm_delay_itime,
                        "agd_arm_delay_itime",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))),
                      stan::model::rvalue(agd_arm_delayed, "agd_arm_delayed",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))),
                      stan::model::rvalue(agd_arm_status, "agd_arm_status",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(j)))), eta_agd_arm_ii,
                      scoef_agd_arm, pstream__),
                    "assigning variable log_L_ii");
                  current_statement__ = 240;
                  stan::model::assign(log_L_agd_arm,
                    (stan::math::log_sum_exp(log_L_ii) -
                    stan::math::log(nint)),
                    "assigning variable log_L_agd_arm",
                    stan::model::index_uni(
                      stan::model::rvalue(wi, "wi", stan::model::index_uni(j))));
                }
              }
            }
          }
        } else {
          current_statement__ = 187;
          stan::math::validate_non_negative_index("eta_agd_arm",
            "ni_agd_arm", ni_agd_arm);
          Eigen::Matrix<double,-1,1> eta_agd_arm =
            Eigen::Matrix<double,-1,1>::Constant(ni_agd_arm,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 188;
          stan::model::assign(eta_agd_arm, eta_agd_arm_noRE,
            "assigning variable eta_agd_arm");
          current_statement__ = 193;
          if (RE) {
            current_statement__ = 192;
            for (int i = 1; i <= ni_agd_arm; ++i) {
              current_statement__ = 190;
              if (stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni((narm_ipd +
                      stan::model::rvalue(agd_arm_arm, "agd_arm_arm",
                        stan::model::index_uni(i)))))) {
                current_statement__ = 189;
                stan::model::assign(eta_agd_arm,
                  (stan::model::rvalue(eta_agd_arm, "eta_agd_arm",
                     stan::model::index_uni(i)) +
                  stan::model::rvalue(f_delta, "f_delta",
                    stan::model::index_uni(
                      stan::model::rvalue(which_RE, "which_RE",
                        stan::model::index_uni((narm_ipd +
                          stan::model::rvalue(agd_arm_arm, "agd_arm_arm",
                            stan::model::index_uni(i)))))))),
                  "assigning variable eta_agd_arm", stan::model::index_uni(i));
              }
            }
          }
          current_statement__ = 220;
          if (aux_int) {
            current_statement__ = 209;
            stan::math::validate_non_negative_index("scoef_agd_arm",
              "ni_agd_arm", ni_agd_arm);
            current_statement__ = 210;
            stan::math::validate_non_negative_index("scoef_agd_arm",
              "n_scoef", n_scoef);
            Eigen::Matrix<double,-1,-1> scoef_agd_arm =
              Eigen::Matrix<double,-1,-1>::Constant(ni_agd_arm, n_scoef,
                std::numeric_limits<double>::quiet_NaN());
            current_statement__ = 212;
            stan::math::validate_non_negative_index("Xb_aux", "ni_agd_arm",
              ni_agd_arm);
            current_statement__ = 213;
            stan::math::validate_non_negative_index("Xb_aux", "n_scoef - 1",
              (n_scoef - 1));
            Eigen::Matrix<double,-1,-1> Xb_aux =
              Eigen::Matrix<double,-1,-1>::Constant(ni_agd_arm, (n_scoef -
                1), std::numeric_limits<double>::quiet_NaN());
            current_statement__ = 214;
            stan::model::assign(Xb_aux,
              stan::math::multiply(X_aux_agd_arm, beta_aux),
              "assigning variable Xb_aux");
            current_statement__ = 217;
            for (int i = 1; i <= ni_agd_arm; ++i) {
              current_statement__ = 215;
              stan::model::assign(scoef_agd_arm,
                stan::math::to_row_vector(
                  stan::math::softmax(
                    stan::math::append_row(0,
                      stan::math::add(
                        stan::model::rvalue(lscoef, "lscoef",
                          stan::model::index_uni(
                            stan::model::rvalue(aux_id_agd_arm,
                              "aux_id_agd_arm", stan::model::index_uni(i)))),
                        stan::math::to_vector(
                          stan::model::rvalue(Xb_aux, "Xb_aux",
                            stan::model::index_uni(i),
                            stan::model::index_omni())))))),
                "assigning variable scoef_agd_arm",
                stan::model::index_uni(i), stan::model::index_omni());
            }
            current_statement__ = 218;
            stan::model::assign(log_L_agd_arm,
              loglik(agd_arm_time, agd_arm_itime, agd_arm_start_itime,
                agd_arm_delay_itime, agd_arm_delayed, agd_arm_status,
                eta_agd_arm, scoef_agd_arm, pstream__),
              "assigning variable log_L_agd_arm");
          } else {
            current_statement__ = 207;
            for (int i = 1; i <= n_aux_group; ++i) {
              int ni = std::numeric_limits<int>::min();
              current_statement__ = 194;
              ni = stan::model::rvalue(ni_aux_group_agd_arm,
                     "ni_aux_group_agd_arm", stan::model::index_uni(i));
              current_statement__ = 205;
              if (ni) {
                current_statement__ = 195;
                stan::math::validate_non_negative_index("wi", "ni", ni);
                std::vector<int> wi =
                  std::vector<int>(ni, std::numeric_limits<int>::min());
                current_statement__ = 196;
                stan::model::assign(wi,
                  stan::model::rvalue(wi_aux_group_agd_arm,
                    "wi_aux_group_agd_arm", stan::model::index_uni(i),
                    stan::model::index_min_max(1, ni)),
                  "assigning variable wi");
                current_statement__ = 203;
                if (nX_aux) {
                  current_statement__ = 199;
                  stan::math::validate_non_negative_index("Xb_auxi",
                    "n_scoef - 1", (n_scoef - 1));
                  Eigen::Matrix<double,1,-1> Xb_auxi =
                    Eigen::Matrix<double,1,-1>::Constant((n_scoef - 1),
                      std::numeric_limits<double>::quiet_NaN());
                  current_statement__ = 200;
                  stan::model::assign(Xb_auxi,
                    stan::math::multiply(
                      stan::model::rvalue(X_aux_agd_arm, "X_aux_agd_arm",
                        stan::model::index_uni(
                          stan::model::rvalue(wi, "wi",
                            stan::model::index_uni(1))),
                        stan::model::index_omni()), beta_aux),
                    "assigning variable Xb_auxi");
                  current_statement__ = 201;
                  stan::model::assign(log_L_agd_arm,
                    loglik2(
                      stan::model::rvalue(agd_arm_time, "agd_arm_time",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_itime, "agd_arm_itime",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_start_itime,
                        "agd_arm_start_itime", stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_delay_itime,
                        "agd_arm_delay_itime", stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_delayed, "agd_arm_delayed",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_status, "agd_arm_status",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(eta_agd_arm, "eta_agd_arm",
                        stan::model::index_multi(wi)),
                      stan::math::softmax(
                        stan::math::append_row(0,
                          stan::math::add(
                            stan::model::rvalue(lscoef, "lscoef",
                              stan::model::index_uni(
                                stan::model::rvalue(aux_id_agd_arm,
                                  "aux_id_agd_arm",
                                  stan::model::index_uni(
                                    stan::model::rvalue(wi, "wi",
                                      stan::model::index_uni(1)))))),
                            stan::math::to_vector(Xb_auxi)))), pstream__),
                    "assigning variable log_L_agd_arm",
                    stan::model::index_multi(wi));
                } else {
                  current_statement__ = 197;
                  stan::model::assign(log_L_agd_arm,
                    loglik2(
                      stan::model::rvalue(agd_arm_time, "agd_arm_time",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_itime, "agd_arm_itime",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_start_itime,
                        "agd_arm_start_itime", stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_delay_itime,
                        "agd_arm_delay_itime", stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_delayed, "agd_arm_delayed",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(agd_arm_status, "agd_arm_status",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(eta_agd_arm, "eta_agd_arm",
                        stan::model::index_multi(wi)),
                      stan::model::rvalue(scoef_temp, "scoef_temp",
                        stan::model::index_uni(i)), pstream__),
                    "assigning variable log_L_agd_arm",
                    stan::model::index_multi(wi));
                }
              }
            }
          }
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(log_L_ipd);
        out__.write(log_L_agd_arm);
        for (int sym1__ = 1; sym1__ <= lscoef_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_aux; ++sym2__) {
            out__.write(lscoef[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= n_scoef; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= scoef_temp_1dim__; ++sym2__) {
            out__.write(scoef_temp[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(beta_aux);
        out__.write(eta_ipd);
        out__.write(f_delta);
        out__.write(allbeta);
        out__.write(mu);
        out__.write(d);
        out__.write(omega);
        out__.write(beta);
        out__.write(eta_agd_contrast_ii);
        out__.write(eta_agd_contrast_bar);
        out__.write(f_class);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<Eigen::Matrix<double,-1,1>> scoef =
        std::vector<Eigen::Matrix<double,-1,1>>(n_aux,
          Eigen::Matrix<double,-1,1>::Constant(n_scoef,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,-1> d_aux =
        Eigen::Matrix<double,-1,-1>::Constant(d_aux_1dim__, d_aux_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(log_lik_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> resdev =
        Eigen::Matrix<double,-1,1>::Constant(resdev_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> fitted_agd_contrast =
        Eigen::Matrix<double,-1,1>::Constant(ni_agd_contrast,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> theta_bar_cum_agd_contrast =
        Eigen::Matrix<double,-1,1>::Constant(theta_bar_cum_agd_contrast_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> delta =
        Eigen::Matrix<double,-1,1>::Constant(n_delta,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 290;
      if (RE) {
        int s = std::numeric_limits<int>::min();
        current_statement__ = 274;
        s = 1;
        current_statement__ = 280;
        for (int i = 1; i <= (narm_ipd + narm_agd_arm); ++i) {
          current_statement__ = 278;
          if (stan::model::rvalue(which_RE, "which_RE",
                stan::model::index_uni(i))) {
            current_statement__ = 275;
            stan::model::assign(delta,
              ((stan::math::logical_gt(
                  stan::model::rvalue(trt, "trt", stan::model::index_uni(i)),
                  1) ? stan::model::rvalue(d, "d",
                         stan::model::index_uni(
                           (stan::model::rvalue(trt, "trt",
                              stan::model::index_uni(i)) - 1))) : 0) +
              (stan::model::rvalue(which_RE, "which_RE",
                 stan::model::index_uni(i)) ? stan::model::rvalue(f_delta,
                                                "f_delta",
                                                stan::model::index_uni(
                                                  stan::model::rvalue(
                                                    which_RE, "which_RE",
                                                    stan::model::index_uni(i)))) : 0)),
              "assigning variable delta", stan::model::index_uni(s));
            current_statement__ = 276;
            s = (s + 1);
          }
        }
        current_statement__ = 288;
        for (int i = 1; i <= ni_agd_contrast; ++i) {
          current_statement__ = 286;
          if (stan::model::rvalue(which_RE, "which_RE",
                stan::model::index_uni(((narm_ipd + narm_agd_arm) + i)))) {
            current_statement__ = 281;
            stan::model::assign(delta,
              ((stan::math::logical_gt(
                  stan::model::rvalue(trt, "trt",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i))),
                  1) ? stan::model::rvalue(d, "d",
                         stan::model::index_uni(
                           (stan::model::rvalue(trt, "trt",
                              stan::model::index_uni(((narm_ipd +
                                narm_agd_arm) + i))) - 1))) : 0) +
              (stan::model::rvalue(which_RE, "which_RE",
                 stan::model::index_uni(((narm_ipd + narm_agd_arm) + i))) ? 
              stan::model::rvalue(f_delta, "f_delta",
                stan::model::index_uni(
                  stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i))))) : 0)),
              "assigning variable delta", stan::model::index_uni(s));
            current_statement__ = 283;
            if (stan::math::logical_gt(
                  stan::model::rvalue(agd_contrast_trt_b,
                    "agd_contrast_trt_b", stan::model::index_uni(i)), 1)) {
              current_statement__ = 282;
              stan::model::assign(delta,
                (stan::model::rvalue(delta, "delta",
                   stan::model::index_uni(s)) -
                stan::model::rvalue(d, "d",
                  stan::model::index_uni(
                    (stan::model::rvalue(agd_contrast_trt_b,
                       "agd_contrast_trt_b", stan::model::index_uni(i)) - 1)))),
                "assigning variable delta", stan::model::index_uni(s));
            }
            current_statement__ = 284;
            s = (s + 1);
          }
        }
      }
      current_statement__ = 295;
      for (int i = 1; i <= ni_agd_contrast; ++i) {
        current_statement__ = 293;
        for (int j = 1; j <= n_int_thin; ++j) {
          current_statement__ = 291;
          stan::model::assign(theta_bar_cum_agd_contrast,
            stan::math::mean(
              stan::model::rvalue(eta_agd_contrast_ii, "eta_agd_contrast_ii",
                stan::model::index_min_max((1 + ((i - 1) * nint)), (((i - 1)
                  * nint) + (j * int_thin))))),
            "assigning variable theta_bar_cum_agd_contrast",
            stan::model::index_uni((((i - 1) * n_int_thin) + j)));
        }
      }
      current_statement__ = 296;
      stan::model::assign(fitted_agd_contrast, eta_agd_contrast_bar,
        "assigning variable fitted_agd_contrast");
      {
        int a = std::numeric_limits<int>::min();
        current_statement__ = 297;
        a = 0;
        int nc = std::numeric_limits<int>::min();
        current_statement__ = 304;
        for (int s = 1; s <= ns_agd_contrast; ++s) {
          current_statement__ = 299;
          nc = stan::model::rvalue(nc_agd_contrast, "nc_agd_contrast",
                 stan::model::index_uni(s));
          current_statement__ = 300;
          stan::model::assign(log_lik,
            stan::math::multi_normal_lpdf<false>(
              stan::model::rvalue(agd_contrast_y, "agd_contrast_y",
                stan::model::index_min_max((a + 1), (a + nc))),
              stan::model::rvalue(eta_agd_contrast_bar,
                "eta_agd_contrast_bar",
                stan::model::index_min_max((a + 1), (a + nc))),
              stan::model::rvalue(agd_contrast_Sigma, "agd_contrast_Sigma",
                stan::model::index_min_max((a + 1), (a + nc)),
                stan::model::index_min_max((a + 1), (a + nc)))),
            "assigning variable log_lik",
            stan::model::index_uni(((ni_ipd + ni_agd_arm) + s)));
          current_statement__ = 301;
          stan::model::assign(resdev,
            stan::math::quad_form(
              stan::model::rvalue(inv_Sigma, "inv_Sigma",
                stan::model::index_min_max((a + 1), (a + nc)),
                stan::model::index_min_max((a + 1), (a + nc))),
              stan::math::subtract(
                stan::model::rvalue(agd_contrast_y, "agd_contrast_y",
                  stan::model::index_min_max((a + 1), (a + nc))),
                stan::model::rvalue(eta_agd_contrast_bar,
                  "eta_agd_contrast_bar",
                  stan::model::index_min_max((a + 1), (a + nc))))),
            "assigning variable resdev",
            stan::model::index_uni(((ni_ipd + ni_agd_arm) + s)));
          current_statement__ = 302;
          a = (a + nc);
        }
      }
      current_statement__ = 308;
      for (int i = 1; i <= n_aux; ++i) {
        current_statement__ = 306;
        stan::model::assign(scoef,
          (nX_aux ? stan::math::eval(
                      stan::math::softmax(
                        stan::math::append_row(0,
                          stan::model::rvalue(lscoef, "lscoef",
                            stan::model::index_uni(i))))) : stan::math::eval(
                                                              stan::model::rvalue(
                                                                scoef_temp,
                                                                "scoef_temp",
                                                                stan::model::index_uni(
                                                                  i)))),
          "assigning variable scoef", stan::model::index_uni(i));
      }
      current_statement__ = 312;
      if (aux_reg_trt) {
        current_statement__ = 311;
        for (int i = 1; i <= (nt - 1); ++i) {
          current_statement__ = 309;
          stan::model::assign(d_aux,
            stan::math::subtract(
              stan::model::rvalue(beta_aux, "beta_aux",
                stan::model::index_uni((i + 1)), stan::model::index_omni()),
              stan::model::rvalue(beta_aux, "beta_aux",
                stan::model::index_uni(1), stan::model::index_omni())),
            "assigning variable d_aux", stan::model::index_uni(i),
            stan::model::index_omni());
        }
      }
      current_statement__ = 314;
      if (ni_ipd) {
        current_statement__ = 313;
        stan::model::assign(log_lik, log_L_ipd, "assigning variable log_lik",
          stan::model::index_min_max(1, ni_ipd));
      }
      current_statement__ = 316;
      if (ni_agd_arm) {
        current_statement__ = 315;
        stan::model::assign(log_lik, log_L_agd_arm,
          "assigning variable log_lik",
          stan::model::index_min_max((ni_ipd + 1), (ni_ipd + ni_agd_arm)));
      }
      current_statement__ = 318;
      if ((ni_ipd + ni_agd_arm)) {
        current_statement__ = 317;
        stan::model::assign(resdev,
          stan::math::multiply(-2,
            stan::model::rvalue(log_lik, "log_lik",
              stan::model::index_min_max(1, (ni_ipd + ni_agd_arm)))),
          "assigning variable resdev",
          stan::model::index_min_max(1, (ni_ipd + ni_agd_arm)));
      }
      for (int sym1__ = 1; sym1__ <= n_scoef; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_aux; ++sym2__) {
          out__.write(scoef[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(d_aux);
      out__.write(log_lik);
      out__.write(resdev);
      out__.write(fitted_agd_contrast);
      out__.write(theta_bar_cum_agd_contrast);
      out__.write(delta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta_tilde =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nX, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta_tilde,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nX),
        "assigning variable beta_tilde");
      out__.write(beta_tilde);
      Eigen::Matrix<local_scalar_t__,-1,1> u_delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_delta, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(u_delta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_delta),
        "assigning variable u_delta");
      out__.write(u_delta);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tau_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(tau,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(tau_1dim__),
        "assigning variable tau");
      out__.write_free_lb(0, tau);
      Eigen::Matrix<local_scalar_t__,-1,1> class_mean =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(class_mean_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(class_mean,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(class_mean_1dim__),
        "assigning variable class_mean");
      out__.write(class_mean);
      Eigen::Matrix<local_scalar_t__,-1,1> class_sd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(class_sd_1dim__,
          DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(class_sd,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(class_sd_1dim__),
        "assigning variable class_sd");
      out__.write_free_lb(0, class_sd);
      Eigen::Matrix<local_scalar_t__,-1,1> z_class =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_class_1dim__,
          DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(z_class,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(z_class_1dim__),
        "assigning variable z_class");
      out__.write(z_class);
      Eigen::Matrix<local_scalar_t__,-1,-1> u_beta_aux =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nX_aux,
          u_beta_aux_2dim__, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(u_beta_aux,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(nX_aux,
          u_beta_aux_2dim__), "assigning variable u_beta_aux");
      out__.write(u_beta_aux);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sigma_beta_1dim__,
          DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(sigma_beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(sigma_beta_1dim__),
        "assigning variable sigma_beta");
      out__.write_free_lb(0, sigma_beta);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_aux, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(sigma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_aux),
        "assigning variable sigma");
      out__.write_free_lb(0, sigma);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> u_aux =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_aux,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(u_aux_2dim__,
            DUMMY_VAR__));
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= u_aux_2dim__; ++sym1__) {
        current_statement__ = 10;
        for (int sym2__ = 1; sym2__ <= n_aux; ++sym2__) {
          current_statement__ = 10;
          stan::model::assign(u_aux, in__.read<local_scalar_t__>(),
            "assigning variable u_aux", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(u_aux);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta_tilde",
        "double", std::vector<size_t>{static_cast<size_t>(nX)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "u_delta",
        "double", std::vector<size_t>{static_cast<size_t>(n_delta)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "tau", "double",
        std::vector<size_t>{static_cast<size_t>(tau_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "class_mean",
        "double",
        std::vector<size_t>{static_cast<size_t>(class_mean_1dim__)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "class_sd",
        "double", std::vector<size_t>{static_cast<size_t>(class_sd_1dim__)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "z_class",
        "double", std::vector<size_t>{static_cast<size_t>(z_class_1dim__)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "u_beta_aux",
        "double",
        std::vector<size_t>{static_cast<size_t>(nX_aux),
          static_cast<size_t>(u_beta_aux_2dim__)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "sigma_beta",
        "double",
        std::vector<size_t>{static_cast<size_t>(sigma_beta_1dim__)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(n_aux)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "u_aux", "double",
        std::vector<size_t>{static_cast<size_t>(n_aux),
          static_cast<size_t>(u_aux_2dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta_tilde =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nX, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_tilde_flat__;
        current_statement__ = 1;
        beta_tilde_flat__ = context__.vals_r("beta_tilde");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(beta_tilde, beta_tilde_flat__[(pos__ - 1)],
            "assigning variable beta_tilde", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta_tilde);
      Eigen::Matrix<local_scalar_t__,-1,1> u_delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_delta, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> u_delta_flat__;
        current_statement__ = 2;
        u_delta_flat__ = context__.vals_r("u_delta");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(u_delta, u_delta_flat__[(pos__ - 1)],
            "assigning variable u_delta", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(u_delta);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tau_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> tau_flat__;
        current_statement__ = 3;
        tau_flat__ = context__.vals_r("tau");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(tau, tau_flat__[(pos__ - 1)],
            "assigning variable tau", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, tau);
      Eigen::Matrix<local_scalar_t__,-1,1> class_mean =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(class_mean_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> class_mean_flat__;
        current_statement__ = 4;
        class_mean_flat__ = context__.vals_r("class_mean");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= class_mean_1dim__; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(class_mean, class_mean_flat__[(pos__ - 1)],
            "assigning variable class_mean", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(class_mean);
      Eigen::Matrix<local_scalar_t__,-1,1> class_sd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(class_sd_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> class_sd_flat__;
        current_statement__ = 5;
        class_sd_flat__ = context__.vals_r("class_sd");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= class_sd_1dim__; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(class_sd, class_sd_flat__[(pos__ - 1)],
            "assigning variable class_sd", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, class_sd);
      Eigen::Matrix<local_scalar_t__,-1,1> z_class =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_class_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_class_flat__;
        current_statement__ = 6;
        z_class_flat__ = context__.vals_r("z_class");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= z_class_1dim__; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(z_class, z_class_flat__[(pos__ - 1)],
            "assigning variable z_class", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(z_class);
      Eigen::Matrix<local_scalar_t__,-1,-1> u_beta_aux =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nX_aux,
          u_beta_aux_2dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> u_beta_aux_flat__;
        current_statement__ = 7;
        u_beta_aux_flat__ = context__.vals_r("u_beta_aux");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= u_beta_aux_2dim__; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= nX_aux; ++sym2__) {
            current_statement__ = 7;
            stan::model::assign(u_beta_aux, u_beta_aux_flat__[(pos__ - 1)],
              "assigning variable u_beta_aux",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 7;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(u_beta_aux);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sigma_beta_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_beta_flat__;
        current_statement__ = 8;
        sigma_beta_flat__ = context__.vals_r("sigma_beta");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= sigma_beta_1dim__; ++sym1__) {
          current_statement__ = 8;
          stan::model::assign(sigma_beta, sigma_beta_flat__[(pos__ - 1)],
            "assigning variable sigma_beta", stan::model::index_uni(sym1__));
          current_statement__ = 8;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma_beta);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_aux, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 9;
        sigma_flat__ = context__.vals_r("sigma");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= n_aux; ++sym1__) {
          current_statement__ = 9;
          stan::model::assign(sigma, sigma_flat__[(pos__ - 1)],
            "assigning variable sigma", stan::model::index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> u_aux =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_aux,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(u_aux_2dim__,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> u_aux_flat__;
        current_statement__ = 10;
        u_aux_flat__ = context__.vals_r("u_aux");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= u_aux_2dim__; ++sym1__) {
          current_statement__ = 10;
          for (int sym2__ = 1; sym2__ <= n_aux; ++sym2__) {
            current_statement__ = 10;
            stan::model::assign(u_aux, u_aux_flat__[(pos__ - 1)],
              "assigning variable u_aux", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 10;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(u_aux);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta_tilde", "u_delta", "tau",
                "class_mean", "class_sd", "z_class", "u_beta_aux",
                "sigma_beta", "sigma", "u_aux"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"log_L_ipd", "log_L_agd_arm", "lscoef", "scoef_temp",
             "beta_aux", "eta_ipd", "f_delta", "allbeta", "mu", "d", "omega",
             "beta", "eta_agd_contrast_ii", "eta_agd_contrast_bar", "f_class"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"scoef", "d_aux", "log_lik", "resdev", "fitted_agd_contrast",
             "theta_bar_cum_agd_contrast", "delta"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    nX)},
                std::vector<size_t>{static_cast<size_t>(n_delta)},
                std::vector<size_t>{static_cast<size_t>(tau_1dim__)},
                std::vector<size_t>{static_cast<size_t>(class_mean_1dim__)},
                std::vector<size_t>{static_cast<size_t>(class_sd_1dim__)},
                std::vector<size_t>{static_cast<size_t>(z_class_1dim__)},
                std::vector<size_t>{static_cast<size_t>(nX_aux),
                  static_cast<size_t>(u_beta_aux_2dim__)},
                std::vector<size_t>{static_cast<size_t>(sigma_beta_1dim__)},
                std::vector<size_t>{static_cast<size_t>(n_aux)},
                std::vector<size_t>{static_cast<size_t>(n_aux),
                  static_cast<size_t>(u_aux_2dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(ni_ipd)},
             std::vector<size_t>{static_cast<size_t>(ni_agd_arm)},
             std::vector<size_t>{static_cast<size_t>(n_aux),
               static_cast<size_t>(lscoef_2dim__)},
             std::vector<size_t>{static_cast<size_t>(scoef_temp_1dim__),
               static_cast<size_t>(n_scoef)},
             std::vector<size_t>{static_cast<size_t>(nX_aux),
               static_cast<size_t>(beta_aux_2dim__)},
             std::vector<size_t>{static_cast<size_t>(ni_ipd)},
             std::vector<size_t>{static_cast<size_t>(n_delta)},
             std::vector<size_t>{static_cast<size_t>(nX)},
             std::vector<size_t>{static_cast<size_t>(totns)},
             std::vector<size_t>{static_cast<size_t>(d_1dim__)},
             std::vector<size_t>{static_cast<size_t>(nodesplit)},
             std::vector<size_t>{static_cast<size_t>(beta_1dim__)},
             std::vector<size_t>{static_cast<size_t>(
                                   eta_agd_contrast_ii_1dim__)},
             std::vector<size_t>{static_cast<size_t>(ni_agd_contrast)},
             std::vector<size_t>{static_cast<size_t>(f_class_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n_aux),
               static_cast<size_t>(n_scoef)},
             std::vector<size_t>{static_cast<size_t>(d_aux_1dim__),
               static_cast<size_t>(d_aux_2dim__)},
             std::vector<size_t>{static_cast<size_t>(log_lik_1dim__)},
             std::vector<size_t>{static_cast<size_t>(resdev_1dim__)},
             std::vector<size_t>{static_cast<size_t>(ni_agd_contrast)},
             std::vector<size_t>{static_cast<size_t>(
                                   theta_bar_cum_agd_contrast_1dim__)},
             std::vector<size_t>{static_cast<size_t>(n_delta)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_tilde" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
      param_names__.emplace_back(std::string() + "u_delta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= class_mean_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "class_mean" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= class_sd_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "class_sd" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= z_class_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_class" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= u_beta_aux_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= nX_aux; ++sym2__) {
        param_names__.emplace_back(std::string() + "u_beta_aux" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= sigma_beta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_aux; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= u_aux_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_aux; ++sym2__) {
        param_names__.emplace_back(std::string() + "u_aux" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= ni_ipd; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_L_ipd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_agd_arm; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_L_agd_arm" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= lscoef_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_aux; ++sym2__) {
          param_names__.emplace_back(std::string() + "lscoef" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_scoef; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= scoef_temp_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "scoef_temp" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= beta_aux_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nX_aux; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta_aux" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= ni_ipd; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_ipd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
        param_names__.emplace_back(std::string() + "f_delta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
        param_names__.emplace_back(std::string() + "allbeta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= totns; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= d_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "d" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nodesplit; ++sym1__) {
        param_names__.emplace_back(std::string() + "omega" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= eta_agd_contrast_ii_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_agd_contrast_ii" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_agd_contrast; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_agd_contrast_bar" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= f_class_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "f_class" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_scoef; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_aux; ++sym2__) {
          param_names__.emplace_back(std::string() + "scoef" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= d_aux_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= d_aux_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "d_aux" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= resdev_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "resdev" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_agd_contrast; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_agd_contrast" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <=
           theta_bar_cum_agd_contrast_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "theta_bar_cum_agd_contrast" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
        param_names__.emplace_back(std::string() + "delta" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_tilde" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
      param_names__.emplace_back(std::string() + "u_delta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= class_mean_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "class_mean" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= class_sd_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "class_sd" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= z_class_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_class" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= u_beta_aux_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= nX_aux; ++sym2__) {
        param_names__.emplace_back(std::string() + "u_beta_aux" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= sigma_beta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_aux; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= u_aux_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_aux; ++sym2__) {
        param_names__.emplace_back(std::string() + "u_aux" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= ni_ipd; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_L_ipd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_agd_arm; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_L_agd_arm" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= lscoef_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_aux; ++sym2__) {
          param_names__.emplace_back(std::string() + "lscoef" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_scoef; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= scoef_temp_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "scoef_temp" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= beta_aux_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nX_aux; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta_aux" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= ni_ipd; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_ipd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
        param_names__.emplace_back(std::string() + "f_delta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
        param_names__.emplace_back(std::string() + "allbeta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= totns; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= d_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "d" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nodesplit; ++sym1__) {
        param_names__.emplace_back(std::string() + "omega" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= eta_agd_contrast_ii_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_agd_contrast_ii" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_agd_contrast; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_agd_contrast_bar" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= f_class_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "f_class" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_scoef; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_aux; ++sym2__) {
          param_names__.emplace_back(std::string() + "scoef" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= d_aux_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= d_aux_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "d_aux" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= resdev_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "resdev" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_agd_contrast; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_agd_contrast" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <=
           theta_bar_cum_agd_contrast_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "theta_bar_cum_agd_contrast" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
        param_names__.emplace_back(std::string() + "delta" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nX) + "},\"block\":\"parameters\"},{\"name\":\"u_delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tau_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"class_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(class_mean_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"class_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(class_sd_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"z_class\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_class_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"u_beta_aux\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nX_aux) + ",\"cols\":" + std::to_string(u_beta_aux_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sigma_beta_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_aux) + "},\"block\":\"parameters\"},{\"name\":\"u_aux\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_aux) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_aux_2dim__) + "}},\"block\":\"parameters\"},{\"name\":\"log_L_ipd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_ipd) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_L_agd_arm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_agd_arm) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lscoef\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_aux) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(lscoef_2dim__) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"scoef_temp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(scoef_temp_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_scoef) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_aux\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nX_aux) + ",\"cols\":" + std::to_string(beta_aux_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_ipd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_ipd) + "},\"block\":\"transformed_parameters\"},{\"name\":\"f_delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"transformed_parameters\"},{\"name\":\"allbeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nX) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(totns) + "},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nodesplit) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_agd_contrast_ii\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eta_agd_contrast_ii_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_agd_contrast_bar\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_agd_contrast) + "},\"block\":\"transformed_parameters\"},{\"name\":\"f_class\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(f_class_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"scoef\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_aux) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_scoef) + "}},\"block\":\"generated_quantities\"},{\"name\":\"d_aux\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d_aux_1dim__) + ",\"cols\":" + std::to_string(d_aux_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"resdev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(resdev_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"fitted_agd_contrast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_agd_contrast) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta_bar_cum_agd_contrast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(theta_bar_cum_agd_contrast_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nX) + "},\"block\":\"parameters\"},{\"name\":\"u_delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tau_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"class_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(class_mean_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"class_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(class_sd_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"z_class\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_class_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"u_beta_aux\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nX_aux) + ",\"cols\":" + std::to_string(u_beta_aux_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sigma_beta_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_aux) + "},\"block\":\"parameters\"},{\"name\":\"u_aux\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_aux) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_aux_2dim__) + "}},\"block\":\"parameters\"},{\"name\":\"log_L_ipd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_ipd) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_L_agd_arm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_agd_arm) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lscoef\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_aux) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(lscoef_2dim__) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"scoef_temp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(scoef_temp_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_scoef) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_aux\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nX_aux) + ",\"cols\":" + std::to_string(beta_aux_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_ipd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_ipd) + "},\"block\":\"transformed_parameters\"},{\"name\":\"f_delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"transformed_parameters\"},{\"name\":\"allbeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nX) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(totns) + "},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nodesplit) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_agd_contrast_ii\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eta_agd_contrast_ii_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_agd_contrast_bar\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_agd_contrast) + "},\"block\":\"transformed_parameters\"},{\"name\":\"f_class\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(f_class_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"scoef\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_aux) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_scoef) + "}},\"block\":\"generated_quantities\"},{\"name\":\"d_aux\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d_aux_1dim__) + ",\"cols\":" + std::to_string(d_aux_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"resdev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(resdev_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"fitted_agd_contrast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_agd_contrast) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta_bar_cum_agd_contrast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(theta_bar_cum_agd_contrast_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((nX + n_delta) + tau_1dim__) +
      class_mean_1dim__) + class_sd_1dim__) + z_class_1dim__) + (nX_aux *
      u_beta_aux_2dim__)) + sigma_beta_1dim__) + n_aux) + (n_aux *
      u_aux_2dim__));
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((((((((ni_ipd + ni_agd_arm) + (n_aux * lscoef_2dim__)) +
      (scoef_temp_1dim__ * n_scoef)) + (nX_aux * beta_aux_2dim__)) + ni_ipd)
      + n_delta) + nX) + totns) + d_1dim__) + nodesplit) + beta_1dim__) +
      eta_agd_contrast_ii_1dim__) + ni_agd_contrast) + f_class_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((n_aux * n_scoef) + (d_aux_1dim__ * d_aux_2dim__)) +
      log_lik_1dim__) + resdev_1dim__) + ni_agd_contrast) +
      theta_bar_cum_agd_contrast_1dim__) + n_delta));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((nX + n_delta) + tau_1dim__) +
      class_mean_1dim__) + class_sd_1dim__) + z_class_1dim__) + (nX_aux *
      u_beta_aux_2dim__)) + sigma_beta_1dim__) + n_aux) + (n_aux *
      u_aux_2dim__));
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((((((((ni_ipd + ni_agd_arm) + (n_aux * lscoef_2dim__)) +
      (scoef_temp_1dim__ * n_scoef)) + (nX_aux * beta_aux_2dim__)) + ni_ipd)
      + n_delta) + nX) + totns) + d_1dim__) + nodesplit) + beta_1dim__) +
      eta_agd_contrast_ii_1dim__) + ni_agd_contrast) + f_class_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((n_aux * n_scoef) + (d_aux_1dim__ * d_aux_2dim__)) +
      log_lik_1dim__) + resdev_1dim__) + ni_agd_contrast) +
      theta_bar_cum_agd_contrast_1dim__) + n_delta));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_survival_mspline_namespace::model_survival_mspline;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_survival_mspline_namespace::profiles__;
}
#endif
#endif
