// Generated by rstantools.  Do not edit by hand.

/*
    multinma is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    multinma is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with multinma.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_ordered_multinomial_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 553> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 215, column 0 to column 22)",
  " (in 'string', line 218, column 0 to column 24)",
  " (in 'string', line 219, column 0 to column 34)",
  " (in 'string', line 222, column 2 to column 34)",
  " (in 'string', line 225, column 2 to column 22)",
  " (in 'string', line 226, column 2 to column 39)",
  " (in 'string', line 227, column 2 to column 93)",
  " (in 'string', line 228, column 2 to column 47)",
  " (in 'string', line 229, column 2 to column 51)",
  " (in 'string', line 234, column 0 to column 23)",
  " (in 'string', line 239, column 0 to line 244, column 14)",
  " (in 'string', line 247, column 0 to column 58)",
  " (in 'string', line 249, column 0 to column 17)",
  " (in 'string', line 251, column 0 to column 56)",
  " (in 'string', line 253, column 0 to column 24)",
  " (in 'string', line 255, column 0 to column 47)",
  " (in 'string', line 260, column 0 to column 70)",
  " (in 'string', line 261, column 0 to column 45)",
  " (in 'string', line 577, column 2 to column 40)",
  " (in 'string', line 578, column 2 to column 48)",
  " (in 'string', line 579, column 2 to column 109)",
  " (in 'string', line 584, column 0 to column 54)",
  " (in 'string', line 585, column 0 to column 53)",
  " (in 'string', line 586, column 0 to column 44)",
  " (in 'string', line 589, column 2 to column 66)",
  " (in 'string', line 593, column 0 to column 22)",
  " (in 'string', line 266, column 2 to column 24)",
  " (in 'string', line 265, column 11 to line 267, column 1)",
  " (in 'string', line 265, column 0 to line 267, column 1)",
  " (in 'string', line 272, column 2 to column 44)",
  " (in 'string', line 271, column 39 to line 273, column 1)",
  " (in 'string', line 271, column 0 to line 273, column 1)",
  " (in 'string', line 278, column 2 to column 33)",
  " (in 'string', line 277, column 15 to line 279, column 1)",
  " (in 'string', line 277, column 0 to line 279, column 1)",
  " (in 'string', line 301, column 2 to line 303, column 23)",
  " (in 'string', line 300, column 7 to line 304, column 1)",
  " (in 'string', line 289, column 11 to column 17)",
  " (in 'string', line 289, column 4 to line 291, column 25)",
  " (in 'string', line 297, column 8 to column 37)",
  " (in 'string', line 295, column 8 to column 69)",
  " (in 'string', line 294, column 6 to line 297, column 37)",
  " (in 'string', line 293, column 24 to line 298, column 5)",
  " (in 'string', line 293, column 4 to line 298, column 5)",
  " (in 'string', line 288, column 2 to line 299, column 3)",
  " (in 'string', line 287, column 8 to line 300, column 1)",
  " (in 'string', line 287, column 0 to line 304, column 1)",
  " (in 'string', line 286, column 12 to line 305, column 1)",
  " (in 'string', line 286, column 0 to line 305, column 1)",
  " (in 'string', line 348, column 4 to line 350, column 34)",
  " (in 'string', line 347, column 9 to line 351, column 3)",
  " (in 'string', line 337, column 11 to column 33)",
  " (in 'string', line 337, column 4 to line 339, column 34)",
  " (in 'string', line 345, column 6 to column 57)",
  " (in 'string', line 343, column 8 to column 108)",
  " (in 'string', line 342, column 6 to line 345, column 57)",
  " (in 'string', line 341, column 33 to line 346, column 5)",
  " (in 'string', line 341, column 4 to line 346, column 5)",
  " (in 'string', line 336, column 10 to line 347, column 3)",
  " (in 'string', line 336, column 2 to line 351, column 3)",
  " (in 'string', line 335, column 7 to line 352, column 1)",
  " (in 'string', line 310, column 9 to column 35)",
  " (in 'string', line 310, column 2 to line 312, column 32)",
  " (in 'string', line 328, column 6 to column 123)",
  " (in 'string', line 327, column 38 to line 329, column 5)",
  " (in 'string', line 327, column 9 to line 329, column 5)",
  " (in 'string', line 326, column 26 to column 70)",
  " (in 'string', line 326, column 4 to line 329, column 5)",
  " (in 'string', line 332, column 6 to column 85)",
  " (in 'string', line 331, column 33 to line 333, column 5)",
  " (in 'string', line 331, column 4 to line 333, column 5)",
  " (in 'string', line 325, column 9 to line 334, column 3)",
  " (in 'string', line 320, column 8 to line 321, column 78)",
  " (in 'string', line 317, column 8 to line 318, column 127)",
  " (in 'string', line 316, column 6 to line 321, column 78)",
  " (in 'string', line 323, column 6 to column 85)",
  " (in 'string', line 315, column 33 to line 324, column 5)",
  " (in 'string', line 315, column 4 to line 324, column 5)",
  " (in 'string', line 314, column 10 to line 325, column 3)",
  " (in 'string', line 314, column 2 to line 334, column 3)",
  " (in 'string', line 309, column 18 to line 335, column 1)",
  " (in 'string', line 309, column 0 to line 352, column 1)",
  " (in 'string', line 308, column 21 to line 353, column 1)",
  " (in 'string', line 308, column 0 to line 353, column 1)",
  " (in 'string', line 354, column 2 to column 12)",
  " (in 'string', line 355, column 16 to column 30)",
  " (in 'string', line 355, column 2 to column 30)",
  " (in 'string', line 357, column 2 to column 25)",
  " (in 'string', line 358, column 2 to column 41)",
  " (in 'string', line 362, column 11 to column 26)",
  " (in 'string', line 362, column 4 to column 35)",
  " (in 'string', line 369, column 8 to column 68)",
  " (in 'string', line 368, column 11 to line 369, column 68)",
  " (in 'string', line 367, column 8 to column 60)",
  " (in 'string', line 366, column 11 to line 369, column 68)",
  " (in 'string', line 365, column 8 to column 66)",
  " (in 'string', line 364, column 6 to line 369, column 68)",
  " (in 'string', line 363, column 35 to line 370, column 5)",
  " (in 'string', line 363, column 4 to line 370, column 5)",
  " (in 'string', line 372, column 4 to column 36)",
  " (in 'string', line 376, column 6 to column 62)",
  " (in 'string', line 374, column 35 to line 377, column 5)",
  " (in 'string', line 374, column 4 to line 377, column 5)",
  " (in 'string', line 379, column 4 to column 68)",
  " (in 'string', line 361, column 22 to line 380, column 3)",
  " (in 'string', line 361, column 2 to line 380, column 3)",
  " (in 'string', line 383, column 11 to column 32)",
  " (in 'string', line 383, column 4 to line 385, column 33)",
  " (in 'string', line 496, column 14 to column 97)",
  " (in 'string', line 495, column 47 to line 497, column 13)",
  " (in 'string', line 495, column 12 to line 497, column 13)",
  " (in 'string', line 494, column 34 to line 498, column 11)",
  " (in 'string', line 494, column 10 to line 498, column 11)",
  " (in 'string', line 493, column 30 to line 499, column 9)",
  " (in 'string', line 493, column 15 to line 499, column 9)",
  " (in 'string', line 490, column 14 to column 89)",
  " (in 'string', line 489, column 47 to line 491, column 13)",
  " (in 'string', line 489, column 12 to line 491, column 13)",
  " (in 'string', line 488, column 34 to line 492, column 11)",
  " (in 'string', line 488, column 10 to line 492, column 11)",
  " (in 'string', line 487, column 30 to line 493, column 9)",
  " (in 'string', line 487, column 15 to line 499, column 9)",
  " (in 'string', line 484, column 14 to column 95)",
  " (in 'string', line 483, column 47 to line 485, column 13)",
  " (in 'string', line 483, column 12 to line 485, column 13)",
  " (in 'string', line 482, column 34 to line 486, column 11)",
  " (in 'string', line 482, column 10 to line 486, column 11)",
  " (in 'string', line 481, column 23 to line 487, column 9)",
  " (in 'string', line 481, column 8 to line 499, column 9)",
  " (in 'string', line 480, column 13 to line 500, column 7)",
  " (in 'string', line 448, column 8 to column 28)",
  " (in 'string', line 474, column 14 to column 51)",
  " (in 'string', line 472, column 14 to column 85)",
  " (in 'string', line 471, column 12 to line 474, column 51)",
  " (in 'string', line 476, column 14 to column 92)",
  " (in 'string', line 475, column 47 to line 477, column 13)",
  " (in 'string', line 475, column 12 to line 477, column 13)",
  " (in 'string', line 470, column 34 to line 478, column 11)",
  " (in 'string', line 470, column 10 to line 478, column 11)",
  " (in 'string', line 469, column 30 to line 479, column 9)",
  " (in 'string', line 469, column 15 to line 479, column 9)",
  " (in 'string', line 464, column 14 to column 51)",
  " (in 'string', line 462, column 14 to column 85)",
  " (in 'string', line 461, column 12 to line 464, column 51)",
  " (in 'string', line 466, column 14 to column 84)",
  " (in 'string', line 465, column 47 to line 467, column 13)",
  " (in 'string', line 465, column 12 to line 467, column 13)",
  " (in 'string', line 460, column 34 to line 468, column 11)",
  " (in 'string', line 460, column 10 to line 468, column 11)",
  " (in 'string', line 459, column 30 to line 469, column 9)",
  " (in 'string', line 459, column 15 to line 479, column 9)",
  " (in 'string', line 454, column 14 to column 51)",
  " (in 'string', line 452, column 14 to column 85)",
  " (in 'string', line 451, column 12 to line 454, column 51)",
  " (in 'string', line 456, column 14 to column 90)",
  " (in 'string', line 455, column 47 to line 457, column 13)",
  " (in 'string', line 455, column 12 to line 457, column 13)",
  " (in 'string', line 450, column 34 to line 458, column 11)",
  " (in 'string', line 450, column 10 to line 458, column 11)",
  " (in 'string', line 449, column 23 to line 459, column 9)",
  " (in 'string', line 449, column 8 to line 479, column 9)",
  " (in 'string', line 447, column 14 to line 480, column 7)",
  " (in 'string', line 447, column 6 to line 500, column 7)",
  " (in 'string', line 446, column 11 to line 501, column 5)",
  " (in 'string', line 436, column 14 to column 167)",
  " (in 'string', line 435, column 47 to line 437, column 13)",
  " (in 'string', line 435, column 12 to line 437, column 13)",
  " (in 'string', line 434, column 34 to line 438, column 11)",
  " (in 'string', line 434, column 10 to line 438, column 11)",
  " (in 'string', line 433, column 30 to line 439, column 9)",
  " (in 'string', line 433, column 15 to line 439, column 9)",
  " (in 'string', line 430, column 14 to column 159)",
  " (in 'string', line 429, column 47 to line 431, column 13)",
  " (in 'string', line 429, column 12 to line 431, column 13)",
  " (in 'string', line 428, column 34 to line 432, column 11)",
  " (in 'string', line 428, column 10 to line 432, column 11)",
  " (in 'string', line 427, column 30 to line 433, column 9)",
  " (in 'string', line 427, column 15 to line 439, column 9)",
  " (in 'string', line 424, column 14 to column 165)",
  " (in 'string', line 423, column 47 to line 425, column 13)",
  " (in 'string', line 423, column 12 to line 425, column 13)",
  " (in 'string', line 422, column 34 to line 426, column 11)",
  " (in 'string', line 422, column 10 to line 426, column 11)",
  " (in 'string', line 421, column 23 to line 427, column 9)",
  " (in 'string', line 421, column 8 to line 439, column 9)",
  " (in 'string', line 420, column 13 to line 440, column 7)",
  " (in 'string', line 388, column 15 to column 19)",
  " (in 'string', line 388, column 8 to column 36)",
  " (in 'string', line 414, column 14 to column 94)",
  " (in 'string', line 412, column 14 to column 128)",
  " (in 'string', line 411, column 12 to line 414, column 94)",
  " (in 'string', line 416, column 14 to column 119)",
  " (in 'string', line 415, column 47 to line 417, column 13)",
  " (in 'string', line 415, column 12 to line 417, column 13)",
  " (in 'string', line 410, column 34 to line 418, column 11)",
  " (in 'string', line 410, column 10 to line 418, column 11)",
  " (in 'string', line 409, column 30 to line 419, column 9)",
  " (in 'string', line 409, column 15 to line 419, column 9)",
  " (in 'string', line 404, column 14 to column 94)",
  " (in 'string', line 402, column 14 to column 128)",
  " (in 'string', line 401, column 12 to line 404, column 94)",
  " (in 'string', line 406, column 14 to column 111)",
  " (in 'string', line 405, column 47 to line 407, column 13)",
  " (in 'string', line 405, column 12 to line 407, column 13)",
  " (in 'string', line 400, column 34 to line 408, column 11)",
  " (in 'string', line 400, column 10 to line 408, column 11)",
  " (in 'string', line 399, column 30 to line 409, column 9)",
  " (in 'string', line 399, column 15 to line 419, column 9)",
  " (in 'string', line 394, column 14 to column 94)",
  " (in 'string', line 392, column 14 to column 128)",
  " (in 'string', line 391, column 12 to line 394, column 94)",
  " (in 'string', line 396, column 14 to column 117)",
  " (in 'string', line 395, column 47 to line 397, column 13)",
  " (in 'string', line 395, column 12 to line 397, column 13)",
  " (in 'string', line 390, column 34 to line 398, column 11)",
  " (in 'string', line 390, column 10 to line 398, column 11)",
  " (in 'string', line 389, column 23 to line 399, column 9)",
  " (in 'string', line 389, column 8 to line 419, column 9)",
  " (in 'string', line 387, column 14 to line 420, column 7)",
  " (in 'string', line 387, column 6 to line 440, column 7)",
  " (in 'string', line 443, column 10 to column 85)",
  " (in 'string', line 442, column 43 to line 444, column 9)",
  " (in 'string', line 442, column 8 to line 444, column 9)",
  " (in 'string', line 441, column 30 to line 445, column 7)",
  " (in 'string', line 441, column 6 to line 445, column 7)",
  " (in 'string', line 386, column 22 to line 446, column 5)",
  " (in 'string', line 386, column 4 to line 501, column 5)",
  " (in 'string', line 504, column 6 to column 56)",
  " (in 'string', line 507, column 8 to column 96)",
  " (in 'string', line 506, column 6 to line 507, column 96)",
  " (in 'string', line 509, column 6 to column 100)",
  " (in 'string', line 502, column 28 to line 510, column 5)",
  " (in 'string', line 502, column 4 to line 510, column 5)",
  " (in 'string', line 382, column 18 to line 511, column 3)",
  " (in 'string', line 382, column 2 to line 511, column 3)",
  " (in 'string', line 596, column 2 to column 12)",
  " (in 'string', line 599, column 6 to column 93)",
  " (in 'string', line 600, column 6 to column 13)",
  " (in 'string', line 598, column 21 to line 601, column 5)",
  " (in 'string', line 598, column 4 to line 601, column 5)",
  " (in 'string', line 597, column 41 to line 602, column 3)",
  " (in 'string', line 597, column 2 to line 602, column 3)",
  " (in 'string', line 605, column 6 to line 606, column 101)",
  " (in 'string', line 609, column 8 to column 49)",
  " (in 'string', line 608, column 6 to line 609, column 49)",
  " (in 'string', line 611, column 6 to column 13)",
  " (in 'string', line 604, column 47 to line 612, column 5)",
  " (in 'string', line 604, column 4 to line 612, column 5)",
  " (in 'string', line 603, column 31 to line 613, column 3)",
  " (in 'string', line 603, column 2 to line 613, column 3)",
  " (in 'string', line 595, column 8 to line 614, column 1)",
  " (in 'string', line 595, column 0 to line 614, column 1)",
  " (in 'string', line 619, column 4 to column 125)",
  " (in 'string', line 618, column 26 to line 620, column 3)",
  " (in 'string', line 618, column 2 to line 620, column 3)",
  " (in 'string', line 617, column 29 to line 621, column 1)",
  " (in 'string', line 617, column 0 to line 621, column 1)",
  " (in 'string', line 623, column 0 to column 43)",
  " (in 'string', line 627, column 2 to column 12)",
  " (in 'string', line 628, column 2 to column 9)",
  " (in 'string', line 630, column 4 to column 28)",
  " (in 'string', line 631, column 4 to line 632, column 102)",
  " (in 'string', line 633, column 4 to line 634, column 123)",
  " (in 'string', line 635, column 4 to column 12)",
  " (in 'string', line 629, column 31 to line 636, column 3)",
  " (in 'string', line 629, column 2 to line 636, column 3)",
  " (in 'string', line 626, column 0 to line 637, column 1)",
  " (in 'string', line 641, column 4 to column 59)",
  " (in 'string', line 642, column 4 to column 32)",
  " (in 'string', line 643, column 4 to column 33)",
  " (in 'string', line 640, column 22 to line 644, column 3)",
  " (in 'string', line 640, column 2 to line 644, column 3)",
  " (in 'string', line 647, column 10 to column 20)",
  " (in 'string', line 647, column 29 to column 33)",
  " (in 'string', line 647, column 4 to column 38)",
  " (in 'string', line 649, column 6 to column 82)",
  " (in 'string', line 650, column 6 to column 62)",
  " (in 'string', line 653, column 8 to column 177)",
  " (in 'string', line 651, column 35 to line 654, column 7)",
  " (in 'string', line 651, column 6 to line 654, column 7)",
  " (in 'string', line 655, column 6 to column 61)",
  " (in 'string', line 648, column 28 to line 656, column 5)",
  " (in 'string', line 648, column 4 to line 656, column 5)",
  " (in 'string', line 646, column 2 to line 657, column 3)",
  " (in 'string', line 661, column 13 to column 21)",
  " (in 'string', line 661, column 6 to column 41)",
  " (in 'string', line 662, column 41 to column 138)",
  " (in 'string', line 662, column 6 to column 138)",
  " (in 'string', line 664, column 6 to column 82)",
  " (in 'string', line 667, column 8 to column 123)",
  " (in 'string', line 666, column 6 to line 667, column 123)",
  " (in 'string', line 669, column 6 to column 126)",
  " (in 'string', line 660, column 28 to line 670, column 5)",
  " (in 'string', line 660, column 4 to line 670, column 5)",
  " (in 'string', line 659, column 26 to line 671, column 3)",
  " (in 'string', line 659, column 2 to line 671, column 3)",
  " (in 'string', line 519, column 0 to column 111)",
  " (in 'string', line 521, column 0 to column 86)",
  " (in 'string', line 523, column 0 to column 89)",
  " (in 'string', line 526, column 0 to column 90)",
  " (in 'string', line 535, column 11 to column 21)",
  " (in 'string', line 535, column 4 to column 29)",
  " (in 'string', line 542, column 6 to column 27)",
  " (in 'string', line 543, column 6 to column 28)",
  " (in 'string', line 541, column 34 to line 544, column 5)",
  " (in 'string', line 541, column 9 to line 544, column 5)",
  " (in 'string', line 538, column 6 to column 26)",
  " (in 'string', line 539, column 6 to column 25)",
  " (in 'string', line 537, column 29 to line 540, column 5)",
  " (in 'string', line 537, column 4 to line 544, column 5)",
  " (in 'string', line 545, column 4 to column 94)",
  " (in 'string', line 533, column 10 to line 546, column 3)",
  " (in 'string', line 533, column 9 to line 546, column 4)",
  " (in 'string', line 531, column 4 to column 92)",
  " (in 'string', line 530, column 27 to line 533, column 3)",
  " (in 'string', line 530, column 2 to line 546, column 4)",
  " (in 'string', line 529, column 8 to line 547, column 1)",
  " (in 'string', line 529, column 0 to line 547, column 1)",
  " (in 'string', line 550, column 0 to column 23)",
  " (in 'string', line 554, column 2 to column 74)",
  " (in 'string', line 553, column 21 to line 555, column 1)",
  " (in 'string', line 553, column 0 to line 555, column 1)",
  " (in 'string', line 558, column 4 to column 41)",
  " (in 'string', line 557, column 2 to line 558, column 41)",
  " (in 'string', line 562, column 4 to column 53)",
  " (in 'string', line 561, column 2 to line 562, column 53)",
  " (in 'string', line 569, column 11 to column 19)",
  " (in 'string', line 569, column 4 to column 29)",
  " (in 'string', line 571, column 6 to column 37)",
  " (in 'string', line 570, column 4 to line 571, column 37)",
  " (in 'string', line 572, column 4 to column 96)",
  " (in 'string', line 568, column 26 to line 573, column 3)",
  " (in 'string', line 568, column 2 to line 573, column 3)",
  " (in 'string', line 43, column 0 to column 20)",
  " (in 'string', line 44, column 0 to column 24)",
  " (in 'string', line 45, column 0 to column 29)",
  " (in 'string', line 47, column 0 to column 20)",
  " (in 'string', line 48, column 0 to column 24)",
  " (in 'string', line 49, column 0 to column 29)",
  " (in 'string', line 52, column 0 to column 22)",
  " (in 'string', line 53, column 6 to column 12)",
  " (in 'string', line 53, column 0 to column 35)",
  " (in 'string', line 54, column 6 to column 14)",
  " (in 'string', line 54, column 0 to column 37)",
  " (in 'string', line 55, column 0 to column 26)",
  " (in 'string', line 56, column 6 to column 18)",
  " (in 'string', line 56, column 0 to column 45)",
  " (in 'string', line 57, column 6 to column 21)",
  " (in 'string', line 57, column 0 to column 53)",
  " (in 'string', line 58, column 6 to column 21)",
  " (in 'string', line 58, column 0 to column 55)",
  " (in 'string', line 65, column 0 to column 16)",
  " (in 'string', line 66, column 0 to column 16)",
  " (in 'string', line 69, column 0 to column 21)",
  " (in 'string', line 70, column 0 to column 36)",
  " (in 'string', line 71, column 6 to column 13)",
  " (in 'string', line 71, column 0 to column 37)",
  " (in 'string', line 72, column 0 to column 22)",
  " (in 'string', line 73, column 0 to column 22)",
  " (in 'string', line 75, column 0 to column 18)",
  " (in 'string', line 78, column 7 to column 22)",
  " (in 'string', line 78, column 0 to column 39)",
  " (in 'string', line 79, column 11 to column 48)",
  " (in 'string', line 79, column 0 to column 69)",
  " (in 'string', line 82, column 0 to column 25)",
  " (in 'string', line 83, column 7 to column 57)",
  " (in 'string', line 83, column 59 to column 61)",
  " (in 'string', line 83, column 0 to column 65)",
  " (in 'string', line 84, column 7 to column 18)",
  " (in 'string', line 84, column 20 to column 31)",
  " (in 'string', line 84, column 0 to column 39)",
  " (in 'string', line 87, column 0 to column 33)",
  " (in 'string', line 88, column 7 to column 74)",
  " (in 'string', line 88, column 0 to column 84)",
  " (in 'string', line 91, column 0 to column 25)",
  " (in 'string', line 92, column 6 to column 56)",
  " (in 'string', line 92, column 0 to column 80)",
  " (in 'string', line 93, column 12 to column 34)",
  " (in 'string', line 93, column 0 to column 43)",
  " (in 'string', line 96, column 0 to column 32)",
  " (in 'string', line 99, column 0 to column 42)",
  " (in 'string', line 100, column 0 to column 30)",
  " (in 'string', line 101, column 0 to column 36)",
  " (in 'string', line 102, column 0 to column 33)",
  " (in 'string', line 104, column 0 to column 36)",
  " (in 'string', line 105, column 0 to column 24)",
  " (in 'string', line 106, column 0 to column 30)",
  " (in 'string', line 107, column 0 to column 27)",
  " (in 'string', line 109, column 0 to column 36)",
  " (in 'string', line 110, column 0 to column 36)",
  " (in 'string', line 111, column 0 to column 24)",
  " (in 'string', line 112, column 0 to column 30)",
  " (in 'string', line 113, column 0 to column 27)",
  " (in 'string', line 115, column 0 to column 36)",
  " (in 'string', line 116, column 0 to column 24)",
  " (in 'string', line 117, column 0 to column 30)",
  " (in 'string', line 118, column 0 to column 27)",
  " (in 'string', line 120, column 2 to column 20)",
  " (in 'string', line 121, column 8 to column 14)",
  " (in 'string', line 121, column 2 to column 47)",
  " (in 'string', line 122, column 8 to column 14)",
  " (in 'string', line 122, column 16 to column 20)",
  " (in 'string', line 122, column 2 to column 55)",
  " (in 'string', line 123, column 8 to column 14)",
  " (in 'string', line 123, column 2 to column 50)",
  " (in 'string', line 124, column 8 to column 18)",
  " (in 'string', line 124, column 20 to column 24)",
  " (in 'string', line 124, column 2 to column 49)",
  " (in 'string', line 125, column 9 to column 19)",
  " (in 'string', line 125, column 2 to column 31)",
  " (in 'string', line 126, column 8 to column 18)",
  " (in 'string', line 126, column 20 to column 24)",
  " (in 'string', line 126, column 2 to column 63)",
  " (in 'string', line 127, column 8 to column 18)",
  " (in 'string', line 127, column 2 to column 58)",
  " (in 'string', line 129, column 2 to column 38)",
  " (in 'string', line 130, column 2 to column 26)",
  " (in 'string', line 131, column 2 to column 32)",
  " (in 'string', line 132, column 2 to column 29)",
  " (in 'string', line 135, column 8 to column 14)",
  " (in 'string', line 135, column 23 to column 27)",
  " (in 'string', line 135, column 2 to column 81)",
  " (in 'string', line 136, column 8 to column 18)",
  " (in 'string', line 136, column 27 to column 31)",
  " (in 'string', line 136, column 2 to column 97)",
  " (in 'string', line 143, column 0 to column 54)",
  " (in 'string', line 147, column 0 to column 46)",
  " (in 'string', line 149, column 7 to column 14)",
  " (in 'string', line 149, column 0 to column 47)",
  " (in 'string', line 151, column 0 to column 21)",
  " (in 'string', line 152, column 21 to column 28)",
  " (in 'string', line 152, column 0 to column 84)",
  " (in 'string', line 154, column 0 to column 17)",
  " (in 'string', line 155, column 0 to column 21)",
  " (in 'string', line 156, column 0 to column 34)",
  " (in 'string', line 157, column 0 to column 58)",
  " (in 'string', line 158, column 7 to column 30)",
  " (in 'string', line 158, column 0 to column 81)",
  " (in 'string', line 159, column 6 to column 29)",
  " (in 'string', line 159, column 0 to column 85)",
  " (in 'string', line 160, column 6 to column 33)",
  " (in 'string', line 160, column 0 to column 90)",
  " (in 'string', line 166, column 0 to column 32)",
  " (in 'string', line 172, column 6 to column 47)",
  " (in 'string', line 172, column 0 to column 135)",
  " (in 'string', line 175, column 10 to column 12)",
  " (in 'string', line 175, column 0 to column 21)",
  " (in 'string', line 176, column 7 to column 13)",
  " (in 'string', line 176, column 15 to column 17)",
  " (in 'string', line 176, column 0 to column 57)",
  " (in 'string', line 177, column 7 to column 28)",
  " (in 'string', line 177, column 30 to column 32)",
  " (in 'string', line 177, column 0 to column 117)",
  " (in 'string', line 178, column 7 to column 33)",
  " (in 'string', line 178, column 35 to column 37)",
  " (in 'string', line 178, column 0 to column 176)",
  " (in 'string', line 181, column 0 to column 17)",
  " (in 'string', line 182, column 7 to column 40)",
  " (in 'string', line 182, column 0 to column 105)",
  " (in 'string', line 183, column 7 to column 59)",
  " (in 'string', line 183, column 0 to column 169)",
  " (in 'string', line 184, column 7 to column 69)",
  " (in 'string', line 184, column 0 to column 233)",
  " (in 'string', line 187, column 0 to column 72)",
  " (in 'string', line 190, column 7 to column 44)",
  " (in 'string', line 190, column 46 to column 83)",
  " (in 'string', line 190, column 0 to column 129)",
  " (in 'string', line 194, column 6 to column 21)",
  " (in 'string', line 194, column 0 to column 43)",
  " (in 'string', line 196, column 2 to column 12)",
  " (in 'string', line 197, column 2 to column 12)",
  " (in 'string', line 204, column 6 to column 13)",
  " (in 'string', line 203, column 11 to line 205, column 5)",
  " (in 'string', line 200, column 6 to column 29)",
  " (in 'string', line 201, column 6 to column 13)",
  " (in 'string', line 202, column 6 to column 12)",
  " (in 'string', line 199, column 41 to line 203, column 5)",
  " (in 'string', line 199, column 4 to line 205, column 5)",
  " (in 'string', line 198, column 37 to line 206, column 3)",
  " (in 'string', line 198, column 2 to line 206, column 3)",
  " (in 'string', line 208, column 2 to column 25)",
  " (in 'string', line 195, column 21 to line 209, column 1)",
  " (in 'string', line 195, column 0 to line 209, column 1)",
  " (in 'string', line 215, column 7 to column 9)",
  " (in 'string', line 218, column 7 to column 14)",
  " (in 'string', line 219, column 18 to column 28)",
  " (in 'string', line 222, column 19 to column 27)",
  " (in 'string', line 225, column 9 to column 17)",
  " (in 'string', line 226, column 8 to column 14)",
  " (in 'string', line 226, column 23 to column 27)",
  " (in 'string', line 227, column 9 to column 45)",
  " (in 'string', line 227, column 47 to column 74)",
  " (in 'string', line 228, column 8 to column 18)",
  " (in 'string', line 228, column 27 to column 31)",
  " (in 'string', line 229, column 8 to column 18)",
  " (in 'string', line 229, column 27 to column 31)",
  " (in 'string', line 234, column 7 to column 13)",
  " (in 'string', line 239, column 7 to column 14)",
  " (in 'string', line 247, column 7 to column 9)",
  " (in 'string', line 249, column 7 to column 12)",
  " (in 'string', line 251, column 7 to column 13)",
  " (in 'string', line 253, column 7 to column 16)",
  " (in 'string', line 255, column 7 to column 40)",
  " (in 'string', line 260, column 7 to column 48)",
  " (in 'string', line 261, column 7 to column 22)",
  " (in 'string', line 577, column 8 to column 14)",
  " (in 'string', line 577, column 23 to column 27)",
  " (in 'string', line 578, column 8 to column 18)",
  " (in 'string', line 578, column 27 to column 31)",
  " (in 'string', line 579, column 9 to column 32)",
  " (in 'string', line 579, column 34 to column 38)",
  " (in 'string', line 584, column 7 to column 44)",
  " (in 'string', line 585, column 7 to column 44)",
  " (in 'string', line 586, column 7 to column 22)",
  " (in 'string', line 589, column 9 to column 37)",
  " (in 'string', line 593, column 7 to column 14)",
  " (in 'string', line 21, column 4 to column 42)",
  " (in 'string', line 20, column 9 to line 22, column 3)",
  " (in 'string', line 18, column 4 to column 44)",
  " (in 'string', line 19, column 4 to column 22)",
  " (in 'string', line 17, column 24 to line 20, column 3)",
  " (in 'string', line 17, column 9 to line 22, column 3)",
  " (in 'string', line 16, column 4 to column 35)",
  " (in 'string', line 15, column 24 to line 17, column 3)",
  " (in 'string', line 15, column 9 to line 22, column 3)",
  " (in 'string', line 14, column 4 to column 29)",
  " (in 'string', line 13, column 24 to line 15, column 3)",
  " (in 'string', line 13, column 9 to line 22, column 3)",
  " (in 'string', line 12, column 4 to column 39)",
  " (in 'string', line 11, column 24 to line 13, column 3)",
  " (in 'string', line 11, column 9 to line 22, column 3)",
  " (in 'string', line 10, column 4 to column 32)",
  " (in 'string', line 9, column 24 to line 11, column 3)",
  " (in 'string', line 9, column 9 to line 22, column 3)",
  " (in 'string', line 8, column 4 to column 32)",
  " (in 'string', line 7, column 24 to line 9, column 3)",
  " (in 'string', line 7, column 9 to line 22, column 3)",
  " (in 'string', line 5, column 17 to line 7, column 3)",
  " (in 'string', line 5, column 2 to line 22, column 3)",
  " (in 'string', line 23, column 2 to column 9)",
  " (in 'string', line 4, column 77 to line 24, column 1)",
  " (in 'string', line 28, column 2 to column 18)",
  " (in 'string', line 29, column 2 to column 18)",
  " (in 'string', line 30, column 2 to column 12)",
  " (in 'string', line 33, column 23 to column 30)",
  " (in 'string', line 33, column 6 to column 30)",
  " (in 'string', line 32, column 19 to line 34, column 5)",
  " (in 'string', line 32, column 4 to line 34, column 5)",
  " (in 'string', line 31, column 17 to line 35, column 3)",
  " (in 'string', line 31, column 2 to line 35, column 3)",
  " (in 'string', line 36, column 2 to column 11)",
  " (in 'string', line 27, column 28 to line 37, column 1)"};
template <bool propto__, typename T0__, typename T2__, typename T3__,
          typename T4__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
void
prior_select_lp(const T0__& y_arg__, const int& dist, const T2__& location,
                const T3__& scale, const T4__& df, T_lp__& lp__,
                T_lp_accum__& lp_accum__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
int count_nonzero(const T0__& m_arg__, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T2__, typename T3__,
          typename T4__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
void
prior_select_lp(const T0__& y_arg__, const int& dist, const T2__& location,
                const T3__& scale, const T4__& df, T_lp__& lp__,
                T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T2__, T3__, T4__>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 539;
    if (stan::math::logical_eq(dist, 0)) {} else {
                                            current_statement__ = 537;
                                            if (stan::math::logical_eq(dist,
                                                  1)) {
                                              current_statement__ = 535;
                                              lp_accum__.add(stan::math::normal_lpdf<
                                                               propto__>(y,
                                                               location,
                                                               scale));
                                            } else {
                                              current_statement__ = 534;
                                              if (stan::math::logical_eq(
                                                    dist, 2)) {
                                                current_statement__ = 532;
                                                lp_accum__.add(stan::math::cauchy_lpdf<
                                                                 propto__>(y,
                                                                 location,
                                                                 scale));
                                              } else {
                                                current_statement__ = 531;
                                                if (stan::math::logical_eq(
                                                      dist, 3)) {
                                                  current_statement__ = 529;
                                                  lp_accum__.add(stan::math::student_t_lpdf<
                                                                   propto__>(
                                                                   y, df,
                                                                   location,
                                                                   scale));
                                                } else {
                                                  current_statement__ = 528;
                                                  if (stan::math::logical_eq(
                                                        dist, 4)) {
                                                    current_statement__ = 526;
                                                    lp_accum__.add(stan::math::exponential_lpdf<
                                                                    propto__>(
                                                                    y, (1 /
                                                                    scale)));
                                                  } else {
                                                    current_statement__ = 525;
                                                    if (stan::math::logical_eq(
                                                          dist, 5)) {
                                                      current_statement__ = 523;
                                                      lp_accum__.add(
                                                        stan::math::lognormal_lpdf<
                                                          propto__>(y,
                                                          location, scale));
                                                    } else {
                                                      current_statement__ = 522;
                                                      if (stan::math::logical_eq(
                                                            dist, 6)) {
                                                        current_statement__ = 519;
                                                        lp_accum__.add(
                                                          stan::math::student_t_lpdf<
                                                            propto__>(
                                                            stan::math::log(y),
                                                            df, location,
                                                            scale));
                                                        current_statement__ = 520;
                                                        lp_accum__.add(
                                                          stan::math::minus(
                                                            stan::math::log(y)));
                                                      } else {
                                                        current_statement__ = 517;
                                                        std::stringstream
                                                          errmsg_stream__;
                                                        stan::math::stan_print(
                                                          &errmsg_stream__,
                                                          "Not a supported prior dist.");
                                                        throw std::domain_error(
                                                                errmsg_stream__.str());
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
    }
    current_statement__ = 540;
    return ;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
int count_nonzero(const T0__& m_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& m = stan::math::to_ref(m_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int I = std::numeric_limits<int>::min();
    current_statement__ = 542;
    I = stan::math::rows(m);
    int J = std::numeric_limits<int>::min();
    current_statement__ = 543;
    J = stan::math::cols(m);
    int c = std::numeric_limits<int>::min();
    current_statement__ = 544;
    c = 0;
    current_statement__ = 550;
    for (int j = 1; j <= I; ++j) {
      current_statement__ = 548;
      for (int i = 1; i <= J; ++i) {
        current_statement__ = 546;
        if (stan::math::logical_neq(
              stan::model::rvalue(m, "m", stan::model::index_uni(i),
                stan::model::index_uni(j)), 0)) {
          current_statement__ = 545;
          c = (c + 1);
        }
      }
    }
    current_statement__ = 551;
    return c;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_ordered_multinomial final : public model_base_crtp<model_ordered_multinomial> {
private:
  int ns_ipd;
  int ns_agd_arm;
  int ns_agd_contrast;
  int ni_ipd;
  int ni_agd_arm;
  int ni_agd_contrast;
  int narm_ipd;
  std::vector<int> ipd_arm;
  std::vector<int> ipd_trt;
  int narm_agd_arm;
  std::vector<int> agd_arm_trt;
  std::vector<int> agd_contrast_trt;
  std::vector<int> agd_contrast_trt_b;
  int nt;
  int nX;
  int nchains;
  int CHAIN_ID;
  std::vector<int> nint_vec;
  int nint_max;
  int int_thin;
  int link;
  Eigen::Matrix<double,-1,1> agd_contrast_y_data__;
  Eigen::Matrix<double,-1,-1> agd_contrast_Sigma_data__;
  int QR;
  Eigen::Matrix<double,-1,-1> X_data__;
  Eigen::Matrix<double,-1,-1> R_inv_data__;
  int has_offset;
  Eigen::Matrix<double,-1,1> offsets_data__;
  int RE;
  std::vector<int> which_RE;
  Eigen::Matrix<double,-1,-1> RE_cor_data__;
  int nodesplit;
  int prior_intercept_dist;
  double prior_intercept_location;
  double prior_intercept_scale;
  double prior_intercept_df;
  int prior_trt_dist;
  double prior_trt_location;
  double prior_trt_scale;
  double prior_trt_df;
  int prior_het_dist;
  int prior_het_type;
  double prior_het_location;
  double prior_het_scale;
  double prior_het_df;
  int prior_reg_dist;
  double prior_reg_location;
  double prior_reg_scale;
  double prior_reg_df;
  int ncat;
  std::vector<int> ipd_r;
  std::vector<std::vector<int>> ipd_cat;
  std::vector<int> ipd_ncat;
  std::vector<std::vector<int>> agd_arm_r;
  Eigen::Matrix<double,-1,1> agd_arm_n_data__;
  std::vector<std::vector<int>> agd_arm_cat;
  std::vector<int> agd_arm_ncat;
  int prior_aux_dist;
  double prior_aux_location;
  double prior_aux_scale;
  double prior_aux_df;
  std::vector<Eigen::Matrix<double,-1,1>> theta_ipd0;
  std::vector<Eigen::Matrix<double,-1,1>> theta_agd_arm_bar0;
  int nint;
  int n_delta;
  Eigen::Matrix<double,-1,1> RE_mu_data__;
  Eigen::Matrix<double,-1,-1> REdummy_data__;
  Eigen::Matrix<double,-1,-1> RE_L_data__;
  Eigen::Matrix<double,-1,1> wdummy_data__;
  std::vector<int> vudummy;
  int RE_L_nz;
  int RE_sparse;
  Eigen::Matrix<double,-1,1> RE_L_w_data__;
  std::vector<int> RE_L_v;
  std::vector<int> RE_L_u;
  int totns;
  std::vector<int> trt;
  Eigen::Matrix<double,-1,-1> Xdummy_data__;
  Eigen::Matrix<double,-1,-1> X_ipd_data__;
  Eigen::Matrix<double,-1,-1> X_agd_arm_data__;
  Eigen::Matrix<double,-1,-1> X_agd_contrast_data__;
  Eigen::Matrix<double,-1,1> odummy_data__;
  Eigen::Matrix<double,-1,1> offset_ipd_data__;
  Eigen::Matrix<double,-1,1> offset_agd_arm_data__;
  Eigen::Matrix<double,-1,1> offset_agd_contrast_data__;
  int n_int_thin;
  Eigen::Matrix<double,-1,-1> inv_Sigma_data__;
  std::vector<int> nc_agd_contrast;
  int tau_1dim__;
  int f_cc_1dim__;
  int cc_1dim__;
  int theta_agd_arm_ii_1dim__;
  int theta_agd_arm_ii_2dim__;
  int d_1dim__;
  int beta_1dim__;
  int eta_agd_contrast_ii_1dim__;
  int theta_bar_cum_agd_arm_1dim__;
  int log_lik_1dim__;
  int resdev_1dim__;
  int theta_bar_cum_agd_contrast_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> agd_contrast_y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> agd_contrast_Sigma{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> R_inv{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> offsets{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> RE_cor{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> agd_arm_n{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> RE_mu{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> REdummy{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> RE_L{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> wdummy{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> RE_L_w{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Xdummy{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_ipd{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_agd_arm{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_agd_contrast{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> odummy{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> offset_ipd{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> offset_agd_arm{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> offset_agd_contrast{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> inv_Sigma{nullptr, 0, 0};
public:
  ~model_ordered_multinomial() {}
  model_ordered_multinomial(stan::io::var_context& context__, unsigned int
                            random_seed__ = 0, std::ostream*
                            pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_ordered_multinomial_namespace::model_ordered_multinomial";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 334;
      context__.validate_dims("data initialization", "ns_ipd", "int",
        std::vector<size_t>{});
      ns_ipd = std::numeric_limits<int>::min();
      current_statement__ = 334;
      ns_ipd = context__.vals_i("ns_ipd")[(1 - 1)];
      current_statement__ = 334;
      stan::math::check_greater_or_equal(function__, "ns_ipd", ns_ipd, 0);
      current_statement__ = 335;
      context__.validate_dims("data initialization", "ns_agd_arm", "int",
        std::vector<size_t>{});
      ns_agd_arm = std::numeric_limits<int>::min();
      current_statement__ = 335;
      ns_agd_arm = context__.vals_i("ns_agd_arm")[(1 - 1)];
      current_statement__ = 335;
      stan::math::check_greater_or_equal(function__, "ns_agd_arm",
        ns_agd_arm, 0);
      current_statement__ = 336;
      context__.validate_dims("data initialization", "ns_agd_contrast",
        "int", std::vector<size_t>{});
      ns_agd_contrast = std::numeric_limits<int>::min();
      current_statement__ = 336;
      ns_agd_contrast = context__.vals_i("ns_agd_contrast")[(1 - 1)];
      current_statement__ = 336;
      stan::math::check_greater_or_equal(function__, "ns_agd_contrast",
        ns_agd_contrast, 0);
      current_statement__ = 337;
      context__.validate_dims("data initialization", "ni_ipd", "int",
        std::vector<size_t>{});
      ni_ipd = std::numeric_limits<int>::min();
      current_statement__ = 337;
      ni_ipd = context__.vals_i("ni_ipd")[(1 - 1)];
      current_statement__ = 337;
      stan::math::check_greater_or_equal(function__, "ni_ipd", ni_ipd, 0);
      current_statement__ = 338;
      context__.validate_dims("data initialization", "ni_agd_arm", "int",
        std::vector<size_t>{});
      ni_agd_arm = std::numeric_limits<int>::min();
      current_statement__ = 338;
      ni_agd_arm = context__.vals_i("ni_agd_arm")[(1 - 1)];
      current_statement__ = 338;
      stan::math::check_greater_or_equal(function__, "ni_agd_arm",
        ni_agd_arm, 0);
      current_statement__ = 339;
      context__.validate_dims("data initialization", "ni_agd_contrast",
        "int", std::vector<size_t>{});
      ni_agd_contrast = std::numeric_limits<int>::min();
      current_statement__ = 339;
      ni_agd_contrast = context__.vals_i("ni_agd_contrast")[(1 - 1)];
      current_statement__ = 339;
      stan::math::check_greater_or_equal(function__, "ni_agd_contrast",
        ni_agd_contrast, 0);
      current_statement__ = 340;
      context__.validate_dims("data initialization", "narm_ipd", "int",
        std::vector<size_t>{});
      narm_ipd = std::numeric_limits<int>::min();
      current_statement__ = 340;
      narm_ipd = context__.vals_i("narm_ipd")[(1 - 1)];
      current_statement__ = 340;
      stan::math::check_greater_or_equal(function__, "narm_ipd", narm_ipd, 0);
      current_statement__ = 341;
      stan::math::validate_non_negative_index("ipd_arm", "ni_ipd", ni_ipd);
      current_statement__ = 342;
      context__.validate_dims("data initialization", "ipd_arm", "int",
        std::vector<size_t>{static_cast<size_t>(ni_ipd)});
      ipd_arm = std::vector<int>(ni_ipd, std::numeric_limits<int>::min());
      current_statement__ = 342;
      ipd_arm = context__.vals_i("ipd_arm");
      current_statement__ = 342;
      stan::math::check_greater_or_equal(function__, "ipd_arm", ipd_arm, 1);
      current_statement__ = 343;
      stan::math::validate_non_negative_index("ipd_trt", "narm_ipd", narm_ipd);
      current_statement__ = 344;
      context__.validate_dims("data initialization", "ipd_trt", "int",
        std::vector<size_t>{static_cast<size_t>(narm_ipd)});
      ipd_trt = std::vector<int>(narm_ipd, std::numeric_limits<int>::min());
      current_statement__ = 344;
      ipd_trt = context__.vals_i("ipd_trt");
      current_statement__ = 344;
      stan::math::check_greater_or_equal(function__, "ipd_trt", ipd_trt, 1);
      current_statement__ = 345;
      context__.validate_dims("data initialization", "narm_agd_arm", "int",
        std::vector<size_t>{});
      narm_agd_arm = std::numeric_limits<int>::min();
      current_statement__ = 345;
      narm_agd_arm = context__.vals_i("narm_agd_arm")[(1 - 1)];
      current_statement__ = 345;
      stan::math::check_greater_or_equal(function__, "narm_agd_arm",
        narm_agd_arm, 0);
      current_statement__ = 346;
      stan::math::validate_non_negative_index("agd_arm_trt", "narm_agd_arm",
        narm_agd_arm);
      current_statement__ = 347;
      context__.validate_dims("data initialization", "agd_arm_trt", "int",
        std::vector<size_t>{static_cast<size_t>(narm_agd_arm)});
      agd_arm_trt = std::vector<int>(narm_agd_arm,
                      std::numeric_limits<int>::min());
      current_statement__ = 347;
      agd_arm_trt = context__.vals_i("agd_arm_trt");
      current_statement__ = 347;
      stan::math::check_greater_or_equal(function__, "agd_arm_trt",
        agd_arm_trt, 1);
      current_statement__ = 348;
      stan::math::validate_non_negative_index("agd_contrast_trt",
        "ni_agd_contrast", ni_agd_contrast);
      current_statement__ = 349;
      context__.validate_dims("data initialization", "agd_contrast_trt",
        "int", std::vector<size_t>{static_cast<size_t>(ni_agd_contrast)});
      agd_contrast_trt = std::vector<int>(ni_agd_contrast,
                           std::numeric_limits<int>::min());
      current_statement__ = 349;
      agd_contrast_trt = context__.vals_i("agd_contrast_trt");
      current_statement__ = 349;
      stan::math::check_greater_or_equal(function__, "agd_contrast_trt",
        agd_contrast_trt, 1);
      current_statement__ = 350;
      stan::math::validate_non_negative_index("agd_contrast_trt_b",
        "ni_agd_contrast", ni_agd_contrast);
      current_statement__ = 351;
      context__.validate_dims("data initialization", "agd_contrast_trt_b",
        "int", std::vector<size_t>{static_cast<size_t>(ni_agd_contrast)});
      agd_contrast_trt_b = std::vector<int>(ni_agd_contrast,
                             std::numeric_limits<int>::min());
      current_statement__ = 351;
      agd_contrast_trt_b = context__.vals_i("agd_contrast_trt_b");
      current_statement__ = 351;
      stan::math::check_greater_or_equal(function__, "agd_contrast_trt_b",
        agd_contrast_trt_b, 1);
      current_statement__ = 352;
      context__.validate_dims("data initialization", "nt", "int",
        std::vector<size_t>{});
      nt = std::numeric_limits<int>::min();
      current_statement__ = 352;
      nt = context__.vals_i("nt")[(1 - 1)];
      current_statement__ = 352;
      stan::math::check_greater_or_equal(function__, "nt", nt, 1);
      current_statement__ = 353;
      context__.validate_dims("data initialization", "nX", "int",
        std::vector<size_t>{});
      nX = std::numeric_limits<int>::min();
      current_statement__ = 353;
      nX = context__.vals_i("nX")[(1 - 1)];
      current_statement__ = 353;
      stan::math::check_greater_or_equal(function__, "nX", nX, 0);
      current_statement__ = 354;
      context__.validate_dims("data initialization", "nchains", "int",
        std::vector<size_t>{});
      nchains = std::numeric_limits<int>::min();
      current_statement__ = 354;
      nchains = context__.vals_i("nchains")[(1 - 1)];
      current_statement__ = 354;
      stan::math::check_greater_or_equal(function__, "nchains", nchains, 1);
      current_statement__ = 355;
      context__.validate_dims("data initialization", "CHAIN_ID", "int",
        std::vector<size_t>{});
      CHAIN_ID = std::numeric_limits<int>::min();
      current_statement__ = 355;
      CHAIN_ID = context__.vals_i("CHAIN_ID")[(1 - 1)];
      current_statement__ = 355;
      stan::math::check_greater_or_equal(function__, "CHAIN_ID", CHAIN_ID, 1);
      current_statement__ = 355;
      stan::math::check_less_or_equal(function__, "CHAIN_ID", CHAIN_ID,
        nchains);
      current_statement__ = 356;
      stan::math::validate_non_negative_index("nint_vec", "nchains", nchains);
      current_statement__ = 357;
      context__.validate_dims("data initialization", "nint_vec", "int",
        std::vector<size_t>{static_cast<size_t>(nchains)});
      nint_vec = std::vector<int>(nchains, std::numeric_limits<int>::min());
      current_statement__ = 357;
      nint_vec = context__.vals_i("nint_vec");
      current_statement__ = 357;
      stan::math::check_greater_or_equal(function__, "nint_vec", nint_vec, 1);
      current_statement__ = 358;
      context__.validate_dims("data initialization", "nint_max", "int",
        std::vector<size_t>{});
      nint_max = std::numeric_limits<int>::min();
      current_statement__ = 358;
      nint_max = context__.vals_i("nint_max")[(1 - 1)];
      current_statement__ = 358;
      stan::math::check_greater_or_equal(function__, "nint_max", nint_max, 1);
      current_statement__ = 359;
      context__.validate_dims("data initialization", "int_thin", "int",
        std::vector<size_t>{});
      int_thin = std::numeric_limits<int>::min();
      current_statement__ = 359;
      int_thin = context__.vals_i("int_thin")[(1 - 1)];
      current_statement__ = 359;
      stan::math::check_greater_or_equal(function__, "int_thin", int_thin, 0);
      current_statement__ = 360;
      context__.validate_dims("data initialization", "link", "int",
        std::vector<size_t>{});
      link = std::numeric_limits<int>::min();
      current_statement__ = 360;
      link = context__.vals_i("link")[(1 - 1)];
      current_statement__ = 360;
      stan::math::check_greater_or_equal(function__, "link", link, 1);
      current_statement__ = 361;
      stan::math::validate_non_negative_index("agd_contrast_y",
        "ni_agd_contrast", ni_agd_contrast);
      current_statement__ = 362;
      context__.validate_dims("data initialization", "agd_contrast_y",
        "double", std::vector<size_t>{static_cast<size_t>(ni_agd_contrast)});
      agd_contrast_y_data__ = Eigen::Matrix<double,-1,1>::Constant(ni_agd_contrast,
                                std::numeric_limits<double>::quiet_NaN());
      new (&agd_contrast_y)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(agd_contrast_y_data__.data(),
        ni_agd_contrast);
      {
        std::vector<local_scalar_t__> agd_contrast_y_flat__;
        current_statement__ = 362;
        agd_contrast_y_flat__ = context__.vals_r("agd_contrast_y");
        current_statement__ = 362;
        pos__ = 1;
        current_statement__ = 362;
        for (int sym1__ = 1; sym1__ <= ni_agd_contrast; ++sym1__) {
          current_statement__ = 362;
          stan::model::assign(agd_contrast_y, agd_contrast_y_flat__[(pos__ -
            1)], "assigning variable agd_contrast_y",
            stan::model::index_uni(sym1__));
          current_statement__ = 362;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 363;
      stan::math::validate_non_negative_index("agd_contrast_Sigma",
        "ni_agd_contrast ? ni_agd_contrast : 1",
        (ni_agd_contrast ? ni_agd_contrast : 1));
      current_statement__ = 363;
      stan::math::validate_non_negative_index("agd_contrast_Sigma",
        "ni_agd_contrast ? ni_agd_contrast : 1",
        (ni_agd_contrast ? ni_agd_contrast : 1));
      current_statement__ = 364;
      context__.validate_dims("data initialization", "agd_contrast_Sigma",
        "double",
        std::vector<size_t>{static_cast<size_t>(
                              (ni_agd_contrast ? ni_agd_contrast : 1)),
          static_cast<size_t>((ni_agd_contrast ? ni_agd_contrast : 1))});
      agd_contrast_Sigma_data__ = Eigen::Matrix<double,-1,-1>::Constant((ni_agd_contrast ? ni_agd_contrast : 1),
                                    (ni_agd_contrast ? ni_agd_contrast : 1),
                                    std::numeric_limits<double>::quiet_NaN());
      new (&agd_contrast_Sigma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(agd_contrast_Sigma_data__.data(),
        (ni_agd_contrast ? ni_agd_contrast : 1),
        (ni_agd_contrast ? ni_agd_contrast : 1));
      {
        std::vector<local_scalar_t__> agd_contrast_Sigma_flat__;
        current_statement__ = 364;
        agd_contrast_Sigma_flat__ = context__.vals_r("agd_contrast_Sigma");
        current_statement__ = 364;
        pos__ = 1;
        current_statement__ = 364;
        for (int sym1__ = 1; sym1__ <=
             (ni_agd_contrast ? ni_agd_contrast : 1); ++sym1__) {
          current_statement__ = 364;
          for (int sym2__ = 1; sym2__ <=
               (ni_agd_contrast ? ni_agd_contrast : 1); ++sym2__) {
            current_statement__ = 364;
            stan::model::assign(agd_contrast_Sigma,
              agd_contrast_Sigma_flat__[(pos__ - 1)],
              "assigning variable agd_contrast_Sigma",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 364;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 364;
      stan::math::check_cov_matrix(function__, "agd_contrast_Sigma",
        agd_contrast_Sigma);
      current_statement__ = 365;
      context__.validate_dims("data initialization", "QR", "int",
        std::vector<size_t>{});
      QR = std::numeric_limits<int>::min();
      current_statement__ = 365;
      QR = context__.vals_i("QR")[(1 - 1)];
      current_statement__ = 365;
      stan::math::check_greater_or_equal(function__, "QR", QR, 0);
      current_statement__ = 365;
      stan::math::check_less_or_equal(function__, "QR", QR, 1);
      current_statement__ = 366;
      stan::math::validate_non_negative_index("X",
        "ni_ipd + nint_max * (ni_agd_arm + ni_agd_contrast)", (ni_ipd +
        (nint_max * (ni_agd_arm + ni_agd_contrast))));
      current_statement__ = 367;
      stan::math::validate_non_negative_index("X", "nX", nX);
      current_statement__ = 368;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>((ni_ipd + (nint_max *
                              (ni_agd_arm + ni_agd_contrast)))),
          static_cast<size_t>(nX)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant((ni_ipd + (nint_max *
                   (ni_agd_arm + ni_agd_contrast))), nX,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(),
        (ni_ipd + (nint_max * (ni_agd_arm + ni_agd_contrast))), nX);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 368;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 368;
        pos__ = 1;
        current_statement__ = 368;
        for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
          current_statement__ = 368;
          for (int sym2__ = 1; sym2__ <= (ni_ipd + (nint_max * (ni_agd_arm +
               ni_agd_contrast))); ++sym2__) {
            current_statement__ = 368;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 368;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 369;
      stan::math::validate_non_negative_index("R_inv", "QR ? nX : 0",
        (QR ? nX : 0));
      current_statement__ = 370;
      stan::math::validate_non_negative_index("R_inv", "QR ? nX : 0",
        (QR ? nX : 0));
      current_statement__ = 371;
      context__.validate_dims("data initialization", "R_inv", "double",
        std::vector<size_t>{static_cast<size_t>((QR ? nX : 0)),
          static_cast<size_t>((QR ? nX : 0))});
      R_inv_data__ = Eigen::Matrix<double,-1,-1>::Constant((QR ? nX : 0),
                       (QR ? nX : 0),
                       std::numeric_limits<double>::quiet_NaN());
      new (&R_inv)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(R_inv_data__.data(),
        (QR ? nX : 0), (QR ? nX : 0));
      {
        std::vector<local_scalar_t__> R_inv_flat__;
        current_statement__ = 371;
        R_inv_flat__ = context__.vals_r("R_inv");
        current_statement__ = 371;
        pos__ = 1;
        current_statement__ = 371;
        for (int sym1__ = 1; sym1__ <= (QR ? nX : 0); ++sym1__) {
          current_statement__ = 371;
          for (int sym2__ = 1; sym2__ <= (QR ? nX : 0); ++sym2__) {
            current_statement__ = 371;
            stan::model::assign(R_inv, R_inv_flat__[(pos__ - 1)],
              "assigning variable R_inv", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 371;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 372;
      context__.validate_dims("data initialization", "has_offset", "int",
        std::vector<size_t>{});
      has_offset = std::numeric_limits<int>::min();
      current_statement__ = 372;
      has_offset = context__.vals_i("has_offset")[(1 - 1)];
      current_statement__ = 372;
      stan::math::check_greater_or_equal(function__, "has_offset",
        has_offset, 0);
      current_statement__ = 372;
      stan::math::check_less_or_equal(function__, "has_offset", has_offset, 1);
      current_statement__ = 373;
      stan::math::validate_non_negative_index("offsets",
        "has_offset ? ni_ipd + nint_max * (ni_agd_arm + ni_agd_contrast) : 0",
        (has_offset ? (ni_ipd + (nint_max * (ni_agd_arm +
        ni_agd_contrast))) : 0));
      current_statement__ = 374;
      context__.validate_dims("data initialization", "offsets", "double",
        std::vector<size_t>{static_cast<size_t>((has_offset ? (ni_ipd +
                              (nint_max * (ni_agd_arm +
                              ni_agd_contrast))) : 0))});
      offsets_data__ = Eigen::Matrix<double,-1,1>::Constant((has_offset ? (ni_ipd
                         + (nint_max * (ni_agd_arm + ni_agd_contrast))) : 0),
                         std::numeric_limits<double>::quiet_NaN());
      new (&offsets)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(offsets_data__.data(),
        (has_offset ? (ni_ipd + (nint_max * (ni_agd_arm +
        ni_agd_contrast))) : 0));
      {
        std::vector<local_scalar_t__> offsets_flat__;
        current_statement__ = 374;
        offsets_flat__ = context__.vals_r("offsets");
        current_statement__ = 374;
        pos__ = 1;
        current_statement__ = 374;
        for (int sym1__ = 1; sym1__ <= (has_offset ? (ni_ipd + (nint_max *
             (ni_agd_arm + ni_agd_contrast))) : 0); ++sym1__) {
          current_statement__ = 374;
          stan::model::assign(offsets, offsets_flat__[(pos__ - 1)],
            "assigning variable offsets", stan::model::index_uni(sym1__));
          current_statement__ = 374;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 375;
      context__.validate_dims("data initialization", "RE", "int",
        std::vector<size_t>{});
      RE = std::numeric_limits<int>::min();
      current_statement__ = 375;
      RE = context__.vals_i("RE")[(1 - 1)];
      current_statement__ = 375;
      stan::math::check_greater_or_equal(function__, "RE", RE, 0);
      current_statement__ = 375;
      stan::math::check_less_or_equal(function__, "RE", RE, 1);
      current_statement__ = 376;
      stan::math::validate_non_negative_index("which_RE",
        "RE ? narm_ipd + narm_agd_arm + ni_agd_contrast : 0",
        (RE ? ((narm_ipd + narm_agd_arm) + ni_agd_contrast) : 0));
      current_statement__ = 377;
      context__.validate_dims("data initialization", "which_RE", "int",
        std::vector<size_t>{static_cast<size_t>((RE ? ((narm_ipd +
                              narm_agd_arm) + ni_agd_contrast) : 0))});
      which_RE = std::vector<int>((RE ? ((narm_ipd + narm_agd_arm) +
                   ni_agd_contrast) : 0), std::numeric_limits<int>::min());
      current_statement__ = 377;
      which_RE = context__.vals_i("which_RE");
      current_statement__ = 377;
      stan::math::check_greater_or_equal(function__, "which_RE", which_RE, 0);
      current_statement__ = 378;
      stan::math::validate_non_negative_index("RE_cor",
        "RE ? max(which_RE) : 1", (RE ? stan::math::max(which_RE) : 1));
      current_statement__ = 378;
      stan::math::validate_non_negative_index("RE_cor",
        "RE ? max(which_RE) : 1", (RE ? stan::math::max(which_RE) : 1));
      current_statement__ = 379;
      context__.validate_dims("data initialization", "RE_cor", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (RE ? stan::math::max(which_RE) : 1)),
          static_cast<size_t>((RE ? stan::math::max(which_RE) : 1))});
      RE_cor_data__ = Eigen::Matrix<double,-1,-1>::Constant((RE ? stan::math::max(
                                                                    which_RE) : 1),
                        (RE ? stan::math::max(which_RE) : 1),
                        std::numeric_limits<double>::quiet_NaN());
      new (&RE_cor)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(RE_cor_data__.data(),
        (RE ? stan::math::max(which_RE) : 1),
        (RE ? stan::math::max(which_RE) : 1));
      {
        std::vector<local_scalar_t__> RE_cor_flat__;
        current_statement__ = 379;
        RE_cor_flat__ = context__.vals_r("RE_cor");
        current_statement__ = 379;
        pos__ = 1;
        current_statement__ = 379;
        for (int sym1__ = 1; sym1__ <=
             (RE ? stan::math::max(which_RE) : 1); ++sym1__) {
          current_statement__ = 379;
          for (int sym2__ = 1; sym2__ <=
               (RE ? stan::math::max(which_RE) : 1); ++sym2__) {
            current_statement__ = 379;
            stan::model::assign(RE_cor, RE_cor_flat__[(pos__ - 1)],
              "assigning variable RE_cor", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 379;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 379;
      stan::math::check_corr_matrix(function__, "RE_cor", RE_cor);
      current_statement__ = 380;
      context__.validate_dims("data initialization", "nodesplit", "int",
        std::vector<size_t>{});
      nodesplit = std::numeric_limits<int>::min();
      current_statement__ = 380;
      nodesplit = context__.vals_i("nodesplit")[(1 - 1)];
      current_statement__ = 380;
      stan::math::check_greater_or_equal(function__, "nodesplit", nodesplit,
        0);
      current_statement__ = 380;
      stan::math::check_less_or_equal(function__, "nodesplit", nodesplit, 1);
      current_statement__ = 381;
      context__.validate_dims("data initialization", "prior_intercept_dist",
        "int", std::vector<size_t>{});
      prior_intercept_dist = std::numeric_limits<int>::min();
      current_statement__ = 381;
      prior_intercept_dist = context__.vals_i("prior_intercept_dist")[(1 -
        1)];
      current_statement__ = 381;
      stan::math::check_greater_or_equal(function__, "prior_intercept_dist",
        prior_intercept_dist, 0);
      current_statement__ = 381;
      stan::math::check_less_or_equal(function__, "prior_intercept_dist",
        prior_intercept_dist, 3);
      current_statement__ = 382;
      context__.validate_dims("data initialization",
        "prior_intercept_location", "double", std::vector<size_t>{});
      prior_intercept_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 382;
      prior_intercept_location = context__.vals_r("prior_intercept_location")[(1
        - 1)];
      current_statement__ = 383;
      context__.validate_dims("data initialization", "prior_intercept_scale",
        "double", std::vector<size_t>{});
      prior_intercept_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 383;
      prior_intercept_scale = context__.vals_r("prior_intercept_scale")[(1 -
        1)];
      current_statement__ = 383;
      stan::math::check_greater_or_equal(function__, "prior_intercept_scale",
        prior_intercept_scale, 0);
      current_statement__ = 384;
      context__.validate_dims("data initialization", "prior_intercept_df",
        "double", std::vector<size_t>{});
      prior_intercept_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 384;
      prior_intercept_df = context__.vals_r("prior_intercept_df")[(1 - 1)];
      current_statement__ = 384;
      stan::math::check_greater_or_equal(function__, "prior_intercept_df",
        prior_intercept_df, 0);
      current_statement__ = 385;
      context__.validate_dims("data initialization", "prior_trt_dist", "int",
        std::vector<size_t>{});
      prior_trt_dist = std::numeric_limits<int>::min();
      current_statement__ = 385;
      prior_trt_dist = context__.vals_i("prior_trt_dist")[(1 - 1)];
      current_statement__ = 385;
      stan::math::check_greater_or_equal(function__, "prior_trt_dist",
        prior_trt_dist, 0);
      current_statement__ = 385;
      stan::math::check_less_or_equal(function__, "prior_trt_dist",
        prior_trt_dist, 3);
      current_statement__ = 386;
      context__.validate_dims("data initialization", "prior_trt_location",
        "double", std::vector<size_t>{});
      prior_trt_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 386;
      prior_trt_location = context__.vals_r("prior_trt_location")[(1 - 1)];
      current_statement__ = 387;
      context__.validate_dims("data initialization", "prior_trt_scale",
        "double", std::vector<size_t>{});
      prior_trt_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 387;
      prior_trt_scale = context__.vals_r("prior_trt_scale")[(1 - 1)];
      current_statement__ = 387;
      stan::math::check_greater_or_equal(function__, "prior_trt_scale",
        prior_trt_scale, 0);
      current_statement__ = 388;
      context__.validate_dims("data initialization", "prior_trt_df",
        "double", std::vector<size_t>{});
      prior_trt_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 388;
      prior_trt_df = context__.vals_r("prior_trt_df")[(1 - 1)];
      current_statement__ = 388;
      stan::math::check_greater_or_equal(function__, "prior_trt_df",
        prior_trt_df, 0);
      current_statement__ = 389;
      context__.validate_dims("data initialization", "prior_het_dist", "int",
        std::vector<size_t>{});
      prior_het_dist = std::numeric_limits<int>::min();
      current_statement__ = 389;
      prior_het_dist = context__.vals_i("prior_het_dist")[(1 - 1)];
      current_statement__ = 389;
      stan::math::check_greater_or_equal(function__, "prior_het_dist",
        prior_het_dist, 0);
      current_statement__ = 389;
      stan::math::check_less_or_equal(function__, "prior_het_dist",
        prior_het_dist, 6);
      current_statement__ = 390;
      context__.validate_dims("data initialization", "prior_het_type", "int",
        std::vector<size_t>{});
      prior_het_type = std::numeric_limits<int>::min();
      current_statement__ = 390;
      prior_het_type = context__.vals_i("prior_het_type")[(1 - 1)];
      current_statement__ = 390;
      stan::math::check_greater_or_equal(function__, "prior_het_type",
        prior_het_type, 1);
      current_statement__ = 390;
      stan::math::check_less_or_equal(function__, "prior_het_type",
        prior_het_type, 3);
      current_statement__ = 391;
      context__.validate_dims("data initialization", "prior_het_location",
        "double", std::vector<size_t>{});
      prior_het_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 391;
      prior_het_location = context__.vals_r("prior_het_location")[(1 - 1)];
      current_statement__ = 392;
      context__.validate_dims("data initialization", "prior_het_scale",
        "double", std::vector<size_t>{});
      prior_het_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 392;
      prior_het_scale = context__.vals_r("prior_het_scale")[(1 - 1)];
      current_statement__ = 392;
      stan::math::check_greater_or_equal(function__, "prior_het_scale",
        prior_het_scale, 0);
      current_statement__ = 393;
      context__.validate_dims("data initialization", "prior_het_df",
        "double", std::vector<size_t>{});
      prior_het_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 393;
      prior_het_df = context__.vals_r("prior_het_df")[(1 - 1)];
      current_statement__ = 393;
      stan::math::check_greater_or_equal(function__, "prior_het_df",
        prior_het_df, 0);
      current_statement__ = 394;
      context__.validate_dims("data initialization", "prior_reg_dist", "int",
        std::vector<size_t>{});
      prior_reg_dist = std::numeric_limits<int>::min();
      current_statement__ = 394;
      prior_reg_dist = context__.vals_i("prior_reg_dist")[(1 - 1)];
      current_statement__ = 394;
      stan::math::check_greater_or_equal(function__, "prior_reg_dist",
        prior_reg_dist, 0);
      current_statement__ = 394;
      stan::math::check_less_or_equal(function__, "prior_reg_dist",
        prior_reg_dist, 3);
      current_statement__ = 395;
      context__.validate_dims("data initialization", "prior_reg_location",
        "double", std::vector<size_t>{});
      prior_reg_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 395;
      prior_reg_location = context__.vals_r("prior_reg_location")[(1 - 1)];
      current_statement__ = 396;
      context__.validate_dims("data initialization", "prior_reg_scale",
        "double", std::vector<size_t>{});
      prior_reg_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 396;
      prior_reg_scale = context__.vals_r("prior_reg_scale")[(1 - 1)];
      current_statement__ = 396;
      stan::math::check_greater_or_equal(function__, "prior_reg_scale",
        prior_reg_scale, 0);
      current_statement__ = 397;
      context__.validate_dims("data initialization", "prior_reg_df",
        "double", std::vector<size_t>{});
      prior_reg_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 397;
      prior_reg_df = context__.vals_r("prior_reg_df")[(1 - 1)];
      current_statement__ = 397;
      stan::math::check_greater_or_equal(function__, "prior_reg_df",
        prior_reg_df, 0);
      current_statement__ = 398;
      context__.validate_dims("data initialization", "ncat", "int",
        std::vector<size_t>{});
      ncat = std::numeric_limits<int>::min();
      current_statement__ = 398;
      ncat = context__.vals_i("ncat")[(1 - 1)];
      current_statement__ = 398;
      stan::math::check_greater_or_equal(function__, "ncat", ncat, 2);
      current_statement__ = 399;
      stan::math::validate_non_negative_index("ipd_r", "ni_ipd", ni_ipd);
      current_statement__ = 400;
      context__.validate_dims("data initialization", "ipd_r", "int",
        std::vector<size_t>{static_cast<size_t>(ni_ipd)});
      ipd_r = std::vector<int>(ni_ipd, std::numeric_limits<int>::min());
      current_statement__ = 400;
      ipd_r = context__.vals_i("ipd_r");
      current_statement__ = 400;
      stan::math::check_greater_or_equal(function__, "ipd_r", ipd_r, 1);
      current_statement__ = 400;
      stan::math::check_less_or_equal(function__, "ipd_r", ipd_r, ncat);
      current_statement__ = 401;
      stan::math::validate_non_negative_index("ipd_cat", "ni_ipd", ni_ipd);
      current_statement__ = 402;
      stan::math::validate_non_negative_index("ipd_cat", "ncat", ncat);
      current_statement__ = 403;
      context__.validate_dims("data initialization", "ipd_cat", "int",
        std::vector<size_t>{static_cast<size_t>(ni_ipd),
          static_cast<size_t>(ncat)});
      ipd_cat = std::vector<std::vector<int>>(ni_ipd,
                  std::vector<int>(ncat, std::numeric_limits<int>::min()));
      {
        std::vector<int> ipd_cat_flat__;
        current_statement__ = 403;
        ipd_cat_flat__ = context__.vals_i("ipd_cat");
        current_statement__ = 403;
        pos__ = 1;
        current_statement__ = 403;
        for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
          current_statement__ = 403;
          for (int sym2__ = 1; sym2__ <= ni_ipd; ++sym2__) {
            current_statement__ = 403;
            stan::model::assign(ipd_cat, ipd_cat_flat__[(pos__ - 1)],
              "assigning variable ipd_cat", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 403;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 403;
      stan::math::check_greater_or_equal(function__, "ipd_cat", ipd_cat, 0);
      current_statement__ = 403;
      stan::math::check_less_or_equal(function__, "ipd_cat", ipd_cat, ncat);
      current_statement__ = 404;
      stan::math::validate_non_negative_index("ipd_ncat", "ni_ipd", ni_ipd);
      current_statement__ = 405;
      context__.validate_dims("data initialization", "ipd_ncat", "int",
        std::vector<size_t>{static_cast<size_t>(ni_ipd)});
      ipd_ncat = std::vector<int>(ni_ipd, std::numeric_limits<int>::min());
      current_statement__ = 405;
      ipd_ncat = context__.vals_i("ipd_ncat");
      current_statement__ = 405;
      stan::math::check_greater_or_equal(function__, "ipd_ncat", ipd_ncat, 2);
      current_statement__ = 405;
      stan::math::check_less_or_equal(function__, "ipd_ncat", ipd_ncat, ncat);
      current_statement__ = 406;
      stan::math::validate_non_negative_index("agd_arm_r", "ni_agd_arm",
        ni_agd_arm);
      current_statement__ = 407;
      stan::math::validate_non_negative_index("agd_arm_r", "ncat", ncat);
      current_statement__ = 408;
      context__.validate_dims("data initialization", "agd_arm_r", "int",
        std::vector<size_t>{static_cast<size_t>(ni_agd_arm),
          static_cast<size_t>(ncat)});
      agd_arm_r = std::vector<std::vector<int>>(ni_agd_arm,
                    std::vector<int>(ncat, std::numeric_limits<int>::min()));
      {
        std::vector<int> agd_arm_r_flat__;
        current_statement__ = 408;
        agd_arm_r_flat__ = context__.vals_i("agd_arm_r");
        current_statement__ = 408;
        pos__ = 1;
        current_statement__ = 408;
        for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
          current_statement__ = 408;
          for (int sym2__ = 1; sym2__ <= ni_agd_arm; ++sym2__) {
            current_statement__ = 408;
            stan::model::assign(agd_arm_r, agd_arm_r_flat__[(pos__ - 1)],
              "assigning variable agd_arm_r", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 408;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 408;
      stan::math::check_greater_or_equal(function__, "agd_arm_r", agd_arm_r,
        0);
      current_statement__ = 409;
      stan::math::validate_non_negative_index("agd_arm_n", "ni_agd_arm",
        ni_agd_arm);
      current_statement__ = 410;
      context__.validate_dims("data initialization", "agd_arm_n", "double",
        std::vector<size_t>{static_cast<size_t>(ni_agd_arm)});
      agd_arm_n_data__ = Eigen::Matrix<double,-1,1>::Constant(ni_agd_arm,
                           std::numeric_limits<double>::quiet_NaN());
      new (&agd_arm_n)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(agd_arm_n_data__.data(),
        ni_agd_arm);
      {
        std::vector<local_scalar_t__> agd_arm_n_flat__;
        current_statement__ = 410;
        agd_arm_n_flat__ = context__.vals_r("agd_arm_n");
        current_statement__ = 410;
        pos__ = 1;
        current_statement__ = 410;
        for (int sym1__ = 1; sym1__ <= ni_agd_arm; ++sym1__) {
          current_statement__ = 410;
          stan::model::assign(agd_arm_n, agd_arm_n_flat__[(pos__ - 1)],
            "assigning variable agd_arm_n", stan::model::index_uni(sym1__));
          current_statement__ = 410;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 411;
      stan::math::validate_non_negative_index("agd_arm_cat", "ni_agd_arm",
        ni_agd_arm);
      current_statement__ = 412;
      stan::math::validate_non_negative_index("agd_arm_cat", "ncat", ncat);
      current_statement__ = 413;
      context__.validate_dims("data initialization", "agd_arm_cat", "int",
        std::vector<size_t>{static_cast<size_t>(ni_agd_arm),
          static_cast<size_t>(ncat)});
      agd_arm_cat = std::vector<std::vector<int>>(ni_agd_arm,
                      std::vector<int>(ncat, std::numeric_limits<int>::min()));
      {
        std::vector<int> agd_arm_cat_flat__;
        current_statement__ = 413;
        agd_arm_cat_flat__ = context__.vals_i("agd_arm_cat");
        current_statement__ = 413;
        pos__ = 1;
        current_statement__ = 413;
        for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
          current_statement__ = 413;
          for (int sym2__ = 1; sym2__ <= ni_agd_arm; ++sym2__) {
            current_statement__ = 413;
            stan::model::assign(agd_arm_cat, agd_arm_cat_flat__[(pos__ - 1)],
              "assigning variable agd_arm_cat",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 413;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 413;
      stan::math::check_greater_or_equal(function__, "agd_arm_cat",
        agd_arm_cat, 0);
      current_statement__ = 413;
      stan::math::check_less_or_equal(function__, "agd_arm_cat", agd_arm_cat,
        ncat);
      current_statement__ = 414;
      stan::math::validate_non_negative_index("agd_arm_ncat", "ni_agd_arm",
        ni_agd_arm);
      current_statement__ = 415;
      context__.validate_dims("data initialization", "agd_arm_ncat", "int",
        std::vector<size_t>{static_cast<size_t>(ni_agd_arm)});
      agd_arm_ncat = std::vector<int>(ni_agd_arm,
                       std::numeric_limits<int>::min());
      current_statement__ = 415;
      agd_arm_ncat = context__.vals_i("agd_arm_ncat");
      current_statement__ = 415;
      stan::math::check_greater_or_equal(function__, "agd_arm_ncat",
        agd_arm_ncat, 2);
      current_statement__ = 415;
      stan::math::check_less_or_equal(function__, "agd_arm_ncat",
        agd_arm_ncat, ncat);
      current_statement__ = 416;
      context__.validate_dims("data initialization", "prior_aux_dist", "int",
        std::vector<size_t>{});
      prior_aux_dist = std::numeric_limits<int>::min();
      current_statement__ = 416;
      prior_aux_dist = context__.vals_i("prior_aux_dist")[(1 - 1)];
      current_statement__ = 416;
      stan::math::check_greater_or_equal(function__, "prior_aux_dist",
        prior_aux_dist, 0);
      current_statement__ = 416;
      stan::math::check_less_or_equal(function__, "prior_aux_dist",
        prior_aux_dist, 6);
      current_statement__ = 417;
      context__.validate_dims("data initialization", "prior_aux_location",
        "double", std::vector<size_t>{});
      prior_aux_location = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 417;
      prior_aux_location = context__.vals_r("prior_aux_location")[(1 - 1)];
      current_statement__ = 418;
      context__.validate_dims("data initialization", "prior_aux_scale",
        "double", std::vector<size_t>{});
      prior_aux_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 418;
      prior_aux_scale = context__.vals_r("prior_aux_scale")[(1 - 1)];
      current_statement__ = 418;
      stan::math::check_greater_or_equal(function__, "prior_aux_scale",
        prior_aux_scale, 0);
      current_statement__ = 419;
      context__.validate_dims("data initialization", "prior_aux_df",
        "double", std::vector<size_t>{});
      prior_aux_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 419;
      prior_aux_df = context__.vals_r("prior_aux_df")[(1 - 1)];
      current_statement__ = 419;
      stan::math::check_greater_or_equal(function__, "prior_aux_df",
        prior_aux_df, 0);
      current_statement__ = 420;
      stan::math::validate_non_negative_index("theta_ipd0", "ni_ipd", ni_ipd);
      current_statement__ = 421;
      stan::math::validate_non_negative_index("theta_ipd0", "ncat", ncat);
      current_statement__ = 422;
      theta_ipd0 = std::vector<Eigen::Matrix<double,-1,1>>(ni_ipd,
                     Eigen::Matrix<double,-1,1>::Constant(ncat,
                       std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 422;
      stan::model::assign(theta_ipd0,
        stan::math::rep_array(stan::math::rep_vector(0, ncat), ni_ipd),
        "assigning variable theta_ipd0");
      current_statement__ = 423;
      stan::math::validate_non_negative_index("theta_agd_arm_bar0",
        "ni_agd_arm", ni_agd_arm);
      current_statement__ = 424;
      stan::math::validate_non_negative_index("theta_agd_arm_bar0", "ncat",
        ncat);
      current_statement__ = 425;
      theta_agd_arm_bar0 = std::vector<Eigen::Matrix<double,-1,1>>(ni_agd_arm,
                             Eigen::Matrix<double,-1,1>::Constant(ncat,
                               std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 425;
      stan::model::assign(theta_agd_arm_bar0,
        stan::math::rep_array(stan::math::rep_vector(0, ncat), ni_agd_arm),
        "assigning variable theta_agd_arm_bar0");
      current_statement__ = 426;
      nint = std::numeric_limits<int>::min();
      current_statement__ = 426;
      nint = stan::model::rvalue(nint_vec, "nint_vec",
               stan::model::index_uni(CHAIN_ID));
      current_statement__ = 427;
      n_delta = std::numeric_limits<int>::min();
      current_statement__ = 427;
      n_delta = (RE ? stan::math::max(which_RE) : 0);
      current_statement__ = 428;
      stan::math::validate_non_negative_index("RE_mu", "n_delta", n_delta);
      current_statement__ = 429;
      RE_mu_data__ = Eigen::Matrix<double,-1,1>::Constant(n_delta,
                       std::numeric_limits<double>::quiet_NaN());
      new (&RE_mu)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(RE_mu_data__.data(), n_delta);
      current_statement__ = 429;
      stan::model::assign(RE_mu, stan::math::rep_vector(0, n_delta),
        "assigning variable RE_mu");
      current_statement__ = 430;
      REdummy_data__ = Eigen::Matrix<double,-1,-1>::Constant(0, 0,
                         std::numeric_limits<double>::quiet_NaN());
      new (&REdummy)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(REdummy_data__.data(), 0, 0);
      current_statement__ = 431;
      stan::math::validate_non_negative_index("RE_L", "n_delta", n_delta);
      current_statement__ = 431;
      stan::math::validate_non_negative_index("RE_L", "n_delta", n_delta);
      current_statement__ = 432;
      RE_L_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_delta, n_delta,
                      std::numeric_limits<double>::quiet_NaN());
      new (&RE_L) Eigen::Map<Eigen::Matrix<double,-1,-1>>(RE_L_data__.data(),
        n_delta, n_delta);
      current_statement__ = 432;
      stan::model::assign(RE_L,
        (n_delta ? stan::math::eval(stan::math::cholesky_decompose(RE_cor)) : 
        stan::math::eval(REdummy)), "assigning variable RE_L");
      current_statement__ = 433;
      wdummy_data__ = Eigen::Matrix<double,-1,1>::Constant(0,
                        std::numeric_limits<double>::quiet_NaN());
      new (&wdummy)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(wdummy_data__.data(), 0);
      current_statement__ = 434;
      vudummy = std::vector<int>(0, std::numeric_limits<int>::min());
      current_statement__ = 435;
      RE_L_nz = std::numeric_limits<int>::min();
      current_statement__ = 435;
      RE_L_nz = count_nonzero(RE_L, pstream__);
      current_statement__ = 436;
      RE_sparse = std::numeric_limits<int>::min();
      current_statement__ = 436;
      RE_sparse = stan::math::logical_lte(((RE_L_nz * 1.0) /
                    stan::math::num_elements(RE_L)), 0.1);
      current_statement__ = 437;
      stan::math::validate_non_negative_index("RE_L_w",
        "RE_sparse ? RE_L_nz : 0", (RE_sparse ? RE_L_nz : 0));
      current_statement__ = 438;
      RE_L_w_data__ = Eigen::Matrix<double,-1,1>::Constant((RE_sparse ? RE_L_nz : 0),
                        std::numeric_limits<double>::quiet_NaN());
      new (&RE_L_w)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(RE_L_w_data__.data(),
        (RE_sparse ? RE_L_nz : 0));
      current_statement__ = 438;
      stan::model::assign(RE_L_w,
        (RE_sparse ? stan::math::eval(stan::math::csr_extract_w(RE_L)) : 
        stan::math::eval(wdummy)), "assigning variable RE_L_w");
      current_statement__ = 439;
      stan::math::validate_non_negative_index("RE_L_v",
        "RE_sparse ? RE_L_nz : 0", (RE_sparse ? RE_L_nz : 0));
      current_statement__ = 440;
      RE_L_v = std::vector<int>((RE_sparse ? RE_L_nz : 0),
                 std::numeric_limits<int>::min());
      current_statement__ = 440;
      stan::model::assign(RE_L_v,
        (RE_sparse ? stan::math::csr_extract_v(RE_L) : vudummy),
        "assigning variable RE_L_v");
      current_statement__ = 441;
      stan::math::validate_non_negative_index("RE_L_u",
        "RE_sparse ? n_delta + 1 : 0", (RE_sparse ? (n_delta + 1) : 0));
      current_statement__ = 442;
      RE_L_u = std::vector<int>((RE_sparse ? (n_delta + 1) : 0),
                 std::numeric_limits<int>::min());
      current_statement__ = 442;
      stan::model::assign(RE_L_u,
        (RE_sparse ? stan::math::csr_extract_u(RE_L) : vudummy),
        "assigning variable RE_L_u");
      current_statement__ = 443;
      totns = std::numeric_limits<int>::min();
      current_statement__ = 443;
      totns = (ns_ipd + ns_agd_arm);
      current_statement__ = 444;
      stan::math::validate_non_negative_index("trt",
        "narm_ipd + narm_agd_arm + ni_agd_contrast", ((narm_ipd +
        narm_agd_arm) + ni_agd_contrast));
      current_statement__ = 445;
      trt = std::vector<int>(((narm_ipd + narm_agd_arm) + ni_agd_contrast),
              std::numeric_limits<int>::min());
      current_statement__ = 445;
      stan::model::assign(trt,
        stan::math::append_array(
          stan::math::append_array(ipd_trt, agd_arm_trt), agd_contrast_trt),
        "assigning variable trt");
      current_statement__ = 446;
      stan::math::validate_non_negative_index("Xdummy", "nX", nX);
      current_statement__ = 447;
      Xdummy_data__ = Eigen::Matrix<double,-1,-1>::Constant(0, nX,
                        std::numeric_limits<double>::quiet_NaN());
      new (&Xdummy)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(Xdummy_data__.data(), 0, nX);
      current_statement__ = 448;
      stan::math::validate_non_negative_index("X_ipd", "ni_ipd", ni_ipd);
      current_statement__ = 449;
      stan::math::validate_non_negative_index("X_ipd", "nX", nX);
      current_statement__ = 450;
      X_ipd_data__ = Eigen::Matrix<double,-1,-1>::Constant(ni_ipd, nX,
                       std::numeric_limits<double>::quiet_NaN());
      new (&X_ipd)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_ipd_data__.data(), ni_ipd,
        nX);
      current_statement__ = 450;
      stan::model::assign(X_ipd,
        (ni_ipd ? stan::math::eval(
                    stan::model::rvalue(X, "X",
                      stan::model::index_min_max(1, ni_ipd))) : stan::math::eval(
                                                                  Xdummy)),
        "assigning variable X_ipd");
      current_statement__ = 451;
      stan::math::validate_non_negative_index("X_agd_arm",
        "nint_max * ni_agd_arm", (nint_max * ni_agd_arm));
      current_statement__ = 452;
      stan::math::validate_non_negative_index("X_agd_arm", "nX", nX);
      current_statement__ = 453;
      X_agd_arm_data__ = Eigen::Matrix<double,-1,-1>::Constant((nint_max *
                           ni_agd_arm), nX,
                           std::numeric_limits<double>::quiet_NaN());
      new (&X_agd_arm)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_agd_arm_data__.data(),
        (nint_max * ni_agd_arm), nX);
      current_statement__ = 453;
      stan::model::assign(X_agd_arm,
        (ni_agd_arm ? stan::math::eval(
                        stan::model::rvalue(X, "X",
                          stan::model::index_min_max((ni_ipd + 1), (ni_ipd +
                            (nint_max * ni_agd_arm))))) : stan::math::eval(
                                                            Xdummy)),
        "assigning variable X_agd_arm");
      current_statement__ = 454;
      stan::math::validate_non_negative_index("X_agd_contrast",
        "nint_max * ni_agd_contrast", (nint_max * ni_agd_contrast));
      current_statement__ = 455;
      stan::math::validate_non_negative_index("X_agd_contrast", "nX", nX);
      current_statement__ = 456;
      X_agd_contrast_data__ = Eigen::Matrix<double,-1,-1>::Constant((nint_max
                                * ni_agd_contrast), nX,
                                std::numeric_limits<double>::quiet_NaN());
      new (&X_agd_contrast)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_agd_contrast_data__.data(),
        (nint_max * ni_agd_contrast), nX);
      current_statement__ = 456;
      stan::model::assign(X_agd_contrast,
        (ni_agd_contrast ? stan::math::eval(
                             stan::model::rvalue(X, "X",
                               stan::model::index_min_max(((ni_ipd +
                                 (nint_max * ni_agd_arm)) + 1), (ni_ipd +
                                 (nint_max * (ni_agd_arm + ni_agd_contrast)))))) : 
        stan::math::eval(Xdummy)), "assigning variable X_agd_contrast");
      current_statement__ = 457;
      odummy_data__ = Eigen::Matrix<double,-1,1>::Constant(0,
                        std::numeric_limits<double>::quiet_NaN());
      new (&odummy)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(odummy_data__.data(), 0);
      current_statement__ = 458;
      stan::math::validate_non_negative_index("offset_ipd",
        "has_offset && ni_ipd ? ni_ipd : 0",
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_ipd)) ? ni_ipd : 0));
      current_statement__ = 459;
      offset_ipd_data__ = Eigen::Matrix<double,-1,1>::Constant(((stan::math::primitive_value(
                                                                   has_offset)
                            &&
                            stan::math::primitive_value(ni_ipd)) ? ni_ipd : 0),
                            std::numeric_limits<double>::quiet_NaN());
      new (&offset_ipd)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(offset_ipd_data__.data(),
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_ipd)) ? ni_ipd : 0));
      current_statement__ = 459;
      stan::model::assign(offset_ipd,
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_ipd)) ? stan::math::eval(
                                                 stan::model::rvalue(offsets,
                                                   "offsets",
                                                   stan::model::index_min_max(
                                                     1, ni_ipd))) : stan::math::eval(
                                                                    odummy)),
        "assigning variable offset_ipd");
      current_statement__ = 460;
      stan::math::validate_non_negative_index("offset_agd_arm",
        "has_offset && ni_agd_arm ? nint_max * ni_agd_arm : 0",
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_arm)) ? (nint_max *
        ni_agd_arm) : 0));
      current_statement__ = 461;
      offset_agd_arm_data__ = Eigen::Matrix<double,-1,1>::Constant(((
                                stan::math::primitive_value(has_offset) &&
                                stan::math::primitive_value(ni_agd_arm)) ? (nint_max
                                * ni_agd_arm) : 0),
                                std::numeric_limits<double>::quiet_NaN());
      new (&offset_agd_arm)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(offset_agd_arm_data__.data(),
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_arm)) ? (nint_max *
        ni_agd_arm) : 0));
      current_statement__ = 461;
      stan::model::assign(offset_agd_arm,
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_arm)) ? stan::math::eval(
                                                     stan::model::rvalue(
                                                       offsets, "offsets",
                                                       stan::model::index_min_max(
                                                         (ni_ipd + 1),
                                                         (ni_ipd + (nint_max
                                                         * ni_agd_arm))))) : 
        stan::math::eval(odummy)), "assigning variable offset_agd_arm");
      current_statement__ = 462;
      stan::math::validate_non_negative_index("offset_agd_contrast",
        "has_offset && ni_agd_contrast ? nint_max * ni_agd_contrast : 0",
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_contrast)) ? (nint_max *
        ni_agd_contrast) : 0));
      current_statement__ = 463;
      offset_agd_contrast_data__ = Eigen::Matrix<double,-1,1>::Constant(((
                                     stan::math::primitive_value(has_offset)
                                     &&
                                     stan::math::primitive_value(
                                       ni_agd_contrast)) ? (nint_max *
                                     ni_agd_contrast) : 0),
                                     std::numeric_limits<double>::quiet_NaN());
      new (&offset_agd_contrast)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(offset_agd_contrast_data__.data(),
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_contrast)) ? (nint_max *
        ni_agd_contrast) : 0));
      current_statement__ = 463;
      stan::model::assign(offset_agd_contrast,
        ((stan::math::primitive_value(has_offset) &&
        stan::math::primitive_value(ni_agd_contrast)) ? stan::math::eval(
                                                          stan::model::rvalue(
                                                            offsets,
                                                            "offsets",
                                                            stan::model::index_min_max(
                                                              ((ni_ipd +
                                                              (nint_max *
                                                              ni_agd_arm)) +
                                                              1), (ni_ipd +
                                                              (nint_max *
                                                              (ni_agd_arm +
                                                              ni_agd_contrast)))))) : 
        stan::math::eval(odummy)), "assigning variable offset_agd_contrast");
      current_statement__ = 464;
      n_int_thin = std::numeric_limits<int>::min();
      current_statement__ = 464;
      n_int_thin = ((stan::math::primitive_value(
                       stan::math::logical_gt(nint_max, 1))
        &&
        stan::math::primitive_value(stan::math::logical_gt(int_thin, 0))) ? (nint
        / int_thin) : 0);
      current_statement__ = 465;
      stan::math::validate_non_negative_index("inv_Sigma",
        "ni_agd_contrast ? ni_agd_contrast : 1",
        (ni_agd_contrast ? ni_agd_contrast : 1));
      current_statement__ = 466;
      stan::math::validate_non_negative_index("inv_Sigma",
        "ni_agd_contrast ? ni_agd_contrast : 1",
        (ni_agd_contrast ? ni_agd_contrast : 1));
      current_statement__ = 467;
      inv_Sigma_data__ = Eigen::Matrix<double,-1,-1>::Constant((ni_agd_contrast ? ni_agd_contrast : 1),
                           (ni_agd_contrast ? ni_agd_contrast : 1),
                           std::numeric_limits<double>::quiet_NaN());
      new (&inv_Sigma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(inv_Sigma_data__.data(),
        (ni_agd_contrast ? ni_agd_contrast : 1),
        (ni_agd_contrast ? ni_agd_contrast : 1));
      current_statement__ = 467;
      stan::model::assign(inv_Sigma,
        stan::math::inverse_spd(agd_contrast_Sigma),
        "assigning variable inv_Sigma");
      current_statement__ = 468;
      stan::math::validate_non_negative_index("nc_agd_contrast",
        "ns_agd_contrast", ns_agd_contrast);
      current_statement__ = 469;
      nc_agd_contrast = std::vector<int>(ns_agd_contrast,
                          std::numeric_limits<int>::min());
      current_statement__ = 483;
      if (ns_agd_contrast) {
        int s = std::numeric_limits<int>::min();
        current_statement__ = 470;
        s = 1;
        int c = std::numeric_limits<int>::min();
        current_statement__ = 471;
        c = 1;
        current_statement__ = 480;
        for (int i = 1; i <= (ni_agd_contrast - 1); ++i) {
          current_statement__ = 478;
          if (stan::math::logical_eq(
                stan::model::rvalue(agd_contrast_Sigma, "agd_contrast_Sigma",
                  stan::model::index_uni(i), stan::model::index_uni((i + 1))),
                0)) {
            current_statement__ = 474;
            stan::model::assign(nc_agd_contrast, c,
              "assigning variable nc_agd_contrast", stan::model::index_uni(s));
            current_statement__ = 475;
            s = (s + 1);
            current_statement__ = 476;
            c = 1;
          } else {
            current_statement__ = 472;
            c = (c + 1);
          }
        }
        current_statement__ = 481;
        stan::model::assign(nc_agd_contrast, c,
          "assigning variable nc_agd_contrast", stan::model::index_uni(s));
      }
      current_statement__ = 426;
      stan::math::check_greater_or_equal(function__, "nint", nint, 1);
      current_statement__ = 426;
      stan::math::check_less_or_equal(function__, "nint", nint, nint_max);
      current_statement__ = 427;
      stan::math::check_greater_or_equal(function__, "n_delta", n_delta, 0);
      current_statement__ = 432;
      stan::math::check_cholesky_factor_corr(function__, "RE_L", RE_L);
      current_statement__ = 445;
      stan::math::check_greater_or_equal(function__, "trt", trt, 1);
      current_statement__ = 484;
      stan::math::validate_non_negative_index("beta_tilde", "nX", nX);
      current_statement__ = 485;
      stan::math::validate_non_negative_index("u_delta", "n_delta", n_delta);
      current_statement__ = 486;
      tau_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 486;
      tau_1dim__ = (RE ? 1 : 0);
      current_statement__ = 486;
      stan::math::validate_non_negative_index("tau", "RE ? 1 : 0", tau_1dim__);
      current_statement__ = 487;
      f_cc_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 487;
      f_cc_1dim__ = (ncat - 2);
      current_statement__ = 487;
      stan::math::validate_non_negative_index("f_cc", "ncat - 2", f_cc_1dim__);
      current_statement__ = 488;
      cc_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 488;
      cc_1dim__ = (ncat - 1);
      current_statement__ = 488;
      stan::math::validate_non_negative_index("cc", "ncat - 1", cc_1dim__);
      current_statement__ = 489;
      stan::math::validate_non_negative_index("theta_ipd", "ni_ipd", ni_ipd);
      current_statement__ = 490;
      stan::math::validate_non_negative_index("theta_ipd", "ncat", ncat);
      current_statement__ = 491;
      theta_agd_arm_ii_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 491;
      theta_agd_arm_ii_1dim__ = (stan::math::logical_gt(nint_max, 1) ? (nint
        * ni_agd_arm) : 0);
      current_statement__ = 491;
      stan::math::validate_non_negative_index("theta_agd_arm_ii",
        "nint_max > 1 ? nint * ni_agd_arm : 0", theta_agd_arm_ii_1dim__);
      current_statement__ = 492;
      theta_agd_arm_ii_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 492;
      theta_agd_arm_ii_2dim__ = (stan::math::logical_gt(nint_max, 1) ? (ncat
        - 1) : 0);
      current_statement__ = 492;
      stan::math::validate_non_negative_index("theta_agd_arm_ii",
        "nint_max > 1 ? ncat - 1 : 0", theta_agd_arm_ii_2dim__);
      current_statement__ = 493;
      stan::math::validate_non_negative_index("q_agd_arm_bar", "ni_agd_arm",
        ni_agd_arm);
      current_statement__ = 494;
      stan::math::validate_non_negative_index("q_agd_arm_bar", "ncat", ncat);
      current_statement__ = 495;
      stan::math::validate_non_negative_index("theta_agd_arm_bar",
        "ni_agd_arm", ni_agd_arm);
      current_statement__ = 496;
      stan::math::validate_non_negative_index("theta_agd_arm_bar", "ncat",
        ncat);
      current_statement__ = 497;
      stan::math::validate_non_negative_index("eta_ipd", "ni_ipd", ni_ipd);
      current_statement__ = 498;
      stan::math::validate_non_negative_index("f_delta", "n_delta", n_delta);
      current_statement__ = 499;
      stan::math::validate_non_negative_index("allbeta", "nX", nX);
      current_statement__ = 500;
      stan::math::validate_non_negative_index("mu", "totns", totns);
      current_statement__ = 501;
      d_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 501;
      d_1dim__ = (nt - 1);
      current_statement__ = 501;
      stan::math::validate_non_negative_index("d", "nt - 1", d_1dim__);
      current_statement__ = 502;
      stan::math::validate_non_negative_index("omega", "nodesplit", nodesplit);
      current_statement__ = 503;
      beta_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 503;
      beta_1dim__ = (((nX - totns) - (nt - 1)) - nodesplit);
      current_statement__ = 503;
      stan::math::validate_non_negative_index("beta",
        "nX - totns - (nt - 1) - nodesplit", beta_1dim__);
      current_statement__ = 504;
      eta_agd_contrast_ii_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 504;
      eta_agd_contrast_ii_1dim__ = (stan::math::logical_gt(nint_max, 1) ? (nint
        * ni_agd_contrast) : 0);
      current_statement__ = 504;
      stan::math::validate_non_negative_index("eta_agd_contrast_ii",
        "nint_max > 1 ? nint * ni_agd_contrast : 0",
        eta_agd_contrast_ii_1dim__);
      current_statement__ = 505;
      stan::math::validate_non_negative_index("eta_agd_contrast_bar",
        "ni_agd_contrast", ni_agd_contrast);
      current_statement__ = 506;
      stan::math::validate_non_negative_index("fitted_ipd", "ni_ipd", ni_ipd);
      current_statement__ = 507;
      stan::math::validate_non_negative_index("fitted_ipd", "ncat", ncat);
      current_statement__ = 508;
      stan::math::validate_non_negative_index("fitted_agd_arm", "ni_agd_arm",
        ni_agd_arm);
      current_statement__ = 509;
      stan::math::validate_non_negative_index("fitted_agd_arm", "ncat", ncat);
      current_statement__ = 510;
      theta_bar_cum_agd_arm_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 510;
      theta_bar_cum_agd_arm_1dim__ = (ni_agd_arm * n_int_thin);
      current_statement__ = 510;
      stan::math::validate_non_negative_index("theta_bar_cum_agd_arm",
        "ni_agd_arm * n_int_thin", theta_bar_cum_agd_arm_1dim__);
      current_statement__ = 511;
      stan::math::validate_non_negative_index("theta_bar_cum_agd_arm",
        "ncat", ncat);
      current_statement__ = 512;
      log_lik_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 512;
      log_lik_1dim__ = ((ni_ipd + ni_agd_arm) + ns_agd_contrast);
      current_statement__ = 512;
      stan::math::validate_non_negative_index("log_lik",
        "ni_ipd + ni_agd_arm + ns_agd_contrast", log_lik_1dim__);
      current_statement__ = 513;
      resdev_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 513;
      resdev_1dim__ = ((ni_ipd + ni_agd_arm) + ns_agd_contrast);
      current_statement__ = 513;
      stan::math::validate_non_negative_index("resdev",
        "ni_ipd + ni_agd_arm + ns_agd_contrast", resdev_1dim__);
      current_statement__ = 514;
      stan::math::validate_non_negative_index("fitted_agd_contrast",
        "ni_agd_contrast", ni_agd_contrast);
      current_statement__ = 515;
      theta_bar_cum_agd_contrast_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 515;
      theta_bar_cum_agd_contrast_1dim__ = (ni_agd_contrast * n_int_thin);
      current_statement__ = 515;
      stan::math::validate_non_negative_index("theta_bar_cum_agd_contrast",
        "ni_agd_contrast * n_int_thin", theta_bar_cum_agd_contrast_1dim__);
      current_statement__ = 516;
      stan::math::validate_non_negative_index("delta", "n_delta", n_delta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = nX + n_delta + tau_1dim__ + f_cc_1dim__;
  }
  inline std::string model_name() const final {
    return "model_ordered_multinomial";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_ordered_multinomial_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta_tilde =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nX, DUMMY_VAR__);
      current_statement__ = 1;
      beta_tilde = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(nX);
      Eigen::Matrix<local_scalar_t__,-1,1> u_delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_delta, DUMMY_VAR__);
      current_statement__ = 2;
      u_delta = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_delta);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tau_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      tau = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
              tau_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> f_cc =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(f_cc_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      f_cc = in__.template read_constrain_positive_ordered<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__,
               f_cc_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> cc =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(cc_1dim__,
          DUMMY_VAR__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> theta_ipd =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(ni_ipd,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncat, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__,-1,-1> theta_agd_arm_ii =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(theta_agd_arm_ii_1dim__,
          theta_agd_arm_ii_2dim__, DUMMY_VAR__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> q_agd_arm_bar =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(ni_agd_arm,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncat, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> theta_agd_arm_bar =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(ni_agd_arm,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncat, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__,-1,1> eta_ipd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_ipd, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> f_delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_delta, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(f_delta,
        (RE ? stan::math::eval(
                (RE_sparse ? stan::math::eval(
                               stan::math::multiply(
                                 stan::model::rvalue(tau, "tau",
                                   stan::model::index_uni(1)),
                                 stan::math::csr_matrix_times_vector(n_delta,
                                   n_delta, RE_L_w, RE_L_v, RE_L_u, u_delta))) : 
                stan::math::eval(
                  stan::math::multiply(
                    stan::math::multiply(
                      stan::model::rvalue(tau, "tau",
                        stan::model::index_uni(1)), RE_L), u_delta)))) : 
        stan::math::eval(u_delta)), "assigning variable f_delta");
      Eigen::Matrix<local_scalar_t__,-1,1> allbeta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nX, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(allbeta,
        (QR ? stan::math::eval(stan::math::multiply(R_inv, beta_tilde)) : 
        stan::math::eval(beta_tilde)), "assigning variable allbeta");
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(totns, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> d =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d_1dim__, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(d,
        stan::model::rvalue(allbeta, "allbeta",
          stan::model::index_min_max((totns + 1), ((totns + nt) - 1))),
        "assigning variable d");
      Eigen::Matrix<local_scalar_t__,-1,1> omega =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nodesplit,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_contrast_ii =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eta_agd_contrast_ii_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_contrast_bar =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_agd_contrast,
          DUMMY_VAR__);
      current_statement__ = 29;
      if (totns) {
        current_statement__ = 27;
        stan::model::assign(mu,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_min_max(1, totns)), "assigning variable mu");
      }
      current_statement__ = 32;
      if ((((nX - totns) - (nt - 1)) - nodesplit)) {
        current_statement__ = 30;
        stan::model::assign(beta,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_min(((totns + nt) + nodesplit))),
          "assigning variable beta");
      }
      current_statement__ = 35;
      if (nodesplit) {
        current_statement__ = 33;
        stan::model::assign(omega,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_uni((totns + nt))),
          "assigning variable omega", stan::model::index_uni(1));
      }
      current_statement__ = 49;
      if (ni_ipd) {
        current_statement__ = 47;
        if (RE) {
          current_statement__ = 38;
          stan::math::validate_non_negative_index("eta_ipd_noRE", "ni_ipd",
            ni_ipd);
          Eigen::Matrix<local_scalar_t__,-1,1> eta_ipd_noRE =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ni_ipd,
              DUMMY_VAR__);
          current_statement__ = 39;
          stan::model::assign(eta_ipd_noRE,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_ipd, beta_tilde),
                              offset_ipd)) : stan::math::eval(
                                               stan::math::multiply(X_ipd,
                                                 beta_tilde))),
            "assigning variable eta_ipd_noRE");
          current_statement__ = 44;
          for (int i = 1; i <= ni_ipd; ++i) {
            current_statement__ = 42;
            if (stan::model::rvalue(which_RE, "which_RE",
                  stan::model::index_uni(
                    stan::model::rvalue(ipd_arm, "ipd_arm",
                      stan::model::index_uni(i))))) {
              current_statement__ = 41;
              stan::model::assign(eta_ipd,
                (stan::model::rvalue(eta_ipd_noRE, "eta_ipd_noRE",
                   stan::model::index_uni(i)) +
                stan::model::rvalue(f_delta, "f_delta",
                  stan::model::index_uni(
                    stan::model::rvalue(which_RE, "which_RE",
                      stan::model::index_uni(
                        stan::model::rvalue(ipd_arm, "ipd_arm",
                          stan::model::index_uni(i))))))),
                "assigning variable eta_ipd", stan::model::index_uni(i));
            } else {
              current_statement__ = 40;
              stan::model::assign(eta_ipd,
                stan::model::rvalue(eta_ipd_noRE, "eta_ipd_noRE",
                  stan::model::index_uni(i)), "assigning variable eta_ipd",
                stan::model::index_uni(i));
            }
          }
        } else {
          current_statement__ = 36;
          stan::model::assign(eta_ipd,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_ipd, beta_tilde),
                              offset_ipd)) : stan::math::eval(
                                               stan::math::multiply(X_ipd,
                                                 beta_tilde))),
            "assigning variable eta_ipd");
        }
      }
      current_statement__ = 84;
      if (ni_agd_contrast) {
        current_statement__ = 82;
        if (stan::math::logical_gt(nint_max, 1)) {
          current_statement__ = 62;
          stan::math::validate_non_negative_index("eta_agd_contrast_noRE",
            "nint_max * ni_agd_contrast", (nint_max * ni_agd_contrast));
          Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_contrast_noRE =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant((nint_max *
              ni_agd_contrast), DUMMY_VAR__);
          current_statement__ = 63;
          stan::model::assign(eta_agd_contrast_noRE,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_agd_contrast, beta_tilde),
                              offset_agd_contrast)) : stan::math::eval(
                                                        stan::math::multiply(
                                                          X_agd_contrast,
                                                          beta_tilde))),
            "assigning variable eta_agd_contrast_noRE");
          current_statement__ = 80;
          if (RE) {
            current_statement__ = 78;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 75;
              if (stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i)))) {
                current_statement__ = 74;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::math::add(
                    stan::model::rvalue(eta_agd_contrast_noRE,
                      "eta_agd_contrast_noRE",
                      stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                        (((i - 1) * nint_max) + nint))),
                    stan::model::rvalue(f_delta, "f_delta",
                      stan::model::index_uni(
                        stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni(((narm_ipd + narm_agd_arm) +
                            i)))))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              } else {
                current_statement__ = 73;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE",
                    stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                      (((i - 1) * nint_max) + nint))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              }
              current_statement__ = 76;
              stan::model::assign(eta_agd_contrast_bar,
                stan::math::mean(
                  stan::model::rvalue(eta_agd_contrast_ii,
                    "eta_agd_contrast_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)))), "assigning variable eta_agd_contrast_bar",
                stan::model::index_uni(i));
            }
          } else {
            current_statement__ = 68;
            if (stan::math::logical_eq(nint, nint_max)) {
              current_statement__ = 67;
              stan::model::assign(eta_agd_contrast_ii, eta_agd_contrast_noRE,
                "assigning variable eta_agd_contrast_ii");
            } else {
              current_statement__ = 66;
              for (int i = 1; i <= ni_agd_contrast; ++i) {
                current_statement__ = 64;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE",
                    stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                      (((i - 1) * nint_max) + nint))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              }
            }
            current_statement__ = 71;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 69;
              stan::model::assign(eta_agd_contrast_bar,
                stan::math::mean(
                  stan::model::rvalue(eta_agd_contrast_ii,
                    "eta_agd_contrast_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)))), "assigning variable eta_agd_contrast_bar",
                stan::model::index_uni(i));
            }
          }
        } else {
          current_statement__ = 60;
          if (RE) {
            current_statement__ = 52;
            stan::math::validate_non_negative_index("eta_agd_contrast_noRE",
              "nint * ni_agd_contrast", (nint * ni_agd_contrast));
            Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_contrast_noRE =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant((nint *
                ni_agd_contrast), DUMMY_VAR__);
            current_statement__ = 53;
            stan::model::assign(eta_agd_contrast_noRE,
              (has_offset ? stan::math::eval(
                              stan::math::add(
                                stan::math::multiply(X_agd_contrast,
                                  beta_tilde), offset_agd_contrast)) : 
              stan::math::eval(
                stan::math::multiply(X_agd_contrast, beta_tilde))),
              "assigning variable eta_agd_contrast_noRE");
            current_statement__ = 58;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 56;
              if (stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i)))) {
                current_statement__ = 55;
                stan::model::assign(eta_agd_contrast_bar,
                  (stan::model::rvalue(eta_agd_contrast_noRE,
                     "eta_agd_contrast_noRE", stan::model::index_uni(i)) +
                  stan::model::rvalue(f_delta, "f_delta",
                    stan::model::index_uni(
                      stan::model::rvalue(which_RE, "which_RE",
                        stan::model::index_uni(((narm_ipd + narm_agd_arm) +
                          i)))))), "assigning variable eta_agd_contrast_bar",
                  stan::model::index_uni(i));
              } else {
                current_statement__ = 54;
                stan::model::assign(eta_agd_contrast_bar,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE", stan::model::index_uni(i)),
                  "assigning variable eta_agd_contrast_bar",
                  stan::model::index_uni(i));
              }
            }
          } else {
            current_statement__ = 50;
            stan::model::assign(eta_agd_contrast_bar,
              (has_offset ? stan::math::eval(
                              stan::math::add(
                                stan::math::multiply(X_agd_contrast,
                                  beta_tilde), offset_agd_contrast)) : 
              stan::math::eval(
                stan::math::multiply(X_agd_contrast, beta_tilde))),
              "assigning variable eta_agd_contrast_bar");
          }
        }
      }
      current_statement__ = 85;
      stan::model::assign(cc, 0, "assigning variable cc",
        stan::model::index_uni(1));
      current_statement__ = 87;
      if (stan::math::logical_gt(ncat, 2)) {
        current_statement__ = 86;
        stan::model::assign(cc, f_cc, "assigning variable cc",
          stan::model::index_min(2));
      }
      current_statement__ = 88;
      stan::model::assign(theta_ipd, theta_ipd0,
        "assigning variable theta_ipd");
      current_statement__ = 89;
      stan::model::assign(theta_agd_arm_bar, theta_agd_arm_bar0,
        "assigning variable theta_agd_arm_bar");
      current_statement__ = 106;
      for (int i = 1; i <= ni_ipd; ++i) {
        current_statement__ = 90;
        stan::math::validate_non_negative_index("q_temp", "ipd_ncat[i] - 1",
          (stan::model::rvalue(ipd_ncat, "ipd_ncat",
             stan::model::index_uni(i)) - 1));
        Eigen::Matrix<local_scalar_t__,-1,1> q_temp =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::model::rvalue(
                                                            ipd_ncat,
                                                            "ipd_ncat",
                                                            stan::model::index_uni(
                                                              i)) - 1),
            DUMMY_VAR__);
        current_statement__ = 99;
        for (int k = 1; k <=
             (stan::model::rvalue(ipd_ncat, "ipd_ncat",
                stan::model::index_uni(i)) - 1); ++k) {
          current_statement__ = 97;
          if (stan::math::logical_eq(link, 1)) {
            current_statement__ = 96;
            stan::model::assign(q_temp,
              stan::math::inv_logit(
                (stan::model::rvalue(eta_ipd, "eta_ipd",
                   stan::model::index_uni(i)) -
                stan::model::rvalue(cc, "cc",
                  stan::model::index_uni(
                    (stan::model::rvalue(ipd_cat, "ipd_cat",
                       stan::model::index_uni(i),
                       stan::model::index_uni((k + 1))) - 1))))),
              "assigning variable q_temp", stan::model::index_uni(k));
          } else {
            current_statement__ = 95;
            if (stan::math::logical_eq(link, 2)) {
              current_statement__ = 94;
              stan::model::assign(q_temp,
                stan::math::Phi(
                  (stan::model::rvalue(eta_ipd, "eta_ipd",
                     stan::model::index_uni(i)) -
                  stan::model::rvalue(cc, "cc",
                    stan::model::index_uni(
                      (stan::model::rvalue(ipd_cat, "ipd_cat",
                         stan::model::index_uni(i),
                         stan::model::index_uni((k + 1))) - 1))))),
                "assigning variable q_temp", stan::model::index_uni(k));
            } else {
              current_statement__ = 93;
              if (stan::math::logical_eq(link, 3)) {
                current_statement__ = 92;
                stan::model::assign(q_temp,
                  stan::math::inv_cloglog(
                    (stan::model::rvalue(eta_ipd, "eta_ipd",
                       stan::model::index_uni(i)) -
                    stan::model::rvalue(cc, "cc",
                      stan::model::index_uni(
                        (stan::model::rvalue(ipd_cat, "ipd_cat",
                           stan::model::index_uni(i),
                           stan::model::index_uni((k + 1))) - 1))))),
                  "assigning variable q_temp", stan::model::index_uni(k));
              }
            }
          }
        }
        current_statement__ = 100;
        stan::model::assign(theta_ipd, (1 -
          stan::model::rvalue(q_temp, "q_temp", stan::model::index_uni(1))),
          "assigning variable theta_ipd", stan::model::index_uni(i),
          stan::model::index_uni(1));
        current_statement__ = 103;
        for (int k = 2; k <=
             (stan::model::rvalue(ipd_ncat, "ipd_ncat",
                stan::model::index_uni(i)) - 1); ++k) {
          current_statement__ = 101;
          stan::model::assign(theta_ipd,
            (stan::model::rvalue(q_temp, "q_temp",
               stan::model::index_uni((k - 1))) -
            stan::model::rvalue(q_temp, "q_temp", stan::model::index_uni(k))),
            "assigning variable theta_ipd", stan::model::index_uni(i),
            stan::model::index_uni(
              stan::model::rvalue(ipd_cat, "ipd_cat",
                stan::model::index_uni(i), stan::model::index_uni(k))));
        }
        current_statement__ = 104;
        stan::model::assign(theta_ipd,
          stan::model::rvalue(q_temp, "q_temp",
            stan::model::index_uni(
              (stan::model::rvalue(ipd_ncat, "ipd_ncat",
                 stan::model::index_uni(i)) - 1))),
          "assigning variable theta_ipd", stan::model::index_uni(i),
          stan::model::index_uni(
            stan::model::rvalue(ipd_cat, "ipd_cat",
              stan::model::index_uni(i),
              stan::model::index_uni(
                stan::model::rvalue(ipd_ncat, "ipd_ncat",
                  stan::model::index_uni(i))))));
      }
      current_statement__ = 235;
      if (ni_agd_arm) {
        current_statement__ = 107;
        stan::math::validate_non_negative_index("eta_agd_arm_noRE",
          "nint_max * ni_agd_arm", (nint_max * ni_agd_arm));
        Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_arm_noRE =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((nint_max *
            ni_agd_arm), DUMMY_VAR__);
        current_statement__ = 108;
        stan::model::assign(eta_agd_arm_noRE,
          (has_offset ? stan::math::eval(
                          stan::math::add(
                            stan::math::multiply(X_agd_arm, beta_tilde),
                            offset_agd_arm)) : stan::math::eval(
                                                 stan::math::multiply(
                                                   X_agd_arm, beta_tilde))),
          "assigning variable eta_agd_arm_noRE");
        current_statement__ = 227;
        if (stan::math::logical_gt(nint_max, 1)) {
          current_statement__ = 220;
          if (RE) {
            current_statement__ = 187;
            stan::math::validate_non_negative_index("eta_agd_arm_RE", "nint",
              nint);
            Eigen::Matrix<local_scalar_t__,-1,1> eta_agd_arm_RE =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nint,
                DUMMY_VAR__);
            current_statement__ = 218;
            if (stan::math::logical_eq(link, 1)) {
              current_statement__ = 216;
              for (int i = 1; i <= ni_agd_arm; ++i) {
                current_statement__ = 211;
                if (stan::model::rvalue(which_RE, "which_RE",
                      stan::model::index_uni((narm_ipd + i)))) {
                  current_statement__ = 210;
                  stan::model::assign(eta_agd_arm_RE,
                    stan::math::add(
                      stan::model::rvalue(eta_agd_arm_noRE,
                        "eta_agd_arm_noRE",
                        stan::model::index_min_max((1 + ((i - 1) *
                          nint_max)), (((i - 1) * nint_max) + nint))),
                      stan::model::rvalue(f_delta, "f_delta",
                        stan::model::index_uni(
                          stan::model::rvalue(which_RE, "which_RE",
                            stan::model::index_uni((narm_ipd + i)))))),
                    "assigning variable eta_agd_arm_RE");
                } else {
                  current_statement__ = 209;
                  stan::model::assign(eta_agd_arm_RE,
                    stan::model::rvalue(eta_agd_arm_noRE, "eta_agd_arm_noRE",
                      stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                        (((i - 1) * nint_max) + nint))),
                    "assigning variable eta_agd_arm_RE");
                }
                current_statement__ = 214;
                for (int k = 1; k <=
                     (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                        stan::model::index_uni(i)) - 1); ++k) {
                  current_statement__ = 212;
                  stan::model::assign(theta_agd_arm_ii,
                    stan::math::inv_logit(
                      stan::math::subtract(eta_agd_arm_RE,
                        stan::model::rvalue(cc, "cc",
                          stan::model::index_uni(
                            (stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                               stan::model::index_uni(i),
                               stan::model::index_uni((k + 1))) - 1))))),
                    "assigning variable theta_agd_arm_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)), stan::model::index_uni(k));
                }
              }
            } else {
              current_statement__ = 208;
              if (stan::math::logical_eq(link, 2)) {
                current_statement__ = 206;
                for (int i = 1; i <= ni_agd_arm; ++i) {
                  current_statement__ = 201;
                  if (stan::model::rvalue(which_RE, "which_RE",
                        stan::model::index_uni((narm_ipd + i)))) {
                    current_statement__ = 200;
                    stan::model::assign(eta_agd_arm_RE,
                      stan::math::add(
                        stan::model::rvalue(eta_agd_arm_noRE,
                          "eta_agd_arm_noRE",
                          stan::model::index_min_max((1 + ((i - 1) *
                            nint_max)), (((i - 1) * nint_max) + nint))),
                        stan::model::rvalue(f_delta, "f_delta",
                          stan::model::index_uni(
                            stan::model::rvalue(which_RE, "which_RE",
                              stan::model::index_uni((narm_ipd + i)))))),
                      "assigning variable eta_agd_arm_RE");
                  } else {
                    current_statement__ = 199;
                    stan::model::assign(eta_agd_arm_RE,
                      stan::model::rvalue(eta_agd_arm_noRE,
                        "eta_agd_arm_noRE",
                        stan::model::index_min_max((1 + ((i - 1) *
                          nint_max)), (((i - 1) * nint_max) + nint))),
                      "assigning variable eta_agd_arm_RE");
                  }
                  current_statement__ = 204;
                  for (int k = 1; k <=
                       (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                          stan::model::index_uni(i)) - 1); ++k) {
                    current_statement__ = 202;
                    stan::model::assign(theta_agd_arm_ii,
                      stan::math::Phi(
                        stan::math::subtract(eta_agd_arm_RE,
                          stan::model::rvalue(cc, "cc",
                            stan::model::index_uni(
                              (stan::model::rvalue(agd_arm_cat,
                                 "agd_arm_cat", stan::model::index_uni(i),
                                 stan::model::index_uni((k + 1))) - 1))))),
                      "assigning variable theta_agd_arm_ii",
                      stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                        nint)), stan::model::index_uni(k));
                  }
                }
              } else {
                current_statement__ = 198;
                if (stan::math::logical_eq(link, 3)) {
                  current_statement__ = 196;
                  for (int i = 1; i <= ni_agd_arm; ++i) {
                    current_statement__ = 191;
                    if (stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni((narm_ipd + i)))) {
                      current_statement__ = 190;
                      stan::model::assign(eta_agd_arm_RE,
                        stan::math::add(
                          stan::model::rvalue(eta_agd_arm_noRE,
                            "eta_agd_arm_noRE",
                            stan::model::index_min_max((1 + ((i - 1) *
                              nint_max)), (((i - 1) * nint_max) + nint))),
                          stan::model::rvalue(f_delta, "f_delta",
                            stan::model::index_uni(
                              stan::model::rvalue(which_RE, "which_RE",
                                stan::model::index_uni((narm_ipd + i)))))),
                        "assigning variable eta_agd_arm_RE");
                    } else {
                      current_statement__ = 189;
                      stan::model::assign(eta_agd_arm_RE,
                        stan::model::rvalue(eta_agd_arm_noRE,
                          "eta_agd_arm_noRE",
                          stan::model::index_min_max((1 + ((i - 1) *
                            nint_max)), (((i - 1) * nint_max) + nint))),
                        "assigning variable eta_agd_arm_RE");
                    }
                    current_statement__ = 194;
                    for (int k = 1; k <=
                         (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                            stan::model::index_uni(i)) - 1); ++k) {
                      current_statement__ = 192;
                      stan::model::assign(theta_agd_arm_ii,
                        stan::math::inv_cloglog(
                          stan::math::subtract(eta_agd_arm_RE,
                            stan::model::rvalue(cc, "cc",
                              stan::model::index_uni(
                                (stan::model::rvalue(agd_arm_cat,
                                   "agd_arm_cat", stan::model::index_uni(i),
                                   stan::model::index_uni((k + 1))) - 1))))),
                        "assigning variable theta_agd_arm_ii",
                        stan::model::index_min_max((1 + ((i - 1) * nint)), (i
                          * nint)), stan::model::index_uni(k));
                    }
                  }
                }
              }
            }
          } else {
            current_statement__ = 185;
            if (stan::math::logical_eq(link, 1)) {
              current_statement__ = 183;
              for (int i = 1; i <= ni_agd_arm; ++i) {
                current_statement__ = 181;
                for (int k = 1; k <=
                     (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                        stan::model::index_uni(i)) - 1); ++k) {
                  current_statement__ = 179;
                  stan::model::assign(theta_agd_arm_ii,
                    stan::math::inv_logit(
                      stan::math::subtract(
                        stan::model::rvalue(eta_agd_arm_noRE,
                          "eta_agd_arm_noRE",
                          stan::model::index_min_max((1 + ((i - 1) *
                            nint_max)), (((i - 1) * nint_max) + nint))),
                        stan::model::rvalue(cc, "cc",
                          stan::model::index_uni(
                            (stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                               stan::model::index_uni(i),
                               stan::model::index_uni((k + 1))) - 1))))),
                    "assigning variable theta_agd_arm_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)), stan::model::index_uni(k));
                }
              }
            } else {
              current_statement__ = 178;
              if (stan::math::logical_eq(link, 2)) {
                current_statement__ = 176;
                for (int i = 1; i <= ni_agd_arm; ++i) {
                  current_statement__ = 174;
                  for (int k = 1; k <=
                       (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                          stan::model::index_uni(i)) - 1); ++k) {
                    current_statement__ = 172;
                    stan::model::assign(theta_agd_arm_ii,
                      stan::math::Phi(
                        stan::math::subtract(
                          stan::model::rvalue(eta_agd_arm_noRE,
                            "eta_agd_arm_noRE",
                            stan::model::index_min_max((1 + ((i - 1) *
                              nint_max)), (((i - 1) * nint_max) + nint))),
                          stan::model::rvalue(cc, "cc",
                            stan::model::index_uni(
                              (stan::model::rvalue(agd_arm_cat,
                                 "agd_arm_cat", stan::model::index_uni(i),
                                 stan::model::index_uni((k + 1))) - 1))))),
                      "assigning variable theta_agd_arm_ii",
                      stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                        nint)), stan::model::index_uni(k));
                  }
                }
              } else {
                current_statement__ = 171;
                if (stan::math::logical_eq(link, 3)) {
                  current_statement__ = 169;
                  for (int i = 1; i <= ni_agd_arm; ++i) {
                    current_statement__ = 167;
                    for (int k = 1; k <=
                         (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                            stan::model::index_uni(i)) - 1); ++k) {
                      current_statement__ = 165;
                      stan::model::assign(theta_agd_arm_ii,
                        stan::math::inv_cloglog(
                          stan::math::subtract(
                            stan::model::rvalue(eta_agd_arm_noRE,
                              "eta_agd_arm_noRE",
                              stan::model::index_min_max((1 + ((i - 1) *
                                nint_max)), (((i - 1) * nint_max) + nint))),
                            stan::model::rvalue(cc, "cc",
                              stan::model::index_uni(
                                (stan::model::rvalue(agd_arm_cat,
                                   "agd_arm_cat", stan::model::index_uni(i),
                                   stan::model::index_uni((k + 1))) - 1))))),
                        "assigning variable theta_agd_arm_ii",
                        stan::model::index_min_max((1 + ((i - 1) * nint)), (i
                          * nint)), stan::model::index_uni(k));
                    }
                  }
                }
              }
            }
          }
          current_statement__ = 225;
          for (int i = 1; i <= ni_agd_arm; ++i) {
            current_statement__ = 223;
            for (int k = 1; k <=
                 (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                    stan::model::index_uni(i)) - 1); ++k) {
              current_statement__ = 221;
              stan::model::assign(q_agd_arm_bar,
                stan::math::mean(
                  stan::model::rvalue(theta_agd_arm_ii, "theta_agd_arm_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)), stan::model::index_uni(k))),
                "assigning variable q_agd_arm_bar",
                stan::model::index_uni(i), stan::model::index_uni(k));
            }
          }
        } else {
          current_statement__ = 163;
          if (RE) {
            local_scalar_t__ eta_agd_arm_RE = DUMMY_VAR__;
            current_statement__ = 161;
            if (stan::math::logical_eq(link, 1)) {
              current_statement__ = 159;
              for (int i = 1; i <= ni_agd_arm; ++i) {
                current_statement__ = 154;
                if (stan::model::rvalue(which_RE, "which_RE",
                      stan::model::index_uni((narm_ipd + i)))) {
                  current_statement__ = 153;
                  eta_agd_arm_RE = (stan::model::rvalue(eta_agd_arm_noRE,
                                      "eta_agd_arm_noRE",
                                      stan::model::index_uni(i))
                    +
                    stan::model::rvalue(f_delta, "f_delta",
                      stan::model::index_uni(
                        stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni((narm_ipd + i))))));
                } else {
                  current_statement__ = 152;
                  eta_agd_arm_RE = stan::model::rvalue(eta_agd_arm_noRE,
                                     "eta_agd_arm_noRE",
                                     stan::model::index_uni(i));
                }
                current_statement__ = 157;
                for (int k = 1; k <=
                     (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                        stan::model::index_uni(i)) - 1); ++k) {
                  current_statement__ = 155;
                  stan::model::assign(q_agd_arm_bar,
                    stan::math::inv_logit((eta_agd_arm_RE -
                      stan::model::rvalue(cc, "cc",
                        stan::model::index_uni(
                          (stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                             stan::model::index_uni(i),
                             stan::model::index_uni((k + 1))) - 1))))),
                    "assigning variable q_agd_arm_bar",
                    stan::model::index_uni(i), stan::model::index_uni(k));
                }
              }
            } else {
              current_statement__ = 151;
              if (stan::math::logical_eq(link, 2)) {
                current_statement__ = 149;
                for (int i = 1; i <= ni_agd_arm; ++i) {
                  current_statement__ = 144;
                  if (stan::model::rvalue(which_RE, "which_RE",
                        stan::model::index_uni((narm_ipd + i)))) {
                    current_statement__ = 143;
                    eta_agd_arm_RE = (stan::model::rvalue(eta_agd_arm_noRE,
                                        "eta_agd_arm_noRE",
                                        stan::model::index_uni(i))
                      +
                      stan::model::rvalue(f_delta, "f_delta",
                        stan::model::index_uni(
                          stan::model::rvalue(which_RE, "which_RE",
                            stan::model::index_uni((narm_ipd + i))))));
                  } else {
                    current_statement__ = 142;
                    eta_agd_arm_RE = stan::model::rvalue(eta_agd_arm_noRE,
                                       "eta_agd_arm_noRE",
                                       stan::model::index_uni(i));
                  }
                  current_statement__ = 147;
                  for (int k = 1; k <=
                       (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                          stan::model::index_uni(i)) - 1); ++k) {
                    current_statement__ = 145;
                    stan::model::assign(q_agd_arm_bar,
                      stan::math::Phi((eta_agd_arm_RE -
                        stan::model::rvalue(cc, "cc",
                          stan::model::index_uni(
                            (stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                               stan::model::index_uni(i),
                               stan::model::index_uni((k + 1))) - 1))))),
                      "assigning variable q_agd_arm_bar",
                      stan::model::index_uni(i), stan::model::index_uni(k));
                  }
                }
              } else {
                current_statement__ = 141;
                if (stan::math::logical_eq(link, 3)) {
                  current_statement__ = 139;
                  for (int i = 1; i <= ni_agd_arm; ++i) {
                    current_statement__ = 134;
                    if (stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni((narm_ipd + i)))) {
                      current_statement__ = 133;
                      eta_agd_arm_RE = (stan::model::rvalue(eta_agd_arm_noRE,
                                          "eta_agd_arm_noRE",
                                          stan::model::index_uni(i))
                        +
                        stan::model::rvalue(f_delta, "f_delta",
                          stan::model::index_uni(
                            stan::model::rvalue(which_RE, "which_RE",
                              stan::model::index_uni((narm_ipd + i))))));
                    } else {
                      current_statement__ = 132;
                      eta_agd_arm_RE = stan::model::rvalue(eta_agd_arm_noRE,
                                         "eta_agd_arm_noRE",
                                         stan::model::index_uni(i));
                    }
                    current_statement__ = 137;
                    for (int k = 1; k <=
                         (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                            stan::model::index_uni(i)) - 1); ++k) {
                      current_statement__ = 135;
                      stan::model::assign(q_agd_arm_bar,
                        stan::math::inv_cloglog((eta_agd_arm_RE -
                          stan::model::rvalue(cc, "cc",
                            stan::model::index_uni(
                              (stan::model::rvalue(agd_arm_cat,
                                 "agd_arm_cat", stan::model::index_uni(i),
                                 stan::model::index_uni((k + 1))) - 1))))),
                        "assigning variable q_agd_arm_bar",
                        stan::model::index_uni(i), stan::model::index_uni(k));
                    }
                  }
                }
              }
            }
          } else {
            current_statement__ = 129;
            if (stan::math::logical_eq(link, 1)) {
              current_statement__ = 127;
              for (int i = 1; i <= ni_agd_arm; ++i) {
                current_statement__ = 125;
                for (int k = 1; k <=
                     (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                        stan::model::index_uni(i)) - 1); ++k) {
                  current_statement__ = 123;
                  stan::model::assign(q_agd_arm_bar,
                    stan::math::inv_logit(
                      (stan::model::rvalue(eta_agd_arm_noRE,
                         "eta_agd_arm_noRE", stan::model::index_uni(i)) -
                      stan::model::rvalue(cc, "cc",
                        stan::model::index_uni(
                          (stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                             stan::model::index_uni(i),
                             stan::model::index_uni((k + 1))) - 1))))),
                    "assigning variable q_agd_arm_bar",
                    stan::model::index_uni(i), stan::model::index_uni(k));
                }
              }
            } else {
              current_statement__ = 122;
              if (stan::math::logical_eq(link, 2)) {
                current_statement__ = 120;
                for (int i = 1; i <= ni_agd_arm; ++i) {
                  current_statement__ = 118;
                  for (int k = 1; k <=
                       (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                          stan::model::index_uni(i)) - 1); ++k) {
                    current_statement__ = 116;
                    stan::model::assign(q_agd_arm_bar,
                      stan::math::Phi(
                        (stan::model::rvalue(eta_agd_arm_noRE,
                           "eta_agd_arm_noRE", stan::model::index_uni(i)) -
                        stan::model::rvalue(cc, "cc",
                          stan::model::index_uni(
                            (stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                               stan::model::index_uni(i),
                               stan::model::index_uni((k + 1))) - 1))))),
                      "assigning variable q_agd_arm_bar",
                      stan::model::index_uni(i), stan::model::index_uni(k));
                  }
                }
              } else {
                current_statement__ = 115;
                if (stan::math::logical_eq(link, 3)) {
                  current_statement__ = 113;
                  for (int i = 1; i <= ni_agd_arm; ++i) {
                    current_statement__ = 111;
                    for (int k = 1; k <=
                         (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                            stan::model::index_uni(i)) - 1); ++k) {
                      current_statement__ = 109;
                      stan::model::assign(q_agd_arm_bar,
                        stan::math::inv_cloglog(
                          (stan::model::rvalue(eta_agd_arm_noRE,
                             "eta_agd_arm_noRE", stan::model::index_uni(i)) -
                          stan::model::rvalue(cc, "cc",
                            stan::model::index_uni(
                              (stan::model::rvalue(agd_arm_cat,
                                 "agd_arm_cat", stan::model::index_uni(i),
                                 stan::model::index_uni((k + 1))) - 1))))),
                        "assigning variable q_agd_arm_bar",
                        stan::model::index_uni(i), stan::model::index_uni(k));
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 233;
        for (int i = 1; i <= ni_agd_arm; ++i) {
          current_statement__ = 228;
          stan::model::assign(theta_agd_arm_bar, (1 -
            stan::model::rvalue(q_agd_arm_bar, "q_agd_arm_bar",
              stan::model::index_uni(i), stan::model::index_uni(1))),
            "assigning variable theta_agd_arm_bar",
            stan::model::index_uni(i), stan::model::index_uni(1));
          current_statement__ = 230;
          for (int k = 2; k <=
               (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                  stan::model::index_uni(i)) - 1); ++k) {
            current_statement__ = 229;
            stan::model::assign(theta_agd_arm_bar,
              (stan::model::rvalue(q_agd_arm_bar, "q_agd_arm_bar",
                 stan::model::index_uni(i), stan::model::index_uni((k - 1)))
              -
              stan::model::rvalue(q_agd_arm_bar, "q_agd_arm_bar",
                stan::model::index_uni(i), stan::model::index_uni(k))),
              "assigning variable theta_agd_arm_bar",
              stan::model::index_uni(i),
              stan::model::index_uni(
                stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                  stan::model::index_uni(i), stan::model::index_uni(k))));
          }
          current_statement__ = 231;
          stan::model::assign(theta_agd_arm_bar,
            stan::model::rvalue(q_agd_arm_bar, "q_agd_arm_bar",
              stan::model::index_uni(i),
              stan::model::index_uni(
                (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                   stan::model::index_uni(i)) - 1))),
            "assigning variable theta_agd_arm_bar",
            stan::model::index_uni(i),
            stan::model::index_uni(
              stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                stan::model::index_uni(i),
                stan::model::index_uni(
                  stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                    stan::model::index_uni(i))))));
        }
      }
      {
        current_statement__ = 297;
        prior_select_lp<propto__>(mu, prior_intercept_dist,
          prior_intercept_location, prior_intercept_scale,
          prior_intercept_df, lp__, lp_accum__, pstream__);
        current_statement__ = 298;
        prior_select_lp<propto__>(d, prior_trt_dist, prior_trt_location,
          prior_trt_scale, prior_trt_df, lp__, lp_accum__, pstream__);
        current_statement__ = 299;
        prior_select_lp<propto__>(beta, prior_reg_dist, prior_reg_location,
          prior_reg_scale, prior_reg_df, lp__, lp_accum__, pstream__);
        current_statement__ = 300;
        prior_select_lp<propto__>(omega, prior_trt_dist, prior_trt_location,
          prior_trt_scale, prior_trt_df, lp__, lp_accum__, pstream__);
        current_statement__ = 318;
        if (RE) {
          current_statement__ = 316;
          if (stan::math::logical_eq(prior_het_type, 1)) {
            current_statement__ = 314;
            prior_select_lp<propto__>(tau, prior_het_dist,
              prior_het_location, prior_het_scale, prior_het_df, lp__,
              lp_accum__, pstream__);
          } else {
            current_statement__ = 301;
            stan::math::validate_non_negative_index("tau_t", "RE ? 1 : 0",
              (RE ? 1 : 0));
            Eigen::Matrix<local_scalar_t__,-1,1> tau_t =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant((RE ? 1 : 0),
                DUMMY_VAR__);
            current_statement__ = 310;
            if (stan::math::logical_eq(prior_het_type, 2)) {
              current_statement__ = 307;
              stan::model::assign(tau_t,
                stan::math::pow(
                  stan::model::rvalue(tau, "tau", stan::model::index_uni(1)),
                  2), "assigning variable tau_t", stan::model::index_uni(1));
              current_statement__ = 308;
              lp_accum__.add(stan::math::log(tau));
            } else {
              current_statement__ = 306;
              if (stan::math::logical_eq(prior_het_type, 3)) {
                current_statement__ = 303;
                stan::model::assign(tau_t,
                  stan::math::pow(
                    stan::model::rvalue(tau, "tau", stan::model::index_uni(1)),
                    -2), "assigning variable tau_t",
                  stan::model::index_uni(1));
                current_statement__ = 304;
                lp_accum__.add(stan::math::multiply(-3, stan::math::log(tau)));
              }
            }
            current_statement__ = 311;
            prior_select_lp<propto__>(tau_t, prior_het_dist,
              prior_het_location, prior_het_scale, prior_het_df, lp__,
              lp_accum__, pstream__);
          }
        }
        current_statement__ = 319;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(u_delta));
        current_statement__ = 322;
        if (ni_agd_contrast) {
          current_statement__ = 320;
          lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(
                           agd_contrast_y, eta_agd_contrast_bar,
                           agd_contrast_Sigma));
        }
        current_statement__ = 324;
        for (int i = 1; i <= ni_ipd; ++i) {
          current_statement__ = 323;
          lp_accum__.add(stan::math::categorical_lpmf<propto__>(
                           stan::model::rvalue(ipd_r, "ipd_r",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(theta_ipd, "theta_ipd",
                             stan::model::index_uni(i))));
        }
        current_statement__ = 326;
        for (int i = 1; i <= ni_agd_arm; ++i) {
          current_statement__ = 325;
          lp_accum__.add(stan::math::multinomial_lpmf<propto__>(
                           stan::model::rvalue(agd_arm_r, "agd_arm_r",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(theta_agd_arm_bar,
                             "theta_agd_arm_bar", stan::model::index_uni(i))));
        }
        current_statement__ = 333;
        if (stan::math::logical_gt(prior_aux_dist, 0)) {
          current_statement__ = 327;
          stan::math::validate_non_negative_index("diff_cc", "ncat - 2",
            (ncat - 2));
          Eigen::Matrix<local_scalar_t__,-1,1> diff_cc =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant((ncat - 2),
              DUMMY_VAR__);
          current_statement__ = 330;
          for (int k = 1; k <= (ncat - 2); ++k) {
            current_statement__ = 329;
            stan::model::assign(diff_cc,
              (stan::model::rvalue(cc, "cc", stan::model::index_uni((k + 1)))
              - stan::model::rvalue(cc, "cc", stan::model::index_uni(k))),
              "assigning variable diff_cc", stan::model::index_uni(k));
          }
          current_statement__ = 331;
          prior_select_lp<propto__>(diff_cc, prior_aux_dist,
            prior_aux_location, prior_aux_scale, prior_aux_df, lp__,
            lp_accum__, pstream__);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_ordered_multinomial_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> beta_tilde =
        Eigen::Matrix<double,-1,1>::Constant(nX,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta_tilde = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(nX);
      Eigen::Matrix<double,-1,1> u_delta =
        Eigen::Matrix<double,-1,1>::Constant(n_delta,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      u_delta = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_delta);
      Eigen::Matrix<double,-1,1> tau =
        Eigen::Matrix<double,-1,1>::Constant(tau_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      tau = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
              tau_1dim__);
      Eigen::Matrix<double,-1,1> f_cc =
        Eigen::Matrix<double,-1,1>::Constant(f_cc_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      f_cc = in__.template read_constrain_positive_ordered<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__,
               f_cc_1dim__);
      Eigen::Matrix<double,-1,1> cc =
        Eigen::Matrix<double,-1,1>::Constant(cc_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,1>> theta_ipd =
        std::vector<Eigen::Matrix<double,-1,1>>(ni_ipd,
          Eigen::Matrix<double,-1,1>::Constant(ncat,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,-1> theta_agd_arm_ii =
        Eigen::Matrix<double,-1,-1>::Constant(theta_agd_arm_ii_1dim__,
          theta_agd_arm_ii_2dim__, std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,1>> q_agd_arm_bar =
        std::vector<Eigen::Matrix<double,-1,1>>(ni_agd_arm,
          Eigen::Matrix<double,-1,1>::Constant(ncat,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> theta_agd_arm_bar =
        std::vector<Eigen::Matrix<double,-1,1>>(ni_agd_arm,
          Eigen::Matrix<double,-1,1>::Constant(ncat,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,1> eta_ipd =
        Eigen::Matrix<double,-1,1>::Constant(ni_ipd,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> f_delta =
        Eigen::Matrix<double,-1,1>::Constant(n_delta,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> allbeta =
        Eigen::Matrix<double,-1,1>::Constant(nX,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(totns,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> d =
        Eigen::Matrix<double,-1,1>::Constant(d_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> omega =
        Eigen::Matrix<double,-1,1>::Constant(nodesplit,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(beta_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> eta_agd_contrast_ii =
        Eigen::Matrix<double,-1,1>::Constant(eta_agd_contrast_ii_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> eta_agd_contrast_bar =
        Eigen::Matrix<double,-1,1>::Constant(ni_agd_contrast,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(beta_tilde);
      out__.write(u_delta);
      out__.write(tau);
      out__.write(f_cc);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 11;
      stan::model::assign(f_delta,
        (RE ? stan::math::eval(
                (RE_sparse ? stan::math::eval(
                               stan::math::multiply(
                                 stan::model::rvalue(tau, "tau",
                                   stan::model::index_uni(1)),
                                 stan::math::csr_matrix_times_vector(n_delta,
                                   n_delta, RE_L_w, RE_L_v, RE_L_u, u_delta))) : 
                stan::math::eval(
                  stan::math::multiply(
                    stan::math::multiply(
                      stan::model::rvalue(tau, "tau",
                        stan::model::index_uni(1)), RE_L), u_delta)))) : 
        stan::math::eval(u_delta)), "assigning variable f_delta");
      current_statement__ = 12;
      stan::model::assign(allbeta,
        (QR ? stan::math::eval(stan::math::multiply(R_inv, beta_tilde)) : 
        stan::math::eval(beta_tilde)), "assigning variable allbeta");
      current_statement__ = 14;
      stan::model::assign(d,
        stan::model::rvalue(allbeta, "allbeta",
          stan::model::index_min_max((totns + 1), ((totns + nt) - 1))),
        "assigning variable d");
      current_statement__ = 29;
      if (totns) {
        current_statement__ = 27;
        stan::model::assign(mu,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_min_max(1, totns)), "assigning variable mu");
      }
      current_statement__ = 32;
      if ((((nX - totns) - (nt - 1)) - nodesplit)) {
        current_statement__ = 30;
        stan::model::assign(beta,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_min(((totns + nt) + nodesplit))),
          "assigning variable beta");
      }
      current_statement__ = 35;
      if (nodesplit) {
        current_statement__ = 33;
        stan::model::assign(omega,
          stan::model::rvalue(allbeta, "allbeta",
            stan::model::index_uni((totns + nt))),
          "assigning variable omega", stan::model::index_uni(1));
      }
      current_statement__ = 49;
      if (ni_ipd) {
        current_statement__ = 47;
        if (RE) {
          current_statement__ = 38;
          stan::math::validate_non_negative_index("eta_ipd_noRE", "ni_ipd",
            ni_ipd);
          Eigen::Matrix<double,-1,1> eta_ipd_noRE =
            Eigen::Matrix<double,-1,1>::Constant(ni_ipd,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 39;
          stan::model::assign(eta_ipd_noRE,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_ipd, beta_tilde),
                              offset_ipd)) : stan::math::eval(
                                               stan::math::multiply(X_ipd,
                                                 beta_tilde))),
            "assigning variable eta_ipd_noRE");
          current_statement__ = 44;
          for (int i = 1; i <= ni_ipd; ++i) {
            current_statement__ = 42;
            if (stan::model::rvalue(which_RE, "which_RE",
                  stan::model::index_uni(
                    stan::model::rvalue(ipd_arm, "ipd_arm",
                      stan::model::index_uni(i))))) {
              current_statement__ = 41;
              stan::model::assign(eta_ipd,
                (stan::model::rvalue(eta_ipd_noRE, "eta_ipd_noRE",
                   stan::model::index_uni(i)) +
                stan::model::rvalue(f_delta, "f_delta",
                  stan::model::index_uni(
                    stan::model::rvalue(which_RE, "which_RE",
                      stan::model::index_uni(
                        stan::model::rvalue(ipd_arm, "ipd_arm",
                          stan::model::index_uni(i))))))),
                "assigning variable eta_ipd", stan::model::index_uni(i));
            } else {
              current_statement__ = 40;
              stan::model::assign(eta_ipd,
                stan::model::rvalue(eta_ipd_noRE, "eta_ipd_noRE",
                  stan::model::index_uni(i)), "assigning variable eta_ipd",
                stan::model::index_uni(i));
            }
          }
        } else {
          current_statement__ = 36;
          stan::model::assign(eta_ipd,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_ipd, beta_tilde),
                              offset_ipd)) : stan::math::eval(
                                               stan::math::multiply(X_ipd,
                                                 beta_tilde))),
            "assigning variable eta_ipd");
        }
      }
      current_statement__ = 84;
      if (ni_agd_contrast) {
        current_statement__ = 82;
        if (stan::math::logical_gt(nint_max, 1)) {
          current_statement__ = 62;
          stan::math::validate_non_negative_index("eta_agd_contrast_noRE",
            "nint_max * ni_agd_contrast", (nint_max * ni_agd_contrast));
          Eigen::Matrix<double,-1,1> eta_agd_contrast_noRE =
            Eigen::Matrix<double,-1,1>::Constant((nint_max *
              ni_agd_contrast), std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 63;
          stan::model::assign(eta_agd_contrast_noRE,
            (has_offset ? stan::math::eval(
                            stan::math::add(
                              stan::math::multiply(X_agd_contrast, beta_tilde),
                              offset_agd_contrast)) : stan::math::eval(
                                                        stan::math::multiply(
                                                          X_agd_contrast,
                                                          beta_tilde))),
            "assigning variable eta_agd_contrast_noRE");
          current_statement__ = 80;
          if (RE) {
            current_statement__ = 78;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 75;
              if (stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i)))) {
                current_statement__ = 74;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::math::add(
                    stan::model::rvalue(eta_agd_contrast_noRE,
                      "eta_agd_contrast_noRE",
                      stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                        (((i - 1) * nint_max) + nint))),
                    stan::model::rvalue(f_delta, "f_delta",
                      stan::model::index_uni(
                        stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni(((narm_ipd + narm_agd_arm) +
                            i)))))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              } else {
                current_statement__ = 73;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE",
                    stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                      (((i - 1) * nint_max) + nint))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              }
              current_statement__ = 76;
              stan::model::assign(eta_agd_contrast_bar,
                stan::math::mean(
                  stan::model::rvalue(eta_agd_contrast_ii,
                    "eta_agd_contrast_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)))), "assigning variable eta_agd_contrast_bar",
                stan::model::index_uni(i));
            }
          } else {
            current_statement__ = 68;
            if (stan::math::logical_eq(nint, nint_max)) {
              current_statement__ = 67;
              stan::model::assign(eta_agd_contrast_ii, eta_agd_contrast_noRE,
                "assigning variable eta_agd_contrast_ii");
            } else {
              current_statement__ = 66;
              for (int i = 1; i <= ni_agd_contrast; ++i) {
                current_statement__ = 64;
                stan::model::assign(eta_agd_contrast_ii,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE",
                    stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                      (((i - 1) * nint_max) + nint))),
                  "assigning variable eta_agd_contrast_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                    nint)));
              }
            }
            current_statement__ = 71;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 69;
              stan::model::assign(eta_agd_contrast_bar,
                stan::math::mean(
                  stan::model::rvalue(eta_agd_contrast_ii,
                    "eta_agd_contrast_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)))), "assigning variable eta_agd_contrast_bar",
                stan::model::index_uni(i));
            }
          }
        } else {
          current_statement__ = 60;
          if (RE) {
            current_statement__ = 52;
            stan::math::validate_non_negative_index("eta_agd_contrast_noRE",
              "nint * ni_agd_contrast", (nint * ni_agd_contrast));
            Eigen::Matrix<double,-1,1> eta_agd_contrast_noRE =
              Eigen::Matrix<double,-1,1>::Constant((nint * ni_agd_contrast),
                std::numeric_limits<double>::quiet_NaN());
            current_statement__ = 53;
            stan::model::assign(eta_agd_contrast_noRE,
              (has_offset ? stan::math::eval(
                              stan::math::add(
                                stan::math::multiply(X_agd_contrast,
                                  beta_tilde), offset_agd_contrast)) : 
              stan::math::eval(
                stan::math::multiply(X_agd_contrast, beta_tilde))),
              "assigning variable eta_agd_contrast_noRE");
            current_statement__ = 58;
            for (int i = 1; i <= ni_agd_contrast; ++i) {
              current_statement__ = 56;
              if (stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i)))) {
                current_statement__ = 55;
                stan::model::assign(eta_agd_contrast_bar,
                  (stan::model::rvalue(eta_agd_contrast_noRE,
                     "eta_agd_contrast_noRE", stan::model::index_uni(i)) +
                  stan::model::rvalue(f_delta, "f_delta",
                    stan::model::index_uni(
                      stan::model::rvalue(which_RE, "which_RE",
                        stan::model::index_uni(((narm_ipd + narm_agd_arm) +
                          i)))))), "assigning variable eta_agd_contrast_bar",
                  stan::model::index_uni(i));
              } else {
                current_statement__ = 54;
                stan::model::assign(eta_agd_contrast_bar,
                  stan::model::rvalue(eta_agd_contrast_noRE,
                    "eta_agd_contrast_noRE", stan::model::index_uni(i)),
                  "assigning variable eta_agd_contrast_bar",
                  stan::model::index_uni(i));
              }
            }
          } else {
            current_statement__ = 50;
            stan::model::assign(eta_agd_contrast_bar,
              (has_offset ? stan::math::eval(
                              stan::math::add(
                                stan::math::multiply(X_agd_contrast,
                                  beta_tilde), offset_agd_contrast)) : 
              stan::math::eval(
                stan::math::multiply(X_agd_contrast, beta_tilde))),
              "assigning variable eta_agd_contrast_bar");
          }
        }
      }
      current_statement__ = 85;
      stan::model::assign(cc, 0, "assigning variable cc",
        stan::model::index_uni(1));
      current_statement__ = 87;
      if (stan::math::logical_gt(ncat, 2)) {
        current_statement__ = 86;
        stan::model::assign(cc, f_cc, "assigning variable cc",
          stan::model::index_min(2));
      }
      current_statement__ = 88;
      stan::model::assign(theta_ipd, theta_ipd0,
        "assigning variable theta_ipd");
      current_statement__ = 89;
      stan::model::assign(theta_agd_arm_bar, theta_agd_arm_bar0,
        "assigning variable theta_agd_arm_bar");
      current_statement__ = 106;
      for (int i = 1; i <= ni_ipd; ++i) {
        current_statement__ = 90;
        stan::math::validate_non_negative_index("q_temp", "ipd_ncat[i] - 1",
          (stan::model::rvalue(ipd_ncat, "ipd_ncat",
             stan::model::index_uni(i)) - 1));
        Eigen::Matrix<double,-1,1> q_temp =
          Eigen::Matrix<double,-1,1>::Constant((stan::model::rvalue(ipd_ncat,
                                                  "ipd_ncat",
                                                  stan::model::index_uni(i))
            - 1), std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 99;
        for (int k = 1; k <=
             (stan::model::rvalue(ipd_ncat, "ipd_ncat",
                stan::model::index_uni(i)) - 1); ++k) {
          current_statement__ = 97;
          if (stan::math::logical_eq(link, 1)) {
            current_statement__ = 96;
            stan::model::assign(q_temp,
              stan::math::inv_logit(
                (stan::model::rvalue(eta_ipd, "eta_ipd",
                   stan::model::index_uni(i)) -
                stan::model::rvalue(cc, "cc",
                  stan::model::index_uni(
                    (stan::model::rvalue(ipd_cat, "ipd_cat",
                       stan::model::index_uni(i),
                       stan::model::index_uni((k + 1))) - 1))))),
              "assigning variable q_temp", stan::model::index_uni(k));
          } else {
            current_statement__ = 95;
            if (stan::math::logical_eq(link, 2)) {
              current_statement__ = 94;
              stan::model::assign(q_temp,
                stan::math::Phi(
                  (stan::model::rvalue(eta_ipd, "eta_ipd",
                     stan::model::index_uni(i)) -
                  stan::model::rvalue(cc, "cc",
                    stan::model::index_uni(
                      (stan::model::rvalue(ipd_cat, "ipd_cat",
                         stan::model::index_uni(i),
                         stan::model::index_uni((k + 1))) - 1))))),
                "assigning variable q_temp", stan::model::index_uni(k));
            } else {
              current_statement__ = 93;
              if (stan::math::logical_eq(link, 3)) {
                current_statement__ = 92;
                stan::model::assign(q_temp,
                  stan::math::inv_cloglog(
                    (stan::model::rvalue(eta_ipd, "eta_ipd",
                       stan::model::index_uni(i)) -
                    stan::model::rvalue(cc, "cc",
                      stan::model::index_uni(
                        (stan::model::rvalue(ipd_cat, "ipd_cat",
                           stan::model::index_uni(i),
                           stan::model::index_uni((k + 1))) - 1))))),
                  "assigning variable q_temp", stan::model::index_uni(k));
              }
            }
          }
        }
        current_statement__ = 100;
        stan::model::assign(theta_ipd, (1 -
          stan::model::rvalue(q_temp, "q_temp", stan::model::index_uni(1))),
          "assigning variable theta_ipd", stan::model::index_uni(i),
          stan::model::index_uni(1));
        current_statement__ = 103;
        for (int k = 2; k <=
             (stan::model::rvalue(ipd_ncat, "ipd_ncat",
                stan::model::index_uni(i)) - 1); ++k) {
          current_statement__ = 101;
          stan::model::assign(theta_ipd,
            (stan::model::rvalue(q_temp, "q_temp",
               stan::model::index_uni((k - 1))) -
            stan::model::rvalue(q_temp, "q_temp", stan::model::index_uni(k))),
            "assigning variable theta_ipd", stan::model::index_uni(i),
            stan::model::index_uni(
              stan::model::rvalue(ipd_cat, "ipd_cat",
                stan::model::index_uni(i), stan::model::index_uni(k))));
        }
        current_statement__ = 104;
        stan::model::assign(theta_ipd,
          stan::model::rvalue(q_temp, "q_temp",
            stan::model::index_uni(
              (stan::model::rvalue(ipd_ncat, "ipd_ncat",
                 stan::model::index_uni(i)) - 1))),
          "assigning variable theta_ipd", stan::model::index_uni(i),
          stan::model::index_uni(
            stan::model::rvalue(ipd_cat, "ipd_cat",
              stan::model::index_uni(i),
              stan::model::index_uni(
                stan::model::rvalue(ipd_ncat, "ipd_ncat",
                  stan::model::index_uni(i))))));
      }
      current_statement__ = 235;
      if (ni_agd_arm) {
        current_statement__ = 107;
        stan::math::validate_non_negative_index("eta_agd_arm_noRE",
          "nint_max * ni_agd_arm", (nint_max * ni_agd_arm));
        Eigen::Matrix<double,-1,1> eta_agd_arm_noRE =
          Eigen::Matrix<double,-1,1>::Constant((nint_max * ni_agd_arm),
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 108;
        stan::model::assign(eta_agd_arm_noRE,
          (has_offset ? stan::math::eval(
                          stan::math::add(
                            stan::math::multiply(X_agd_arm, beta_tilde),
                            offset_agd_arm)) : stan::math::eval(
                                                 stan::math::multiply(
                                                   X_agd_arm, beta_tilde))),
          "assigning variable eta_agd_arm_noRE");
        current_statement__ = 227;
        if (stan::math::logical_gt(nint_max, 1)) {
          current_statement__ = 220;
          if (RE) {
            current_statement__ = 187;
            stan::math::validate_non_negative_index("eta_agd_arm_RE", "nint",
              nint);
            Eigen::Matrix<double,-1,1> eta_agd_arm_RE =
              Eigen::Matrix<double,-1,1>::Constant(nint,
                std::numeric_limits<double>::quiet_NaN());
            current_statement__ = 218;
            if (stan::math::logical_eq(link, 1)) {
              current_statement__ = 216;
              for (int i = 1; i <= ni_agd_arm; ++i) {
                current_statement__ = 211;
                if (stan::model::rvalue(which_RE, "which_RE",
                      stan::model::index_uni((narm_ipd + i)))) {
                  current_statement__ = 210;
                  stan::model::assign(eta_agd_arm_RE,
                    stan::math::add(
                      stan::model::rvalue(eta_agd_arm_noRE,
                        "eta_agd_arm_noRE",
                        stan::model::index_min_max((1 + ((i - 1) *
                          nint_max)), (((i - 1) * nint_max) + nint))),
                      stan::model::rvalue(f_delta, "f_delta",
                        stan::model::index_uni(
                          stan::model::rvalue(which_RE, "which_RE",
                            stan::model::index_uni((narm_ipd + i)))))),
                    "assigning variable eta_agd_arm_RE");
                } else {
                  current_statement__ = 209;
                  stan::model::assign(eta_agd_arm_RE,
                    stan::model::rvalue(eta_agd_arm_noRE, "eta_agd_arm_noRE",
                      stan::model::index_min_max((1 + ((i - 1) * nint_max)),
                        (((i - 1) * nint_max) + nint))),
                    "assigning variable eta_agd_arm_RE");
                }
                current_statement__ = 214;
                for (int k = 1; k <=
                     (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                        stan::model::index_uni(i)) - 1); ++k) {
                  current_statement__ = 212;
                  stan::model::assign(theta_agd_arm_ii,
                    stan::math::inv_logit(
                      stan::math::subtract(eta_agd_arm_RE,
                        stan::model::rvalue(cc, "cc",
                          stan::model::index_uni(
                            (stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                               stan::model::index_uni(i),
                               stan::model::index_uni((k + 1))) - 1))))),
                    "assigning variable theta_agd_arm_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)), stan::model::index_uni(k));
                }
              }
            } else {
              current_statement__ = 208;
              if (stan::math::logical_eq(link, 2)) {
                current_statement__ = 206;
                for (int i = 1; i <= ni_agd_arm; ++i) {
                  current_statement__ = 201;
                  if (stan::model::rvalue(which_RE, "which_RE",
                        stan::model::index_uni((narm_ipd + i)))) {
                    current_statement__ = 200;
                    stan::model::assign(eta_agd_arm_RE,
                      stan::math::add(
                        stan::model::rvalue(eta_agd_arm_noRE,
                          "eta_agd_arm_noRE",
                          stan::model::index_min_max((1 + ((i - 1) *
                            nint_max)), (((i - 1) * nint_max) + nint))),
                        stan::model::rvalue(f_delta, "f_delta",
                          stan::model::index_uni(
                            stan::model::rvalue(which_RE, "which_RE",
                              stan::model::index_uni((narm_ipd + i)))))),
                      "assigning variable eta_agd_arm_RE");
                  } else {
                    current_statement__ = 199;
                    stan::model::assign(eta_agd_arm_RE,
                      stan::model::rvalue(eta_agd_arm_noRE,
                        "eta_agd_arm_noRE",
                        stan::model::index_min_max((1 + ((i - 1) *
                          nint_max)), (((i - 1) * nint_max) + nint))),
                      "assigning variable eta_agd_arm_RE");
                  }
                  current_statement__ = 204;
                  for (int k = 1; k <=
                       (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                          stan::model::index_uni(i)) - 1); ++k) {
                    current_statement__ = 202;
                    stan::model::assign(theta_agd_arm_ii,
                      stan::math::Phi(
                        stan::math::subtract(eta_agd_arm_RE,
                          stan::model::rvalue(cc, "cc",
                            stan::model::index_uni(
                              (stan::model::rvalue(agd_arm_cat,
                                 "agd_arm_cat", stan::model::index_uni(i),
                                 stan::model::index_uni((k + 1))) - 1))))),
                      "assigning variable theta_agd_arm_ii",
                      stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                        nint)), stan::model::index_uni(k));
                  }
                }
              } else {
                current_statement__ = 198;
                if (stan::math::logical_eq(link, 3)) {
                  current_statement__ = 196;
                  for (int i = 1; i <= ni_agd_arm; ++i) {
                    current_statement__ = 191;
                    if (stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni((narm_ipd + i)))) {
                      current_statement__ = 190;
                      stan::model::assign(eta_agd_arm_RE,
                        stan::math::add(
                          stan::model::rvalue(eta_agd_arm_noRE,
                            "eta_agd_arm_noRE",
                            stan::model::index_min_max((1 + ((i - 1) *
                              nint_max)), (((i - 1) * nint_max) + nint))),
                          stan::model::rvalue(f_delta, "f_delta",
                            stan::model::index_uni(
                              stan::model::rvalue(which_RE, "which_RE",
                                stan::model::index_uni((narm_ipd + i)))))),
                        "assigning variable eta_agd_arm_RE");
                    } else {
                      current_statement__ = 189;
                      stan::model::assign(eta_agd_arm_RE,
                        stan::model::rvalue(eta_agd_arm_noRE,
                          "eta_agd_arm_noRE",
                          stan::model::index_min_max((1 + ((i - 1) *
                            nint_max)), (((i - 1) * nint_max) + nint))),
                        "assigning variable eta_agd_arm_RE");
                    }
                    current_statement__ = 194;
                    for (int k = 1; k <=
                         (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                            stan::model::index_uni(i)) - 1); ++k) {
                      current_statement__ = 192;
                      stan::model::assign(theta_agd_arm_ii,
                        stan::math::inv_cloglog(
                          stan::math::subtract(eta_agd_arm_RE,
                            stan::model::rvalue(cc, "cc",
                              stan::model::index_uni(
                                (stan::model::rvalue(agd_arm_cat,
                                   "agd_arm_cat", stan::model::index_uni(i),
                                   stan::model::index_uni((k + 1))) - 1))))),
                        "assigning variable theta_agd_arm_ii",
                        stan::model::index_min_max((1 + ((i - 1) * nint)), (i
                          * nint)), stan::model::index_uni(k));
                    }
                  }
                }
              }
            }
          } else {
            current_statement__ = 185;
            if (stan::math::logical_eq(link, 1)) {
              current_statement__ = 183;
              for (int i = 1; i <= ni_agd_arm; ++i) {
                current_statement__ = 181;
                for (int k = 1; k <=
                     (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                        stan::model::index_uni(i)) - 1); ++k) {
                  current_statement__ = 179;
                  stan::model::assign(theta_agd_arm_ii,
                    stan::math::inv_logit(
                      stan::math::subtract(
                        stan::model::rvalue(eta_agd_arm_noRE,
                          "eta_agd_arm_noRE",
                          stan::model::index_min_max((1 + ((i - 1) *
                            nint_max)), (((i - 1) * nint_max) + nint))),
                        stan::model::rvalue(cc, "cc",
                          stan::model::index_uni(
                            (stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                               stan::model::index_uni(i),
                               stan::model::index_uni((k + 1))) - 1))))),
                    "assigning variable theta_agd_arm_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)), stan::model::index_uni(k));
                }
              }
            } else {
              current_statement__ = 178;
              if (stan::math::logical_eq(link, 2)) {
                current_statement__ = 176;
                for (int i = 1; i <= ni_agd_arm; ++i) {
                  current_statement__ = 174;
                  for (int k = 1; k <=
                       (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                          stan::model::index_uni(i)) - 1); ++k) {
                    current_statement__ = 172;
                    stan::model::assign(theta_agd_arm_ii,
                      stan::math::Phi(
                        stan::math::subtract(
                          stan::model::rvalue(eta_agd_arm_noRE,
                            "eta_agd_arm_noRE",
                            stan::model::index_min_max((1 + ((i - 1) *
                              nint_max)), (((i - 1) * nint_max) + nint))),
                          stan::model::rvalue(cc, "cc",
                            stan::model::index_uni(
                              (stan::model::rvalue(agd_arm_cat,
                                 "agd_arm_cat", stan::model::index_uni(i),
                                 stan::model::index_uni((k + 1))) - 1))))),
                      "assigning variable theta_agd_arm_ii",
                      stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                        nint)), stan::model::index_uni(k));
                  }
                }
              } else {
                current_statement__ = 171;
                if (stan::math::logical_eq(link, 3)) {
                  current_statement__ = 169;
                  for (int i = 1; i <= ni_agd_arm; ++i) {
                    current_statement__ = 167;
                    for (int k = 1; k <=
                         (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                            stan::model::index_uni(i)) - 1); ++k) {
                      current_statement__ = 165;
                      stan::model::assign(theta_agd_arm_ii,
                        stan::math::inv_cloglog(
                          stan::math::subtract(
                            stan::model::rvalue(eta_agd_arm_noRE,
                              "eta_agd_arm_noRE",
                              stan::model::index_min_max((1 + ((i - 1) *
                                nint_max)), (((i - 1) * nint_max) + nint))),
                            stan::model::rvalue(cc, "cc",
                              stan::model::index_uni(
                                (stan::model::rvalue(agd_arm_cat,
                                   "agd_arm_cat", stan::model::index_uni(i),
                                   stan::model::index_uni((k + 1))) - 1))))),
                        "assigning variable theta_agd_arm_ii",
                        stan::model::index_min_max((1 + ((i - 1) * nint)), (i
                          * nint)), stan::model::index_uni(k));
                    }
                  }
                }
              }
            }
          }
          current_statement__ = 225;
          for (int i = 1; i <= ni_agd_arm; ++i) {
            current_statement__ = 223;
            for (int k = 1; k <=
                 (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                    stan::model::index_uni(i)) - 1); ++k) {
              current_statement__ = 221;
              stan::model::assign(q_agd_arm_bar,
                stan::math::mean(
                  stan::model::rvalue(theta_agd_arm_ii, "theta_agd_arm_ii",
                    stan::model::index_min_max((1 + ((i - 1) * nint)), (i *
                      nint)), stan::model::index_uni(k))),
                "assigning variable q_agd_arm_bar",
                stan::model::index_uni(i), stan::model::index_uni(k));
            }
          }
        } else {
          current_statement__ = 163;
          if (RE) {
            double eta_agd_arm_RE = std::numeric_limits<double>::quiet_NaN();
            current_statement__ = 161;
            if (stan::math::logical_eq(link, 1)) {
              current_statement__ = 159;
              for (int i = 1; i <= ni_agd_arm; ++i) {
                current_statement__ = 154;
                if (stan::model::rvalue(which_RE, "which_RE",
                      stan::model::index_uni((narm_ipd + i)))) {
                  current_statement__ = 153;
                  eta_agd_arm_RE = (stan::model::rvalue(eta_agd_arm_noRE,
                                      "eta_agd_arm_noRE",
                                      stan::model::index_uni(i))
                    +
                    stan::model::rvalue(f_delta, "f_delta",
                      stan::model::index_uni(
                        stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni((narm_ipd + i))))));
                } else {
                  current_statement__ = 152;
                  eta_agd_arm_RE = stan::model::rvalue(eta_agd_arm_noRE,
                                     "eta_agd_arm_noRE",
                                     stan::model::index_uni(i));
                }
                current_statement__ = 157;
                for (int k = 1; k <=
                     (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                        stan::model::index_uni(i)) - 1); ++k) {
                  current_statement__ = 155;
                  stan::model::assign(q_agd_arm_bar,
                    stan::math::inv_logit((eta_agd_arm_RE -
                      stan::model::rvalue(cc, "cc",
                        stan::model::index_uni(
                          (stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                             stan::model::index_uni(i),
                             stan::model::index_uni((k + 1))) - 1))))),
                    "assigning variable q_agd_arm_bar",
                    stan::model::index_uni(i), stan::model::index_uni(k));
                }
              }
            } else {
              current_statement__ = 151;
              if (stan::math::logical_eq(link, 2)) {
                current_statement__ = 149;
                for (int i = 1; i <= ni_agd_arm; ++i) {
                  current_statement__ = 144;
                  if (stan::model::rvalue(which_RE, "which_RE",
                        stan::model::index_uni((narm_ipd + i)))) {
                    current_statement__ = 143;
                    eta_agd_arm_RE = (stan::model::rvalue(eta_agd_arm_noRE,
                                        "eta_agd_arm_noRE",
                                        stan::model::index_uni(i))
                      +
                      stan::model::rvalue(f_delta, "f_delta",
                        stan::model::index_uni(
                          stan::model::rvalue(which_RE, "which_RE",
                            stan::model::index_uni((narm_ipd + i))))));
                  } else {
                    current_statement__ = 142;
                    eta_agd_arm_RE = stan::model::rvalue(eta_agd_arm_noRE,
                                       "eta_agd_arm_noRE",
                                       stan::model::index_uni(i));
                  }
                  current_statement__ = 147;
                  for (int k = 1; k <=
                       (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                          stan::model::index_uni(i)) - 1); ++k) {
                    current_statement__ = 145;
                    stan::model::assign(q_agd_arm_bar,
                      stan::math::Phi((eta_agd_arm_RE -
                        stan::model::rvalue(cc, "cc",
                          stan::model::index_uni(
                            (stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                               stan::model::index_uni(i),
                               stan::model::index_uni((k + 1))) - 1))))),
                      "assigning variable q_agd_arm_bar",
                      stan::model::index_uni(i), stan::model::index_uni(k));
                  }
                }
              } else {
                current_statement__ = 141;
                if (stan::math::logical_eq(link, 3)) {
                  current_statement__ = 139;
                  for (int i = 1; i <= ni_agd_arm; ++i) {
                    current_statement__ = 134;
                    if (stan::model::rvalue(which_RE, "which_RE",
                          stan::model::index_uni((narm_ipd + i)))) {
                      current_statement__ = 133;
                      eta_agd_arm_RE = (stan::model::rvalue(eta_agd_arm_noRE,
                                          "eta_agd_arm_noRE",
                                          stan::model::index_uni(i))
                        +
                        stan::model::rvalue(f_delta, "f_delta",
                          stan::model::index_uni(
                            stan::model::rvalue(which_RE, "which_RE",
                              stan::model::index_uni((narm_ipd + i))))));
                    } else {
                      current_statement__ = 132;
                      eta_agd_arm_RE = stan::model::rvalue(eta_agd_arm_noRE,
                                         "eta_agd_arm_noRE",
                                         stan::model::index_uni(i));
                    }
                    current_statement__ = 137;
                    for (int k = 1; k <=
                         (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                            stan::model::index_uni(i)) - 1); ++k) {
                      current_statement__ = 135;
                      stan::model::assign(q_agd_arm_bar,
                        stan::math::inv_cloglog((eta_agd_arm_RE -
                          stan::model::rvalue(cc, "cc",
                            stan::model::index_uni(
                              (stan::model::rvalue(agd_arm_cat,
                                 "agd_arm_cat", stan::model::index_uni(i),
                                 stan::model::index_uni((k + 1))) - 1))))),
                        "assigning variable q_agd_arm_bar",
                        stan::model::index_uni(i), stan::model::index_uni(k));
                    }
                  }
                }
              }
            }
          } else {
            current_statement__ = 129;
            if (stan::math::logical_eq(link, 1)) {
              current_statement__ = 127;
              for (int i = 1; i <= ni_agd_arm; ++i) {
                current_statement__ = 125;
                for (int k = 1; k <=
                     (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                        stan::model::index_uni(i)) - 1); ++k) {
                  current_statement__ = 123;
                  stan::model::assign(q_agd_arm_bar,
                    stan::math::inv_logit(
                      (stan::model::rvalue(eta_agd_arm_noRE,
                         "eta_agd_arm_noRE", stan::model::index_uni(i)) -
                      stan::model::rvalue(cc, "cc",
                        stan::model::index_uni(
                          (stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                             stan::model::index_uni(i),
                             stan::model::index_uni((k + 1))) - 1))))),
                    "assigning variable q_agd_arm_bar",
                    stan::model::index_uni(i), stan::model::index_uni(k));
                }
              }
            } else {
              current_statement__ = 122;
              if (stan::math::logical_eq(link, 2)) {
                current_statement__ = 120;
                for (int i = 1; i <= ni_agd_arm; ++i) {
                  current_statement__ = 118;
                  for (int k = 1; k <=
                       (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                          stan::model::index_uni(i)) - 1); ++k) {
                    current_statement__ = 116;
                    stan::model::assign(q_agd_arm_bar,
                      stan::math::Phi(
                        (stan::model::rvalue(eta_agd_arm_noRE,
                           "eta_agd_arm_noRE", stan::model::index_uni(i)) -
                        stan::model::rvalue(cc, "cc",
                          stan::model::index_uni(
                            (stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                               stan::model::index_uni(i),
                               stan::model::index_uni((k + 1))) - 1))))),
                      "assigning variable q_agd_arm_bar",
                      stan::model::index_uni(i), stan::model::index_uni(k));
                  }
                }
              } else {
                current_statement__ = 115;
                if (stan::math::logical_eq(link, 3)) {
                  current_statement__ = 113;
                  for (int i = 1; i <= ni_agd_arm; ++i) {
                    current_statement__ = 111;
                    for (int k = 1; k <=
                         (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                            stan::model::index_uni(i)) - 1); ++k) {
                      current_statement__ = 109;
                      stan::model::assign(q_agd_arm_bar,
                        stan::math::inv_cloglog(
                          (stan::model::rvalue(eta_agd_arm_noRE,
                             "eta_agd_arm_noRE", stan::model::index_uni(i)) -
                          stan::model::rvalue(cc, "cc",
                            stan::model::index_uni(
                              (stan::model::rvalue(agd_arm_cat,
                                 "agd_arm_cat", stan::model::index_uni(i),
                                 stan::model::index_uni((k + 1))) - 1))))),
                        "assigning variable q_agd_arm_bar",
                        stan::model::index_uni(i), stan::model::index_uni(k));
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 233;
        for (int i = 1; i <= ni_agd_arm; ++i) {
          current_statement__ = 228;
          stan::model::assign(theta_agd_arm_bar, (1 -
            stan::model::rvalue(q_agd_arm_bar, "q_agd_arm_bar",
              stan::model::index_uni(i), stan::model::index_uni(1))),
            "assigning variable theta_agd_arm_bar",
            stan::model::index_uni(i), stan::model::index_uni(1));
          current_statement__ = 230;
          for (int k = 2; k <=
               (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                  stan::model::index_uni(i)) - 1); ++k) {
            current_statement__ = 229;
            stan::model::assign(theta_agd_arm_bar,
              (stan::model::rvalue(q_agd_arm_bar, "q_agd_arm_bar",
                 stan::model::index_uni(i), stan::model::index_uni((k - 1)))
              -
              stan::model::rvalue(q_agd_arm_bar, "q_agd_arm_bar",
                stan::model::index_uni(i), stan::model::index_uni(k))),
              "assigning variable theta_agd_arm_bar",
              stan::model::index_uni(i),
              stan::model::index_uni(
                stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                  stan::model::index_uni(i), stan::model::index_uni(k))));
          }
          current_statement__ = 231;
          stan::model::assign(theta_agd_arm_bar,
            stan::model::rvalue(q_agd_arm_bar, "q_agd_arm_bar",
              stan::model::index_uni(i),
              stan::model::index_uni(
                (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                   stan::model::index_uni(i)) - 1))),
            "assigning variable theta_agd_arm_bar",
            stan::model::index_uni(i),
            stan::model::index_uni(
              stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                stan::model::index_uni(i),
                stan::model::index_uni(
                  stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                    stan::model::index_uni(i))))));
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(cc);
        for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= ni_ipd; ++sym2__) {
            out__.write(theta_ipd[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(theta_agd_arm_ii);
        for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= ni_agd_arm; ++sym2__) {
            out__.write(q_agd_arm_bar[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= ni_agd_arm; ++sym2__) {
            out__.write(theta_agd_arm_bar[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(eta_ipd);
        out__.write(f_delta);
        out__.write(allbeta);
        out__.write(mu);
        out__.write(d);
        out__.write(omega);
        out__.write(beta);
        out__.write(eta_agd_contrast_ii);
        out__.write(eta_agd_contrast_bar);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<Eigen::Matrix<double,-1,1>> fitted_ipd =
        std::vector<Eigen::Matrix<double,-1,1>>(ni_ipd,
          Eigen::Matrix<double,-1,1>::Constant(ncat,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> fitted_agd_arm =
        std::vector<Eigen::Matrix<double,-1,1>>(ni_agd_arm,
          Eigen::Matrix<double,-1,1>::Constant(ncat,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,-1> theta_bar_cum_agd_arm =
        Eigen::Matrix<double,-1,-1>::Constant(theta_bar_cum_agd_arm_1dim__,
          ncat, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 21;
      stan::model::assign(theta_bar_cum_agd_arm,
        stan::math::rep_matrix(0, (ni_agd_arm * n_int_thin), ncat),
        "assigning variable theta_bar_cum_agd_arm");
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(log_lik_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> resdev =
        Eigen::Matrix<double,-1,1>::Constant(resdev_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> fitted_agd_contrast =
        Eigen::Matrix<double,-1,1>::Constant(ni_agd_contrast,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> theta_bar_cum_agd_contrast =
        Eigen::Matrix<double,-1,1>::Constant(theta_bar_cum_agd_contrast_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> delta =
        Eigen::Matrix<double,-1,1>::Constant(n_delta,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 252;
      if (RE) {
        int s = std::numeric_limits<int>::min();
        current_statement__ = 236;
        s = 1;
        current_statement__ = 242;
        for (int i = 1; i <= (narm_ipd + narm_agd_arm); ++i) {
          current_statement__ = 240;
          if (stan::model::rvalue(which_RE, "which_RE",
                stan::model::index_uni(i))) {
            current_statement__ = 237;
            stan::model::assign(delta,
              ((stan::math::logical_gt(
                  stan::model::rvalue(trt, "trt", stan::model::index_uni(i)),
                  1) ? stan::model::rvalue(d, "d",
                         stan::model::index_uni(
                           (stan::model::rvalue(trt, "trt",
                              stan::model::index_uni(i)) - 1))) : 0) +
              (stan::model::rvalue(which_RE, "which_RE",
                 stan::model::index_uni(i)) ? stan::model::rvalue(f_delta,
                                                "f_delta",
                                                stan::model::index_uni(
                                                  stan::model::rvalue(
                                                    which_RE, "which_RE",
                                                    stan::model::index_uni(i)))) : 0)),
              "assigning variable delta", stan::model::index_uni(s));
            current_statement__ = 238;
            s = (s + 1);
          }
        }
        current_statement__ = 250;
        for (int i = 1; i <= ni_agd_contrast; ++i) {
          current_statement__ = 248;
          if (stan::model::rvalue(which_RE, "which_RE",
                stan::model::index_uni(((narm_ipd + narm_agd_arm) + i)))) {
            current_statement__ = 243;
            stan::model::assign(delta,
              ((stan::math::logical_gt(
                  stan::model::rvalue(trt, "trt",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i))),
                  1) ? stan::model::rvalue(d, "d",
                         stan::model::index_uni(
                           (stan::model::rvalue(trt, "trt",
                              stan::model::index_uni(((narm_ipd +
                                narm_agd_arm) + i))) - 1))) : 0) +
              (stan::model::rvalue(which_RE, "which_RE",
                 stan::model::index_uni(((narm_ipd + narm_agd_arm) + i))) ? 
              stan::model::rvalue(f_delta, "f_delta",
                stan::model::index_uni(
                  stan::model::rvalue(which_RE, "which_RE",
                    stan::model::index_uni(((narm_ipd + narm_agd_arm) + i))))) : 0)),
              "assigning variable delta", stan::model::index_uni(s));
            current_statement__ = 245;
            if (stan::math::logical_gt(
                  stan::model::rvalue(agd_contrast_trt_b,
                    "agd_contrast_trt_b", stan::model::index_uni(i)), 1)) {
              current_statement__ = 244;
              stan::model::assign(delta,
                (stan::model::rvalue(delta, "delta",
                   stan::model::index_uni(s)) -
                stan::model::rvalue(d, "d",
                  stan::model::index_uni(
                    (stan::model::rvalue(agd_contrast_trt_b,
                       "agd_contrast_trt_b", stan::model::index_uni(i)) - 1)))),
                "assigning variable delta", stan::model::index_uni(s));
            }
            current_statement__ = 246;
            s = (s + 1);
          }
        }
      }
      current_statement__ = 257;
      for (int i = 1; i <= ni_agd_contrast; ++i) {
        current_statement__ = 255;
        for (int j = 1; j <= n_int_thin; ++j) {
          current_statement__ = 253;
          stan::model::assign(theta_bar_cum_agd_contrast,
            stan::math::mean(
              stan::model::rvalue(eta_agd_contrast_ii, "eta_agd_contrast_ii",
                stan::model::index_min_max((1 + ((i - 1) * nint)), (((i - 1)
                  * nint) + (j * int_thin))))),
            "assigning variable theta_bar_cum_agd_contrast",
            stan::model::index_uni((((i - 1) * n_int_thin) + j)));
        }
      }
      current_statement__ = 258;
      stan::model::assign(fitted_agd_contrast, eta_agd_contrast_bar,
        "assigning variable fitted_agd_contrast");
      {
        int a = std::numeric_limits<int>::min();
        current_statement__ = 259;
        a = 0;
        int nc = std::numeric_limits<int>::min();
        current_statement__ = 266;
        for (int s = 1; s <= ns_agd_contrast; ++s) {
          current_statement__ = 261;
          nc = stan::model::rvalue(nc_agd_contrast, "nc_agd_contrast",
                 stan::model::index_uni(s));
          current_statement__ = 262;
          stan::model::assign(log_lik,
            stan::math::multi_normal_lpdf<false>(
              stan::model::rvalue(agd_contrast_y, "agd_contrast_y",
                stan::model::index_min_max((a + 1), (a + nc))),
              stan::model::rvalue(eta_agd_contrast_bar,
                "eta_agd_contrast_bar",
                stan::model::index_min_max((a + 1), (a + nc))),
              stan::model::rvalue(agd_contrast_Sigma, "agd_contrast_Sigma",
                stan::model::index_min_max((a + 1), (a + nc)),
                stan::model::index_min_max((a + 1), (a + nc)))),
            "assigning variable log_lik",
            stan::model::index_uni(((ni_ipd + ni_agd_arm) + s)));
          current_statement__ = 263;
          stan::model::assign(resdev,
            stan::math::quad_form(
              stan::model::rvalue(inv_Sigma, "inv_Sigma",
                stan::model::index_min_max((a + 1), (a + nc)),
                stan::model::index_min_max((a + 1), (a + nc))),
              stan::math::subtract(
                stan::model::rvalue(agd_contrast_y, "agd_contrast_y",
                  stan::model::index_min_max((a + 1), (a + nc))),
                stan::model::rvalue(eta_agd_contrast_bar,
                  "eta_agd_contrast_bar",
                  stan::model::index_min_max((a + 1), (a + nc))))),
            "assigning variable resdev",
            stan::model::index_uni(((ni_ipd + ni_agd_arm) + s)));
          current_statement__ = 264;
          a = (a + nc);
        }
      }
      current_statement__ = 272;
      for (int i = 1; i <= ni_ipd; ++i) {
        current_statement__ = 268;
        stan::model::assign(log_lik,
          stan::math::categorical_lpmf<false>(
            stan::model::rvalue(ipd_r, "ipd_r", stan::model::index_uni(i)),
            stan::model::rvalue(theta_ipd, "theta_ipd",
              stan::model::index_uni(i))), "assigning variable log_lik",
          stan::model::index_uni(i));
        current_statement__ = 269;
        stan::model::assign(resdev, (-2 *
          stan::model::rvalue(log_lik, "log_lik", stan::model::index_uni(i))),
          "assigning variable resdev", stan::model::index_uni(i));
        current_statement__ = 270;
        stan::model::assign(fitted_ipd,
          stan::model::rvalue(theta_ipd, "theta_ipd",
            stan::model::index_uni(i)), "assigning variable fitted_ipd",
          stan::model::index_uni(i));
      }
      {
        current_statement__ = 273;
        stan::math::validate_non_negative_index("dv", "ni_agd_arm",
          ni_agd_arm);
        current_statement__ = 274;
        stan::math::validate_non_negative_index("dv", "ncat", ncat);
        std::vector<Eigen::Matrix<double,-1,1>> dv =
          std::vector<Eigen::Matrix<double,-1,1>>(ni_agd_arm,
            Eigen::Matrix<double,-1,1>::Constant(ncat,
              std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 283;
        for (int i = 1; i <= ni_agd_arm; ++i) {
          current_statement__ = 276;
          stan::model::assign(log_lik,
            stan::math::multinomial_lpmf<false>(
              stan::model::rvalue(agd_arm_r, "agd_arm_r",
                stan::model::index_uni(i)),
              stan::model::rvalue(theta_agd_arm_bar, "theta_agd_arm_bar",
                stan::model::index_uni(i))), "assigning variable log_lik",
            stan::model::index_uni((ni_ipd + i)));
          current_statement__ = 277;
          stan::model::assign(fitted_agd_arm,
            stan::math::multiply(
              stan::model::rvalue(agd_arm_n, "agd_arm_n",
                stan::model::index_uni(i)),
              stan::model::rvalue(theta_agd_arm_bar, "theta_agd_arm_bar",
                stan::model::index_uni(i))),
            "assigning variable fitted_agd_arm", stan::model::index_uni(i));
          current_statement__ = 280;
          for (int k = 1; k <=
               stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                 stan::model::index_uni(i)); ++k) {
            current_statement__ = 278;
            stan::model::assign(dv,
              (stan::math::logical_eq(
                 stan::model::rvalue(agd_arm_r, "agd_arm_r",
                   stan::model::index_uni(i),
                   stan::model::index_uni(
                     stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                       stan::model::index_uni(i), stan::model::index_uni(k)))),
                 0) ? 0 : stan::math::multiply_log(
                            stan::model::rvalue(agd_arm_r, "agd_arm_r",
                              stan::model::index_uni(i),
                              stan::model::index_uni(
                                stan::model::rvalue(agd_arm_cat,
                                  "agd_arm_cat", stan::model::index_uni(i),
                                  stan::model::index_uni(k)))),
                            (stan::model::rvalue(agd_arm_r, "agd_arm_r",
                               stan::model::index_uni(i),
                               stan::model::index_uni(
                                 stan::model::rvalue(agd_arm_cat,
                                   "agd_arm_cat", stan::model::index_uni(i),
                                   stan::model::index_uni(k)))) /
                            stan::model::rvalue(fitted_agd_arm,
                              "fitted_agd_arm", stan::model::index_uni(i),
                              stan::model::index_uni(
                                stan::model::rvalue(agd_arm_cat,
                                  "agd_arm_cat", stan::model::index_uni(i),
                                  stan::model::index_uni(k))))))),
              "assigning variable dv", stan::model::index_uni(i),
              stan::model::index_uni(k));
          }
          current_statement__ = 281;
          stan::model::assign(resdev, (2 *
            stan::math::sum(
              stan::model::rvalue(dv, "dv", stan::model::index_uni(i),
                stan::model::index_min_max(1,
                  stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                    stan::model::index_uni(i)))))),
            "assigning variable resdev", stan::model::index_uni((ni_ipd + i)));
        }
      }
      current_statement__ = 296;
      for (int i = 1; i <= ni_agd_arm; ++i) {
        current_statement__ = 294;
        for (int j = 1; j <= n_int_thin; ++j) {
          current_statement__ = 285;
          stan::math::validate_non_negative_index("q_agd_arm_bar_cum",
            "ncat - 1", (ncat - 1));
          Eigen::Matrix<double,-1,1> q_agd_arm_bar_cum =
            Eigen::Matrix<double,-1,1>::Constant((ncat - 1),
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 288;
          for (int k = 1; k <=
               (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                  stan::model::index_uni(i)) - 1); ++k) {
            current_statement__ = 287;
            stan::model::assign(q_agd_arm_bar_cum,
              stan::math::mean(
                stan::model::rvalue(theta_agd_arm_ii, "theta_agd_arm_ii",
                  stan::model::index_min_max((1 + ((i - 1) * nint)), (((i -
                    1) * nint) + (j * int_thin))), stan::model::index_uni(k))),
              "assigning variable q_agd_arm_bar_cum",
              stan::model::index_uni(k));
          }
          current_statement__ = 289;
          stan::model::assign(theta_bar_cum_agd_arm, (1 -
            stan::model::rvalue(q_agd_arm_bar_cum, "q_agd_arm_bar_cum",
              stan::model::index_uni(1))),
            "assigning variable theta_bar_cum_agd_arm",
            stan::model::index_uni((((i - 1) * n_int_thin) + j)),
            stan::model::index_uni(1));
          current_statement__ = 291;
          for (int k = 2; k <=
               (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                  stan::model::index_uni(i)) - 1); ++k) {
            current_statement__ = 290;
            stan::model::assign(theta_bar_cum_agd_arm,
              (stan::model::rvalue(q_agd_arm_bar_cum, "q_agd_arm_bar_cum",
                 stan::model::index_uni((k - 1))) -
              stan::model::rvalue(q_agd_arm_bar_cum, "q_agd_arm_bar_cum",
                stan::model::index_uni(k))),
              "assigning variable theta_bar_cum_agd_arm",
              stan::model::index_uni((((i - 1) * n_int_thin) + j)),
              stan::model::index_uni(
                stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                  stan::model::index_uni(i), stan::model::index_uni(k))));
          }
          current_statement__ = 292;
          stan::model::assign(theta_bar_cum_agd_arm,
            stan::model::rvalue(q_agd_arm_bar_cum, "q_agd_arm_bar_cum",
              stan::model::index_uni(
                (stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                   stan::model::index_uni(i)) - 1))),
            "assigning variable theta_bar_cum_agd_arm",
            stan::model::index_uni((((i - 1) * n_int_thin) + j)),
            stan::model::index_uni(
              stan::model::rvalue(agd_arm_cat, "agd_arm_cat",
                stan::model::index_uni(i),
                stan::model::index_uni(
                  stan::model::rvalue(agd_arm_ncat, "agd_arm_ncat",
                    stan::model::index_uni(i))))));
        }
      }
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ni_ipd; ++sym2__) {
          out__.write(fitted_ipd[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ni_agd_arm; ++sym2__) {
          out__.write(fitted_agd_arm[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(theta_bar_cum_agd_arm);
      out__.write(log_lik);
      out__.write(resdev);
      out__.write(fitted_agd_contrast);
      out__.write(theta_bar_cum_agd_contrast);
      out__.write(delta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta_tilde =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nX, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta_tilde,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nX),
        "assigning variable beta_tilde");
      out__.write(beta_tilde);
      Eigen::Matrix<local_scalar_t__,-1,1> u_delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_delta, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(u_delta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_delta),
        "assigning variable u_delta");
      out__.write(u_delta);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tau_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(tau,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(tau_1dim__),
        "assigning variable tau");
      out__.write_free_lb(0, tau);
      Eigen::Matrix<local_scalar_t__,-1,1> f_cc =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(f_cc_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(f_cc,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(f_cc_1dim__),
        "assigning variable f_cc");
      out__.write_free_positive_ordered(f_cc);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta_tilde",
        "double", std::vector<size_t>{static_cast<size_t>(nX)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "u_delta",
        "double", std::vector<size_t>{static_cast<size_t>(n_delta)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "tau", "double",
        std::vector<size_t>{static_cast<size_t>(tau_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "f_cc", "double",
        std::vector<size_t>{static_cast<size_t>(f_cc_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta_tilde =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nX, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_tilde_flat__;
        current_statement__ = 1;
        beta_tilde_flat__ = context__.vals_r("beta_tilde");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(beta_tilde, beta_tilde_flat__[(pos__ - 1)],
            "assigning variable beta_tilde", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta_tilde);
      Eigen::Matrix<local_scalar_t__,-1,1> u_delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_delta, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> u_delta_flat__;
        current_statement__ = 2;
        u_delta_flat__ = context__.vals_r("u_delta");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(u_delta, u_delta_flat__[(pos__ - 1)],
            "assigning variable u_delta", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(u_delta);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tau_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> tau_flat__;
        current_statement__ = 3;
        tau_flat__ = context__.vals_r("tau");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(tau, tau_flat__[(pos__ - 1)],
            "assigning variable tau", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, tau);
      Eigen::Matrix<local_scalar_t__,-1,1> f_cc =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(f_cc_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> f_cc_flat__;
        current_statement__ = 4;
        f_cc_flat__ = context__.vals_r("f_cc");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= f_cc_1dim__; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(f_cc, f_cc_flat__[(pos__ - 1)],
            "assigning variable f_cc", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_positive_ordered(f_cc);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta_tilde", "u_delta", "tau",
                "f_cc"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"cc", "theta_ipd", "theta_agd_arm_ii", "q_agd_arm_bar",
             "theta_agd_arm_bar", "eta_ipd", "f_delta", "allbeta", "mu", "d",
             "omega", "beta", "eta_agd_contrast_ii", "eta_agd_contrast_bar"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"fitted_ipd", "fitted_agd_arm", "theta_bar_cum_agd_arm",
             "log_lik", "resdev", "fitted_agd_contrast",
             "theta_bar_cum_agd_contrast", "delta"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    nX)},
                std::vector<size_t>{static_cast<size_t>(n_delta)},
                std::vector<size_t>{static_cast<size_t>(tau_1dim__)},
                std::vector<size_t>{static_cast<size_t>(f_cc_1dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(cc_1dim__)},
             std::vector<size_t>{static_cast<size_t>(ni_ipd),
               static_cast<size_t>(ncat)},
             std::vector<size_t>{static_cast<size_t>(theta_agd_arm_ii_1dim__),
               static_cast<size_t>(theta_agd_arm_ii_2dim__)},
             std::vector<size_t>{static_cast<size_t>(ni_agd_arm),
               static_cast<size_t>(ncat)},
             std::vector<size_t>{static_cast<size_t>(ni_agd_arm),
               static_cast<size_t>(ncat)},
             std::vector<size_t>{static_cast<size_t>(ni_ipd)},
             std::vector<size_t>{static_cast<size_t>(n_delta)},
             std::vector<size_t>{static_cast<size_t>(nX)},
             std::vector<size_t>{static_cast<size_t>(totns)},
             std::vector<size_t>{static_cast<size_t>(d_1dim__)},
             std::vector<size_t>{static_cast<size_t>(nodesplit)},
             std::vector<size_t>{static_cast<size_t>(beta_1dim__)},
             std::vector<size_t>{static_cast<size_t>(
                                   eta_agd_contrast_ii_1dim__)},
             std::vector<size_t>{static_cast<size_t>(ni_agd_contrast)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(ni_ipd),
               static_cast<size_t>(ncat)},
             std::vector<size_t>{static_cast<size_t>(ni_agd_arm),
               static_cast<size_t>(ncat)},
             std::vector<size_t>{static_cast<size_t>(
                                   theta_bar_cum_agd_arm_1dim__),
               static_cast<size_t>(ncat)},
             std::vector<size_t>{static_cast<size_t>(log_lik_1dim__)},
             std::vector<size_t>{static_cast<size_t>(resdev_1dim__)},
             std::vector<size_t>{static_cast<size_t>(ni_agd_contrast)},
             std::vector<size_t>{static_cast<size_t>(
                                   theta_bar_cum_agd_contrast_1dim__)},
             std::vector<size_t>{static_cast<size_t>(n_delta)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_tilde" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
      param_names__.emplace_back(std::string() + "u_delta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= f_cc_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "f_cc" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= cc_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "cc" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ni_ipd; ++sym2__) {
          param_names__.emplace_back(std::string() + "theta_ipd" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= theta_agd_arm_ii_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= theta_agd_arm_ii_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "theta_agd_arm_ii" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ni_agd_arm; ++sym2__) {
          param_names__.emplace_back(std::string() + "q_agd_arm_bar" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ni_agd_arm; ++sym2__) {
          param_names__.emplace_back(std::string() + "theta_agd_arm_bar" +
            '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= ni_ipd; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_ipd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
        param_names__.emplace_back(std::string() + "f_delta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
        param_names__.emplace_back(std::string() + "allbeta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= totns; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= d_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "d" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nodesplit; ++sym1__) {
        param_names__.emplace_back(std::string() + "omega" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= eta_agd_contrast_ii_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_agd_contrast_ii" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_agd_contrast; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_agd_contrast_bar" +
          '.' + std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ni_ipd; ++sym2__) {
          param_names__.emplace_back(std::string() + "fitted_ipd" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ni_agd_arm; ++sym2__) {
          param_names__.emplace_back(std::string() + "fitted_agd_arm" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= theta_bar_cum_agd_arm_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "theta_bar_cum_agd_arm"
            + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= resdev_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "resdev" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_agd_contrast; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_agd_contrast" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <=
           theta_bar_cum_agd_contrast_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "theta_bar_cum_agd_contrast" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
        param_names__.emplace_back(std::string() + "delta" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_tilde" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
      param_names__.emplace_back(std::string() + "u_delta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= f_cc_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "f_cc" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= cc_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "cc" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ni_ipd; ++sym2__) {
          param_names__.emplace_back(std::string() + "theta_ipd" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= theta_agd_arm_ii_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= theta_agd_arm_ii_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "theta_agd_arm_ii" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ni_agd_arm; ++sym2__) {
          param_names__.emplace_back(std::string() + "q_agd_arm_bar" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ni_agd_arm; ++sym2__) {
          param_names__.emplace_back(std::string() + "theta_agd_arm_bar" +
            '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= ni_ipd; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_ipd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
        param_names__.emplace_back(std::string() + "f_delta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nX; ++sym1__) {
        param_names__.emplace_back(std::string() + "allbeta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= totns; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= d_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "d" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nodesplit; ++sym1__) {
        param_names__.emplace_back(std::string() + "omega" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= eta_agd_contrast_ii_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_agd_contrast_ii" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_agd_contrast; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta_agd_contrast_bar" +
          '.' + std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ni_ipd; ++sym2__) {
          param_names__.emplace_back(std::string() + "fitted_ipd" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ni_agd_arm; ++sym2__) {
          param_names__.emplace_back(std::string() + "fitted_agd_arm" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= theta_bar_cum_agd_arm_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "theta_bar_cum_agd_arm"
            + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= resdev_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "resdev" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ni_agd_contrast; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_agd_contrast" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <=
           theta_bar_cum_agd_contrast_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "theta_bar_cum_agd_contrast" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
        param_names__.emplace_back(std::string() + "delta" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nX) + "},\"block\":\"parameters\"},{\"name\":\"u_delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tau_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"f_cc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(f_cc_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"cc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(cc_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_ipd\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ni_ipd) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncat) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"theta_agd_arm_ii\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(theta_agd_arm_ii_1dim__) + ",\"cols\":" + std::to_string(theta_agd_arm_ii_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"q_agd_arm_bar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ni_agd_arm) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncat) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"theta_agd_arm_bar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ni_agd_arm) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncat) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"eta_ipd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_ipd) + "},\"block\":\"transformed_parameters\"},{\"name\":\"f_delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"transformed_parameters\"},{\"name\":\"allbeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nX) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(totns) + "},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nodesplit) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_agd_contrast_ii\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eta_agd_contrast_ii_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_agd_contrast_bar\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_agd_contrast) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fitted_ipd\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ni_ipd) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncat) + "}},\"block\":\"generated_quantities\"},{\"name\":\"fitted_agd_arm\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ni_agd_arm) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncat) + "}},\"block\":\"generated_quantities\"},{\"name\":\"theta_bar_cum_agd_arm\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(theta_bar_cum_agd_arm_1dim__) + ",\"cols\":" + std::to_string(ncat) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"resdev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(resdev_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"fitted_agd_contrast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_agd_contrast) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta_bar_cum_agd_contrast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(theta_bar_cum_agd_contrast_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nX) + "},\"block\":\"parameters\"},{\"name\":\"u_delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tau_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"f_cc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(f_cc_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"cc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(cc_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_ipd\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ni_ipd) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncat) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"theta_agd_arm_ii\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(theta_agd_arm_ii_1dim__) + ",\"cols\":" + std::to_string(theta_agd_arm_ii_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"q_agd_arm_bar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ni_agd_arm) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncat) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"theta_agd_arm_bar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ni_agd_arm) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncat) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"eta_ipd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_ipd) + "},\"block\":\"transformed_parameters\"},{\"name\":\"f_delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"transformed_parameters\"},{\"name\":\"allbeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nX) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(totns) + "},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nodesplit) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_agd_contrast_ii\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eta_agd_contrast_ii_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_agd_contrast_bar\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_agd_contrast) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fitted_ipd\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ni_ipd) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncat) + "}},\"block\":\"generated_quantities\"},{\"name\":\"fitted_agd_arm\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ni_agd_arm) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncat) + "}},\"block\":\"generated_quantities\"},{\"name\":\"theta_bar_cum_agd_arm\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(theta_bar_cum_agd_arm_1dim__) + ",\"cols\":" + std::to_string(ncat) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"resdev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(resdev_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"fitted_agd_contrast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ni_agd_contrast) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta_bar_cum_agd_contrast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(theta_bar_cum_agd_contrast_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((nX + n_delta) + tau_1dim__) + f_cc_1dim__);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((((cc_1dim__ + (ni_ipd * ncat)) + (theta_agd_arm_ii_1dim__ *
      theta_agd_arm_ii_2dim__)) + (ni_agd_arm * ncat)) + (ni_agd_arm * ncat))
      + ni_ipd) + n_delta) + nX) + totns) + d_1dim__) + nodesplit) +
      beta_1dim__) + eta_agd_contrast_ii_1dim__) + ni_agd_contrast));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((((((((ni_ipd * ncat) + (ni_agd_arm * ncat)) +
      (theta_bar_cum_agd_arm_1dim__ * ncat)) + log_lik_1dim__) +
      resdev_1dim__) + ni_agd_contrast) + theta_bar_cum_agd_contrast_1dim__)
      + n_delta));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((nX + n_delta) + tau_1dim__) + f_cc_1dim__);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((((cc_1dim__ + (ni_ipd * ncat)) + (theta_agd_arm_ii_1dim__ *
      theta_agd_arm_ii_2dim__)) + (ni_agd_arm * ncat)) + (ni_agd_arm * ncat))
      + ni_ipd) + n_delta) + nX) + totns) + d_1dim__) + nodesplit) +
      beta_1dim__) + eta_agd_contrast_ii_1dim__) + ni_agd_contrast));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((((((((ni_ipd * ncat) + (ni_agd_arm * ncat)) +
      (theta_bar_cum_agd_arm_1dim__ * ncat)) + log_lik_1dim__) +
      resdev_1dim__) + ni_agd_contrast) + theta_bar_cum_agd_contrast_1dim__)
      + n_delta));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_ordered_multinomial_namespace::model_ordered_multinomial;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_ordered_multinomial_namespace::profiles__;
}
#endif
#endif
